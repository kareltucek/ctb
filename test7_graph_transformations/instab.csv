#note	type	output type	input types	op id	flags	width in	width out	code	tags	rating	code custom	code decl
	instruction	INT		ADDI		1	1	$$arg1 + $$arg2		0		
	instruction	INT		ADDI		4	4	_mm_add_epi32($$arg1, $$arg2)		0		
	instruction	INT		LDI	input	1	1	$$input		0		
	instruction	INT		LDI	input	4	4	_mm_loadu_si128((const __m128i*)&$$input)		0		
	instruction	INT		MULI		1	1	$$arg1 * $$arg2		0		
	instruction	INT		MULI		2	2	_mm_shuffle_epi32(_mm_mul_epu32($$arg1, $$arg2), _MM_SHUFFLE (0,0,2,0))		0		
	instruction	INT		STI	output	1	1	$$output = $$arg1		0		
	instruction	INT		STI	output	4	4	_mm_storeu_si128((__m128i*)&$$output, $$arg1)		0		

	instruction		INT,INT	SPLIT_ST_INT	output	4	4	SPLIT_ST($$arg1, $$arg2)		0		
	instruction	INT		SPLIT_LD_INT	input	4	4	SPLIT_LD($$arg1)		0		
	instruction		INT	MERGE_ST_INT	output	4	4	MERGE_ST($$arg1)		0		
	instruction	INT		MERGE_LD_INT	input	4	4	MERGE_LD($$arg1)		0		
	instruction		INT	BUFF_ST_INT	output	4	4	BUFF_ST($$arg1)		0		
	instruction		INT	BUFF_LD_INT	output	4	4	BUFF_LD($$arg1)		0		

#note	type	output type	input types	op id	flags	name	transformer	args
split	expansion	INT,INT	INT,INT	SPLIT_INT		split	cf	SPLIT_ST_INT,SPLIT_LD_INT,SPLIT_LD_INT
split	expansion	INT	INT,INT,INT	MERGE_INT		merge	cf	MERGE_LD_INT,MERGE_ST_INT,MERGE_ST_INT,BUFF_ST_INT
split	expansion	INT	INT	BUFF_INT		buffer	cf	BUFF_ST_INT, BUFF_LD_INT

#note	type	type id	bitwidth	width	code
	type_version	FLOAT	32	1	float
	type_version	FLOAT	32	4	__m128
	type_version	FLOAT	32	2	__m128
	type_version	INT	32	1	int
	type_version	INT	32	2	__m128i
	type_version	INT	32	4	__m128i
#note	type	type id	bitwidth	width in	width out	code1	code2	code custom	code generic	tags	rating
	type_conversion	FLOAT	32	2	4	_mm_movelh_ps($$arg1, $$arg2)					0
	type_conversion	INT	32	2	4	_mm_unpacklo_epi32($$arg1,$$arg2)					0
	type_conversion	INT	32	4	2	$$arg1	_mm_srli_si128($$arg1,4)				0

