!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$$arg1	sse_set/C_table_expanded.csv	/^logical	instruction	bool	bool,bool	LE_bool		1	1	$$arg1 <= $$arg2		C	10$/;"	v
$$input	sse_set/C_table_expanded.csv	/^sse_IO	instruction	bool		LD_bool_vector	input	128	128		$$type preload_$$basename = _mm_load_si128,(const __m128i*)&$$input);	sse,preloadio	10$/;"	v
$$output	sse_set/C_table.csv	/^sse_IO	instruction	bool	bool	ST_bool_byte	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table.csv	/^sse_IO	instruction	ssebool	ssebool	ST_ssebool_byte	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	bool	bool	ST_bool	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	double	double	ST_double	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	float	float	ST_float	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	int16_t	int16_t	ST_int16_t	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	int32_t	int32_t	ST_int32_t	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	int64_t	int64_t	ST_int64_t	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	int8_t	int8_t	ST_int8_t	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	uint16_t	uint16_t	ST_uint16_t	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	uint32_t	uint32_t	ST_uint32_t	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	uint64_t	uint64_t	ST_uint64_t	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^IO	instruction	uint8_t	uint8_t	ST_uint8_t	output	1	1	$$output = $$arg1		C	10$/;"	v
$$output	sse_set/C_table_expanded.csv	/^sse_IO	instruction	ssebool	ssebool	ST_ssebool_byte	output	1	1	$$output = $$arg1		C	10$/;"	v
$1_box	templates/bobox_box.h	/^  $1_box(const bobox::box_parameters_pack &box_params) : bobox::basic_box(box_params) {}$/;"	f	class:$1_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
$1_box	templates/bobox_box.h	/^class $1_box : public bobox::basic_box {$/;"	c	inherits:bobox::basic_box
$1_box::$1_box	templates/bobox_box.h	/^  $1_box(const bobox::box_parameters_pack &box_params) : bobox::basic_box(box_params) {}$/;"	f	class:$1_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
$1_box::BOBOX_BOX_INPUTS_LIST	templates/bobox_box.h	/^  BOBOX_BOX_INPUTS_LIST($2);$/;"	p	class:$1_box	access:public	signature:($2)
$1_box::BOBOX_BOX_OUTPUTS_LIST	templates/bobox_box.h	/^  BOBOX_BOX_OUTPUTS_LIST($3);$/;"	p	class:$1_box	access:public	signature:($3)
$1_box::model	templates/bobox_box.h	/^  typedef generic_model<$1_box> model;$/;"	t	class:$1_box	access:public
ADD	aliasenv_bobox.h	27;"	d
ADD	aliasenv_generator.h	44;"	d
ADD	aliasenv_maker.h	42;"	d
ADD	aliasenv_simple.h	36;"	d
ADD	aliasenv_simu.h	35;"	d
ARG	generator.h	219;"	d
BOBOX_BOX_INPUTS_LIST	templates/bobox_box.h	/^  BOBOX_BOX_INPUTS_LIST($2);$/;"	p	class:$1_box	access:public	signature:($2)
BOBOX_BOX_INPUTS_LIST	unit_test1/test_bobox.h	/^  BOBOX_BOX_INPUTS_LIST(input_list_2, 2,input_list_1, 1);$/;"	p	class:test_bobox_box	access:public	signature:(input_list_2, 2,input_list_1, 1)
BOBOX_BOX_INPUTS_LIST	unit_test6/main.cpp	/^	BOBOX_BOX_INPUTS_LIST(data_in, 0);$/;"	p	class:sink_box	file:	access:public	signature:(data_in, 0)
BOBOX_BOX_INPUTS_LIST	unit_test6/main.cpp	/^	BOBOX_BOX_INPUTS_LIST(poison_in, 0);$/;"	p	class:source_box	file:	access:public	signature:(poison_in, 0)
BOBOX_BOX_INPUTS_LIST	unit_test6/output.h	/^  BOBOX_BOX_INPUTS_LIST(input_list_0, 0,input_list_1, 1);$/;"	p	class:output_box	access:public	signature:(input_list_0, 0,input_list_1, 1)
BOBOX_BOX_OUTPUTS_LIST	templates/bobox_box.h	/^  BOBOX_BOX_OUTPUTS_LIST($3);$/;"	p	class:$1_box	access:public	signature:($3)
BOBOX_BOX_OUTPUTS_LIST	unit_test1/test_bobox.h	/^  BOBOX_BOX_OUTPUTS_LIST(output_list_0, 0);$/;"	p	class:test_bobox_box	access:public	signature:(output_list_0, 0)
BOBOX_BOX_OUTPUTS_LIST	unit_test6/main.cpp	/^	BOBOX_BOX_OUTPUTS_LIST(data_out, 0);$/;"	p	class:source_box	file:	access:public	signature:(data_out, 0)
BOBOX_BOX_OUTPUTS_LIST	unit_test6/main.cpp	/^	BOBOX_BOX_OUTPUTS_LIST(poison_out, 0);$/;"	p	class:sink_box	file:	access:public	signature:(poison_out, 0)
BOBOX_BOX_OUTPUTS_LIST	unit_test6/output.h	/^  BOBOX_BOX_OUTPUTS_LIST(output_list_0, 0);$/;"	p	class:output_box	access:public	signature:(output_list_0, 0)
CARTESIAN_GUARD	cartesian_multiplier.h	2;"	d
CEST	journal	/^Sat May  2 11:42:39 CEST 2015$/;"	v
CONVERT_GUARD	conversions.h	2;"	d
CSVLOADER_GUARD	loader_csv.h	2;"	d
DATATYPES_GUARD	datatypes.h	2;"	d
DATATYPES_GUARD	split.h	2;"	d
DEBUG_SSE	templates/macros.h	7;"	d
DEBUG_SSE	unit_test4/macros.h	7;"	d
DEBUG_SSE	unit_test5/macros.h	7;"	d
DEBUG_STD	templates/macros.h	3;"	d
DEBUG_STD	unit_test4/macros.h	3;"	d
DEBUG_STD	unit_test5/macros.h	3;"	d
ERROR_GUARD	errorhandling.h	2;"	d
GENERATOR_GUARD	generator.h	3;"	d
GRAPH_GUARD	graph.h	2;"	d
INSTRUCTION_GUARD	instructions.h	3;"	d
INT	unit_test3/instab.csv	/^	instruction	INT	INT,INT	ADDI		1	1	$$arg1 + $$arg2			0$/;"	v
INT	unit_test3/instab.csv	/^	instruction	INT	INT,INT	ADDI		4	4	_mm_add_epi32($$arg1, $$arg2)			0$/;"	v
INT	unit_test3/instab.csv	/^	instruction	INT	INT,INT	MULI		1	1	$$arg1 * $$arg2			0$/;"	v
INT	unit_test3/instab.csv	/^	instruction	INT	INT,INT	MULI		2	2	_mm_shuffle_epi32(_mm_mul_epu32($$arg1, $$arg2), _MM_SHUFFLE (0,0,2,0))			0$/;"	v
JOIN_LD	control-flow-notes/ex1.h	/^JOIN_LD(from)$/;"	f	signature:(from)
JOIN_ST	control-flow-notes/ex1.h	/^JOIN_ST(to, from)$/;"	f	signature:(to, from)
LANGUAGEEMPTY_GUARD	languages.h	2;"	d
N	unit_test1/test	/^N/;"	v
N	unit_test3/test	/^N/;"	v
PARSER_GUARD	parser.h	3;"	d
PROXY_GUARD	proxy.h	2;"	d
Q	unit_test6/test	/^Q/;"	v
SPLIT_LD	control-flow-notes/ex1.h	/^SPLIT_LD(to, from) \/\/!!!n^2 ->branching with round robin?$/;"	f	signature:(to, from)
SPLIT_ST_TRUE	control-flow-notes/ex1.h	/^SPLIT_ST_TRUE(to, from, control)$/;"	f	signature:(to, from, control)
T	unit_test1/test	/^¨/;"	v
T	unit_test3/test	/^¨/;"	v
TAGHANDLER_GUARD	taghandler.h	2;"	d
TAGMASTER_GUARD	tagmaster.h	2;"	d
TESTLOADER_GUARD	loader_test.h	2;"	d
TMPTEST	defines.h	2;"	d
WRITER_GUARD	writer.h	3;"	d
XMLCheckResult	loader_xml.h	7;"	d
XMLLOADER_GUARD	loader_xml.h	2;"	d
_EMMINTRIN_H_INCLUDED	sse_set/intrin_ref.h	2201;"	d
_MMINTRIN_H_INCLUDED	sse_set/intrin_ref.h	29;"	d
_MM_DENORMALS_ZERO_MASK	sse_set/intrin_ref.h	3732;"	d
_MM_DENORMALS_ZERO_OFF	sse_set/intrin_ref.h	3734;"	d
_MM_DENORMALS_ZERO_ON	sse_set/intrin_ref.h	3733;"	d
_MM_EXCEPT_DENORM	sse_set/intrin_ref.h	985;"	d
_MM_EXCEPT_DIV_ZERO	sse_set/intrin_ref.h	986;"	d
_MM_EXCEPT_INEXACT	sse_set/intrin_ref.h	989;"	d
_MM_EXCEPT_INVALID	sse_set/intrin_ref.h	984;"	d
_MM_EXCEPT_MASK	sse_set/intrin_ref.h	983;"	d
_MM_EXCEPT_OVERFLOW	sse_set/intrin_ref.h	987;"	d
_MM_EXCEPT_UNDERFLOW	sse_set/intrin_ref.h	988;"	d
_MM_EXTRACT_FLOAT	sse_set/intrin_ref.h	4448;"	d
_MM_FLUSH_ZERO_MASK	sse_set/intrin_ref.h	1005;"	d
_MM_FLUSH_ZERO_OFF	sse_set/intrin_ref.h	1007;"	d
_MM_FLUSH_ZERO_ON	sse_set/intrin_ref.h	1006;"	d
_MM_FROUND_CEIL	sse_set/intrin_ref.h	4117;"	d
_MM_FROUND_CUR_DIRECTION	sse_set/intrin_ref.h	4108;"	d
_MM_FROUND_FLOOR	sse_set/intrin_ref.h	4115;"	d
_MM_FROUND_NEARBYINT	sse_set/intrin_ref.h	4123;"	d
_MM_FROUND_NINT	sse_set/intrin_ref.h	4113;"	d
_MM_FROUND_NO_EXC	sse_set/intrin_ref.h	4111;"	d
_MM_FROUND_RAISE_EXC	sse_set/intrin_ref.h	4110;"	d
_MM_FROUND_RINT	sse_set/intrin_ref.h	4121;"	d
_MM_FROUND_TO_NEAREST_INT	sse_set/intrin_ref.h	4104;"	d
_MM_FROUND_TO_NEG_INF	sse_set/intrin_ref.h	4105;"	d
_MM_FROUND_TO_POS_INF	sse_set/intrin_ref.h	4106;"	d
_MM_FROUND_TO_ZERO	sse_set/intrin_ref.h	4107;"	d
_MM_FROUND_TRUNC	sse_set/intrin_ref.h	4119;"	d
_MM_GET_DENORMALS_ZERO_MODE	sse_set/intrin_ref.h	3738;"	d
_MM_GET_EXCEPTION_MASK	sse_set/intrin_ref.h	/^_MM_GET_EXCEPTION_MASK (void)$/;"	f	signature:(void)
_MM_GET_EXCEPTION_STATE	sse_set/intrin_ref.h	/^_MM_GET_EXCEPTION_STATE (void)$/;"	f	signature:(void)
_MM_GET_FLUSH_ZERO_MODE	sse_set/intrin_ref.h	/^_MM_GET_FLUSH_ZERO_MODE (void)$/;"	f	signature:(void)
_MM_GET_ROUNDING_MODE	sse_set/intrin_ref.h	/^_MM_GET_ROUNDING_MODE (void)$/;"	f	signature:(void)
_MM_HINT_NTA	sse_set/intrin_ref.h	/^  _MM_HINT_NTA = 0$/;"	e	enum:_mm_hint
_MM_HINT_T0	sse_set/intrin_ref.h	/^  _MM_HINT_T0 = 3,$/;"	e	enum:_mm_hint
_MM_HINT_T1	sse_set/intrin_ref.h	/^  _MM_HINT_T1 = 2,$/;"	e	enum:_mm_hint
_MM_HINT_T2	sse_set/intrin_ref.h	/^  _MM_HINT_T2 = 1,$/;"	e	enum:_mm_hint
_MM_MASK_DENORM	sse_set/intrin_ref.h	993;"	d
_MM_MASK_DIV_ZERO	sse_set/intrin_ref.h	994;"	d
_MM_MASK_INEXACT	sse_set/intrin_ref.h	997;"	d
_MM_MASK_INVALID	sse_set/intrin_ref.h	992;"	d
_MM_MASK_MASK	sse_set/intrin_ref.h	991;"	d
_MM_MASK_OVERFLOW	sse_set/intrin_ref.h	995;"	d
_MM_MASK_UNDERFLOW	sse_set/intrin_ref.h	996;"	d
_MM_MK_INSERTPS_NDX	sse_set/intrin_ref.h	4422;"	d
_MM_PICK_OUT_PS	sse_set/intrin_ref.h	4453;"	d
_MM_ROUND_DOWN	sse_set/intrin_ref.h	1001;"	d
_MM_ROUND_MASK	sse_set/intrin_ref.h	999;"	d
_MM_ROUND_NEAREST	sse_set/intrin_ref.h	1000;"	d
_MM_ROUND_TOWARD_ZERO	sse_set/intrin_ref.h	1003;"	d
_MM_ROUND_UP	sse_set/intrin_ref.h	1002;"	d
_MM_SET_DENORMALS_ZERO_MODE	sse_set/intrin_ref.h	3736;"	d
_MM_SET_EXCEPTION_MASK	sse_set/intrin_ref.h	/^_MM_SET_EXCEPTION_MASK (unsigned int __mask)$/;"	f	signature:(unsigned int __mask)
_MM_SET_EXCEPTION_STATE	sse_set/intrin_ref.h	/^_MM_SET_EXCEPTION_STATE(unsigned int __mask)$/;"	f	signature:(unsigned int __mask)
_MM_SET_FLUSH_ZERO_MODE	sse_set/intrin_ref.h	/^_MM_SET_FLUSH_ZERO_MODE (unsigned int __mode)$/;"	f	signature:(unsigned int __mode)
_MM_SET_ROUNDING_MODE	sse_set/intrin_ref.h	/^_MM_SET_ROUNDING_MODE (unsigned int __mode)$/;"	f	signature:(unsigned int __mode)
_MM_SHUFFLE	sse_set/intrin_ref.h	970;"	d
_MM_SHUFFLE2	sse_set/intrin_ref.h	2223;"	d
_MM_TRANSPOSE4_PS	sse_set/intrin_ref.h	2153;"	d
_PMMINTRIN_H_INCLUDED	sse_set/intrin_ref.h	3722;"	d
_SIDD_BIT_MASK	sse_set/intrin_ref.h	4675;"	d
_SIDD_CMP_EQUAL_ANY	sse_set/intrin_ref.h	4659;"	d
_SIDD_CMP_EQUAL_EACH	sse_set/intrin_ref.h	4661;"	d
_SIDD_CMP_EQUAL_ORDERED	sse_set/intrin_ref.h	4662;"	d
_SIDD_CMP_RANGES	sse_set/intrin_ref.h	4660;"	d
_SIDD_LEAST_SIGNIFICANT	sse_set/intrin_ref.h	4671;"	d
_SIDD_MASKED_NEGATIVE_POLARITY	sse_set/intrin_ref.h	4668;"	d
_SIDD_MASKED_POSITIVE_POLARITY	sse_set/intrin_ref.h	4667;"	d
_SIDD_MOST_SIGNIFICANT	sse_set/intrin_ref.h	4672;"	d
_SIDD_NEGATIVE_POLARITY	sse_set/intrin_ref.h	4666;"	d
_SIDD_POSITIVE_POLARITY	sse_set/intrin_ref.h	4665;"	d
_SIDD_SBYTE_OPS	sse_set/intrin_ref.h	4655;"	d
_SIDD_SWORD_OPS	sse_set/intrin_ref.h	4656;"	d
_SIDD_UBYTE_OPS	sse_set/intrin_ref.h	4653;"	d
_SIDD_UNIT_MASK	sse_set/intrin_ref.h	4676;"	d
_SIDD_UWORD_OPS	sse_set/intrin_ref.h	4654;"	d
_SMMINTRIN_H_INCLUDED	sse_set/intrin_ref.h	4093;"	d
_TMMINTRIN_H_INCLUDED	sse_set/intrin_ref.h	3849;"	d
_XMMINTRIN_H_INCLUDED	sse_set/intrin_ref.h	950;"	d
__m128	sse_set/intrin_ref.h	/^typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));$/;"	t
__m128d	sse_set/intrin_ref.h	/^typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));$/;"	t
__m128i	sse_set/intrin_ref.h	/^typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));$/;"	t
__m64	sse_set/intrin_ref.h	/^typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));$/;"	t
__v16qi	sse_set/intrin_ref.h	/^typedef char __v16qi __attribute__ ((__vector_size__ (16)));$/;"	t
__v1di	sse_set/intrin_ref.h	/^typedef long long __v1di __attribute__ ((__vector_size__ (8)));$/;"	t
__v2df	sse_set/intrin_ref.h	/^typedef double __v2df __attribute__ ((__vector_size__ (16)));$/;"	t
__v2di	sse_set/intrin_ref.h	/^typedef long long __v2di __attribute__ ((__vector_size__ (16)));$/;"	t
__v2sf	sse_set/intrin_ref.h	/^typedef float __v2sf __attribute__ ((__vector_size__ (8)));$/;"	t
__v2si	sse_set/intrin_ref.h	/^typedef int __v2si __attribute__ ((__vector_size__ (8)));$/;"	t
__v4hi	sse_set/intrin_ref.h	/^typedef short __v4hi __attribute__ ((__vector_size__ (8)));$/;"	t
__v4sf	sse_set/intrin_ref.h	/^typedef float __v4sf __attribute__ ((__vector_size__ (16)));$/;"	t
__v4si	sse_set/intrin_ref.h	/^typedef int __v4si __attribute__ ((__vector_size__ (16)));$/;"	t
__v8hi	sse_set/intrin_ref.h	/^typedef short __v8hi __attribute__ ((__vector_size__ (16)));$/;"	t
__v8qi	sse_set/intrin_ref.h	/^typedef char __v8qi __attribute__ ((__vector_size__ (8)));$/;"	t
_m_empty	sse_set/intrin_ref.h	/^_m_empty (void)$/;"	f	signature:(void)
_m_from_int	sse_set/intrin_ref.h	/^_m_from_int (int __i)$/;"	f	signature:(int __i)
_m_from_int64	sse_set/intrin_ref.h	/^_m_from_int64 (long long __i)$/;"	f	signature:(long long __i)
_m_maskmovq	sse_set/intrin_ref.h	/^_m_maskmovq (__m64 __A, __m64 __N, char *__P)$/;"	f	signature:(__m64 __A, __m64 __N, char *__P)
_m_packssdw	sse_set/intrin_ref.h	/^_m_packssdw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_packsswb	sse_set/intrin_ref.h	/^_m_packsswb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_packuswb	sse_set/intrin_ref.h	/^_m_packuswb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_paddb	sse_set/intrin_ref.h	/^_m_paddb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_paddd	sse_set/intrin_ref.h	/^_m_paddd (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_paddsb	sse_set/intrin_ref.h	/^_m_paddsb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_paddsw	sse_set/intrin_ref.h	/^_m_paddsw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_paddusb	sse_set/intrin_ref.h	/^_m_paddusb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_paddusw	sse_set/intrin_ref.h	/^_m_paddusw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_paddw	sse_set/intrin_ref.h	/^_m_paddw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pand	sse_set/intrin_ref.h	/^_m_pand (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pandn	sse_set/intrin_ref.h	/^_m_pandn (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pavgb	sse_set/intrin_ref.h	/^_m_pavgb (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_m_pavgw	sse_set/intrin_ref.h	/^_m_pavgw (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_m_pcmpeqb	sse_set/intrin_ref.h	/^_m_pcmpeqb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pcmpeqd	sse_set/intrin_ref.h	/^_m_pcmpeqd (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pcmpeqw	sse_set/intrin_ref.h	/^_m_pcmpeqw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pcmpgtb	sse_set/intrin_ref.h	/^_m_pcmpgtb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pcmpgtd	sse_set/intrin_ref.h	/^_m_pcmpgtd (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pcmpgtw	sse_set/intrin_ref.h	/^_m_pcmpgtw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pextrw	sse_set/intrin_ref.h	/^_m_pextrw (__m64 const __A, int const __N)$/;"	f	signature:(__m64 const __A, int const __N)
_m_pextrw	sse_set/intrin_ref.h	1927;"	d
_m_pinsrw	sse_set/intrin_ref.h	/^_m_pinsrw (__m64 const __A, int const __D, int const __N)$/;"	f	signature:(__m64 const __A, int const __D, int const __N)
_m_pinsrw	sse_set/intrin_ref.h	1949;"	d
_m_pmaddwd	sse_set/intrin_ref.h	/^_m_pmaddwd (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pmaxsw	sse_set/intrin_ref.h	/^_m_pmaxsw (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_m_pmaxub	sse_set/intrin_ref.h	/^_m_pmaxub (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_m_pminsw	sse_set/intrin_ref.h	/^_m_pminsw (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_m_pminub	sse_set/intrin_ref.h	/^_m_pminub (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_m_pmovmskb	sse_set/intrin_ref.h	/^_m_pmovmskb (__m64 __A)$/;"	f	signature:(__m64 __A)
_m_pmulhuw	sse_set/intrin_ref.h	/^_m_pmulhuw (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_m_pmulhw	sse_set/intrin_ref.h	/^_m_pmulhw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pmullw	sse_set/intrin_ref.h	/^_m_pmullw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_por	sse_set/intrin_ref.h	/^_m_por (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_psadbw	sse_set/intrin_ref.h	/^_m_psadbw (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_m_pshufw	sse_set/intrin_ref.h	/^_m_pshufw (__m64 __A, int const __N)$/;"	f	signature:(__m64 __A, int const __N)
_m_pshufw	sse_set/intrin_ref.h	2049;"	d
_m_pslld	sse_set/intrin_ref.h	/^_m_pslld (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_m_pslldi	sse_set/intrin_ref.h	/^_m_pslldi (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_m_psllq	sse_set/intrin_ref.h	/^_m_psllq (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_m_psllqi	sse_set/intrin_ref.h	/^_m_psllqi (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_m_psllw	sse_set/intrin_ref.h	/^_m_psllw (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_m_psllwi	sse_set/intrin_ref.h	/^_m_psllwi (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_m_psrad	sse_set/intrin_ref.h	/^_m_psrad (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_m_psradi	sse_set/intrin_ref.h	/^_m_psradi (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_m_psraw	sse_set/intrin_ref.h	/^_m_psraw (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_m_psrawi	sse_set/intrin_ref.h	/^_m_psrawi (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_m_psrld	sse_set/intrin_ref.h	/^_m_psrld (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_m_psrldi	sse_set/intrin_ref.h	/^_m_psrldi (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_m_psrlq	sse_set/intrin_ref.h	/^_m_psrlq (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_m_psrlqi	sse_set/intrin_ref.h	/^_m_psrlqi (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_m_psrlw	sse_set/intrin_ref.h	/^_m_psrlw (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_m_psrlwi	sse_set/intrin_ref.h	/^_m_psrlwi (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_m_psubb	sse_set/intrin_ref.h	/^_m_psubb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_psubd	sse_set/intrin_ref.h	/^_m_psubd (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_psubsb	sse_set/intrin_ref.h	/^_m_psubsb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_psubsw	sse_set/intrin_ref.h	/^_m_psubsw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_psubusb	sse_set/intrin_ref.h	/^_m_psubusb (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_psubusw	sse_set/intrin_ref.h	/^_m_psubusw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_psubw	sse_set/intrin_ref.h	/^_m_psubw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_punpckhbw	sse_set/intrin_ref.h	/^_m_punpckhbw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_punpckhdq	sse_set/intrin_ref.h	/^_m_punpckhdq (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_punpckhwd	sse_set/intrin_ref.h	/^_m_punpckhwd (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_punpcklbw	sse_set/intrin_ref.h	/^_m_punpcklbw (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_punpckldq	sse_set/intrin_ref.h	/^_m_punpckldq (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_punpcklwd	sse_set/intrin_ref.h	/^_m_punpcklwd (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_pxor	sse_set/intrin_ref.h	/^_m_pxor (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_m_to_int	sse_set/intrin_ref.h	/^_m_to_int (__m64 __i)$/;"	f	signature:(__m64 __i)
_m_to_int64	sse_set/intrin_ref.h	/^_m_to_int64 (__m64 __i)$/;"	f	signature:(__m64 __i)
_mm_abs_epi16	sse_set/intrin_ref.h	/^_mm_abs_epi16 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_abs_epi32	sse_set/intrin_ref.h	/^_mm_abs_epi32 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_abs_epi8	sse_set/intrin_ref.h	/^_mm_abs_epi8 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_abs_pi16	sse_set/intrin_ref.h	/^_mm_abs_pi16 (__m64 __X)$/;"	f	signature:(__m64 __X)
_mm_abs_pi32	sse_set/intrin_ref.h	/^_mm_abs_pi32 (__m64 __X)$/;"	f	signature:(__m64 __X)
_mm_abs_pi8	sse_set/intrin_ref.h	/^_mm_abs_pi8 (__m64 __X)$/;"	f	signature:(__m64 __X)
_mm_add_epi16	sse_set/intrin_ref.h	/^_mm_add_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_add_epi32	sse_set/intrin_ref.h	/^_mm_add_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_add_epi64	sse_set/intrin_ref.h	/^_mm_add_epi64 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_add_epi8	sse_set/intrin_ref.h	/^_mm_add_epi8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_add_pd	sse_set/intrin_ref.h	/^_mm_add_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_add_pi16	sse_set/intrin_ref.h	/^_mm_add_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_add_pi32	sse_set/intrin_ref.h	/^_mm_add_pi32 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_add_pi8	sse_set/intrin_ref.h	/^_mm_add_pi8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_add_ps	sse_set/intrin_ref.h	/^_mm_add_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_add_sd	sse_set/intrin_ref.h	/^_mm_add_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_add_si64	sse_set/intrin_ref.h	/^_mm_add_si64 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_add_ss	sse_set/intrin_ref.h	/^_mm_add_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_adds_epi16	sse_set/intrin_ref.h	/^_mm_adds_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_adds_epi8	sse_set/intrin_ref.h	/^_mm_adds_epi8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_adds_epu16	sse_set/intrin_ref.h	/^_mm_adds_epu16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_adds_epu8	sse_set/intrin_ref.h	/^_mm_adds_epu8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_adds_pi16	sse_set/intrin_ref.h	/^_mm_adds_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_adds_pi8	sse_set/intrin_ref.h	/^_mm_adds_pi8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_adds_pu16	sse_set/intrin_ref.h	/^_mm_adds_pu16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_adds_pu8	sse_set/intrin_ref.h	/^_mm_adds_pu8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_addsub_pd	sse_set/intrin_ref.h	/^_mm_addsub_pd (__m128d __X, __m128d __Y)$/;"	f	signature:(__m128d __X, __m128d __Y)
_mm_addsub_ps	sse_set/intrin_ref.h	/^_mm_addsub_ps (__m128 __X, __m128 __Y)$/;"	f	signature:(__m128 __X, __m128 __Y)
_mm_alignr_epi8	sse_set/intrin_ref.h	/^_mm_alignr_epi8(__m128i __X, __m128i __Y, const int __N)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __N)
_mm_alignr_epi8	sse_set/intrin_ref.h	4017;"	d
_mm_alignr_pi8	sse_set/intrin_ref.h	/^_mm_alignr_pi8(__m64 __X, __m64 __Y, const int __N)$/;"	f	signature:(__m64 __X, __m64 __Y, const int __N)
_mm_alignr_pi8	sse_set/intrin_ref.h	4021;"	d
_mm_and_pd	sse_set/intrin_ref.h	/^_mm_and_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_and_ps	sse_set/intrin_ref.h	/^_mm_and_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_and_si128	sse_set/intrin_ref.h	/^_mm_and_si128 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_and_si64	sse_set/intrin_ref.h	/^_mm_and_si64 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_andnot_pd	sse_set/intrin_ref.h	/^_mm_andnot_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_andnot_ps	sse_set/intrin_ref.h	/^_mm_andnot_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_andnot_si128	sse_set/intrin_ref.h	/^_mm_andnot_si128 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_andnot_si64	sse_set/intrin_ref.h	/^_mm_andnot_si64 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_avg_epu16	sse_set/intrin_ref.h	/^_mm_avg_epu16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_avg_epu8	sse_set/intrin_ref.h	/^_mm_avg_epu8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_avg_pu16	sse_set/intrin_ref.h	/^_mm_avg_pu16 (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_avg_pu8	sse_set/intrin_ref.h	/^_mm_avg_pu8 (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_blend_epi16	sse_set/intrin_ref.h	/^_mm_blend_epi16 (__m128i __X, __m128i __Y, const int __M)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __M)
_mm_blend_epi16	sse_set/intrin_ref.h	4236;"	d
_mm_blend_pd	sse_set/intrin_ref.h	/^_mm_blend_pd (__m128d __X, __m128d __Y, const int __M)$/;"	f	signature:(__m128d __X, __m128d __Y, const int __M)
_mm_blend_pd	sse_set/intrin_ref.h	4286;"	d
_mm_blend_ps	sse_set/intrin_ref.h	/^_mm_blend_ps (__m128 __X, __m128 __Y, const int __M)$/;"	f	signature:(__m128 __X, __m128 __Y, const int __M)
_mm_blend_ps	sse_set/intrin_ref.h	4261;"	d
_mm_blendv_epi8	sse_set/intrin_ref.h	/^_mm_blendv_epi8 (__m128i __X, __m128i __Y, __m128i __M)$/;"	f	signature:(__m128i __X, __m128i __Y, __m128i __M)
_mm_blendv_pd	sse_set/intrin_ref.h	/^_mm_blendv_pd (__m128d __X, __m128d __Y, __m128d __M)$/;"	f	signature:(__m128d __X, __m128d __Y, __m128d __M)
_mm_blendv_ps	sse_set/intrin_ref.h	/^_mm_blendv_ps (__m128 __X, __m128 __Y, __m128 __M)$/;"	f	signature:(__m128 __X, __m128 __Y, __m128 __M)
_mm_castpd_ps	sse_set/intrin_ref.h	/^_mm_castpd_ps(__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_castpd_si128	sse_set/intrin_ref.h	/^_mm_castpd_si128(__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_castps_pd	sse_set/intrin_ref.h	/^_mm_castps_pd(__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_castps_si128	sse_set/intrin_ref.h	/^_mm_castps_si128(__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_castsi128_pd	sse_set/intrin_ref.h	/^_mm_castsi128_pd(__m128i __A)$/;"	f	signature:(__m128i __A)
_mm_castsi128_ps	sse_set/intrin_ref.h	/^_mm_castsi128_ps(__m128i __A)$/;"	f	signature:(__m128i __A)
_mm_ceil_pd	sse_set/intrin_ref.h	4210;"	d
_mm_ceil_ps	sse_set/intrin_ref.h	4216;"	d
_mm_ceil_sd	sse_set/intrin_ref.h	4211;"	d
_mm_ceil_ss	sse_set/intrin_ref.h	4217;"	d
_mm_clflush	sse_set/intrin_ref.h	/^_mm_clflush (void const *__A)$/;"	f	signature:(void const *__A)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	GE_int16_t		2	2	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	GE_int16_t		4	4	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	GE_int16_t		8	8	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	LE_int16_t		2	2	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	LE_int16_t		4	4	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	LE_int16_t		8	8	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	GE_uint16_t		2	2	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	GE_uint16_t		4	4	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	GE_uint16_t		8	8	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	LE_uint16_t		2	2	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	LE_uint16_t		4	4	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	LE_uint16_t		8	8	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi16	sse_set/intrin_ref.h	/^_mm_cmpeq_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_cmpeq_epi32	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	GE_int32_t		2	2	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmpgt_epi32($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi32	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	GE_int32_t		4	4	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmpgt_epi32($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi32	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	LE_int32_t		2	2	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmplt_epi32($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi32	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	LE_int32_t		4	4	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmplt_epi32($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi32	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	GE_uint32_t		2	2	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmpgt_epi32($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi32	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	GE_uint32_t		4	4	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmpgt_epi32($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi32	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	LE_uint32_t		2	2	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmplt_epi32($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi32	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	LE_uint32_t		4	4	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmplt_epi32($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi32	sse_set/intrin_ref.h	/^_mm_cmpeq_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_cmpeq_epi64	sse_set/intrin_ref.h	/^_mm_cmpeq_epi64 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GE_int8_t		16	16	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GE_int8_t		2	2	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GE_int8_t		4	4	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GE_int8_t		8	8	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	LE_int8_t		16	16	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	LE_int8_t		2	2	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	LE_int8_t		4	4	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	LE_int8_t		8	8	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GE_uint8_t		16	16	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GE_uint8_t		2	2	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GE_uint8_t		4	4	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GE_uint8_t		8	8	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	LE_uint8_t		16	16	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	LE_uint8_t		2	2	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	LE_uint8_t		4	4	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	LE_uint8_t		8	8	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	p	file:	signature:($$arg1,$$arg2)
_mm_cmpeq_epi8	sse_set/intrin_ref.h	/^_mm_cmpeq_epi8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_cmpeq_pd	sse_set/intrin_ref.h	/^_mm_cmpeq_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpeq_pi16	sse_set/intrin_ref.h	/^_mm_cmpeq_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_cmpeq_pi32	sse_set/intrin_ref.h	/^_mm_cmpeq_pi32 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_cmpeq_pi8	sse_set/intrin_ref.h	/^_mm_cmpeq_pi8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_cmpeq_ps	sse_set/intrin_ref.h	/^_mm_cmpeq_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpeq_sd	sse_set/intrin_ref.h	/^_mm_cmpeq_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpeq_ss	sse_set/intrin_ref.h	/^_mm_cmpeq_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpestra	sse_set/intrin_ref.h	/^_mm_cmpestra (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)$/;"	f	signature:(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)
_mm_cmpestra	sse_set/intrin_ref.h	4830;"	d
_mm_cmpestrc	sse_set/intrin_ref.h	/^_mm_cmpestrc (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)$/;"	f	signature:(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)
_mm_cmpestrc	sse_set/intrin_ref.h	4834;"	d
_mm_cmpestri	sse_set/intrin_ref.h	/^_mm_cmpestri (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)$/;"	f	signature:(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)
_mm_cmpestri	sse_set/intrin_ref.h	4724;"	d
_mm_cmpestrm	sse_set/intrin_ref.h	/^_mm_cmpestrm (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)$/;"	f	signature:(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)
_mm_cmpestrm	sse_set/intrin_ref.h	4720;"	d
_mm_cmpestro	sse_set/intrin_ref.h	/^_mm_cmpestro (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)$/;"	f	signature:(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)
_mm_cmpestro	sse_set/intrin_ref.h	4838;"	d
_mm_cmpestrs	sse_set/intrin_ref.h	/^_mm_cmpestrs (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)$/;"	f	signature:(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)
_mm_cmpestrs	sse_set/intrin_ref.h	4842;"	d
_mm_cmpestrz	sse_set/intrin_ref.h	/^_mm_cmpestrz (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)$/;"	f	signature:(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)
_mm_cmpestrz	sse_set/intrin_ref.h	4846;"	d
_mm_cmpge_pd	sse_set/intrin_ref.h	/^_mm_cmpge_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpge_ps	sse_set/intrin_ref.h	/^_mm_cmpge_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpge_sd	sse_set/intrin_ref.h	/^_mm_cmpge_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpge_ss	sse_set/intrin_ref.h	/^_mm_cmpge_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpgt_epi16	sse_set/intrin_ref.h	/^_mm_cmpgt_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_cmpgt_epi32	sse_set/intrin_ref.h	/^_mm_cmpgt_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_cmpgt_epi64	sse_set/intrin_ref.h	/^_mm_cmpgt_epi64 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_cmpgt_epi8	sse_set/intrin_ref.h	/^_mm_cmpgt_epi8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_cmpgt_pd	sse_set/intrin_ref.h	/^_mm_cmpgt_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpgt_pi16	sse_set/intrin_ref.h	/^_mm_cmpgt_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_cmpgt_pi32	sse_set/intrin_ref.h	/^_mm_cmpgt_pi32 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_cmpgt_pi8	sse_set/intrin_ref.h	/^_mm_cmpgt_pi8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_cmpgt_ps	sse_set/intrin_ref.h	/^_mm_cmpgt_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpgt_sd	sse_set/intrin_ref.h	/^_mm_cmpgt_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpgt_ss	sse_set/intrin_ref.h	/^_mm_cmpgt_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpistra	sse_set/intrin_ref.h	/^_mm_cmpistra (__m128i __X, __m128i __Y, const int __M)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __M)
_mm_cmpistra	sse_set/intrin_ref.h	4814;"	d
_mm_cmpistrc	sse_set/intrin_ref.h	/^_mm_cmpistrc (__m128i __X, __m128i __Y, const int __M)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __M)
_mm_cmpistrc	sse_set/intrin_ref.h	4817;"	d
_mm_cmpistri	sse_set/intrin_ref.h	/^_mm_cmpistri (__m128i __X, __m128i __Y, const int __M)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __M)
_mm_cmpistri	sse_set/intrin_ref.h	4716;"	d
_mm_cmpistrm	sse_set/intrin_ref.h	/^_mm_cmpistrm (__m128i __X, __m128i __Y, const int __M)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __M)
_mm_cmpistrm	sse_set/intrin_ref.h	4713;"	d
_mm_cmpistro	sse_set/intrin_ref.h	/^_mm_cmpistro (__m128i __X, __m128i __Y, const int __M)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __M)
_mm_cmpistro	sse_set/intrin_ref.h	4820;"	d
_mm_cmpistrs	sse_set/intrin_ref.h	/^_mm_cmpistrs (__m128i __X, __m128i __Y, const int __M)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __M)
_mm_cmpistrs	sse_set/intrin_ref.h	4823;"	d
_mm_cmpistrz	sse_set/intrin_ref.h	/^_mm_cmpistrz (__m128i __X, __m128i __Y, const int __M)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __M)
_mm_cmpistrz	sse_set/intrin_ref.h	4826;"	d
_mm_cmple_pd	sse_set/intrin_ref.h	/^_mm_cmple_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmple_ps	sse_set/intrin_ref.h	/^_mm_cmple_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmple_sd	sse_set/intrin_ref.h	/^_mm_cmple_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmple_ss	sse_set/intrin_ref.h	/^_mm_cmple_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmplt_epi16	sse_set/intrin_ref.h	/^_mm_cmplt_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_cmplt_epi32	sse_set/intrin_ref.h	/^_mm_cmplt_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_cmplt_epi8	sse_set/intrin_ref.h	/^_mm_cmplt_epi8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_cmplt_pd	sse_set/intrin_ref.h	/^_mm_cmplt_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmplt_ps	sse_set/intrin_ref.h	/^_mm_cmplt_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmplt_sd	sse_set/intrin_ref.h	/^_mm_cmplt_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmplt_ss	sse_set/intrin_ref.h	/^_mm_cmplt_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpneq_pd	sse_set/intrin_ref.h	/^_mm_cmpneq_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpneq_ps	sse_set/intrin_ref.h	/^_mm_cmpneq_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpneq_sd	sse_set/intrin_ref.h	/^_mm_cmpneq_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpneq_ss	sse_set/intrin_ref.h	/^_mm_cmpneq_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpnge_pd	sse_set/intrin_ref.h	/^_mm_cmpnge_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpnge_ps	sse_set/intrin_ref.h	/^_mm_cmpnge_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpnge_sd	sse_set/intrin_ref.h	/^_mm_cmpnge_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpnge_ss	sse_set/intrin_ref.h	/^_mm_cmpnge_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpngt_pd	sse_set/intrin_ref.h	/^_mm_cmpngt_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpngt_ps	sse_set/intrin_ref.h	/^_mm_cmpngt_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpngt_sd	sse_set/intrin_ref.h	/^_mm_cmpngt_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpngt_ss	sse_set/intrin_ref.h	/^_mm_cmpngt_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpnle_pd	sse_set/intrin_ref.h	/^_mm_cmpnle_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpnle_ps	sse_set/intrin_ref.h	/^_mm_cmpnle_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpnle_sd	sse_set/intrin_ref.h	/^_mm_cmpnle_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpnle_ss	sse_set/intrin_ref.h	/^_mm_cmpnle_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpnlt_pd	sse_set/intrin_ref.h	/^_mm_cmpnlt_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpnlt_ps	sse_set/intrin_ref.h	/^_mm_cmpnlt_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpnlt_sd	sse_set/intrin_ref.h	/^_mm_cmpnlt_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpnlt_ss	sse_set/intrin_ref.h	/^_mm_cmpnlt_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpord_pd	sse_set/intrin_ref.h	/^_mm_cmpord_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpord_ps	sse_set/intrin_ref.h	/^_mm_cmpord_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpord_sd	sse_set/intrin_ref.h	/^_mm_cmpord_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpord_ss	sse_set/intrin_ref.h	/^_mm_cmpord_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpunord_pd	sse_set/intrin_ref.h	/^_mm_cmpunord_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpunord_ps	sse_set/intrin_ref.h	/^_mm_cmpunord_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_cmpunord_sd	sse_set/intrin_ref.h	/^_mm_cmpunord_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_cmpunord_ss	sse_set/intrin_ref.h	/^_mm_cmpunord_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_comieq_sd	sse_set/intrin_ref.h	/^_mm_comieq_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_comieq_ss	sse_set/intrin_ref.h	/^_mm_comieq_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_comige_sd	sse_set/intrin_ref.h	/^_mm_comige_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_comige_ss	sse_set/intrin_ref.h	/^_mm_comige_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_comigt_sd	sse_set/intrin_ref.h	/^_mm_comigt_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_comigt_ss	sse_set/intrin_ref.h	/^_mm_comigt_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_comile_sd	sse_set/intrin_ref.h	/^_mm_comile_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_comile_ss	sse_set/intrin_ref.h	/^_mm_comile_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_comilt_sd	sse_set/intrin_ref.h	/^_mm_comilt_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_comilt_ss	sse_set/intrin_ref.h	/^_mm_comilt_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_comineq_sd	sse_set/intrin_ref.h	/^_mm_comineq_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_comineq_ss	sse_set/intrin_ref.h	/^_mm_comineq_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_crc32_u16	sse_set/intrin_ref.h	/^_mm_crc32_u16 (unsigned int __C, unsigned short __V)$/;"	f	signature:(unsigned int __C, unsigned short __V)
_mm_crc32_u32	sse_set/intrin_ref.h	/^_mm_crc32_u32 (unsigned int __C, unsigned int __V)$/;"	f	signature:(unsigned int __C, unsigned int __V)
_mm_crc32_u64	sse_set/intrin_ref.h	/^_mm_crc32_u64 (unsigned long long __C, unsigned long long __V)$/;"	f	signature:(unsigned long long __C, unsigned long long __V)
_mm_crc32_u8	sse_set/intrin_ref.h	/^_mm_crc32_u8 (unsigned int __C, unsigned char __V)$/;"	f	signature:(unsigned int __C, unsigned char __V)
_mm_cvt_pi2ps	sse_set/intrin_ref.h	/^_mm_cvt_pi2ps (__m128 __A, __m64 __B)$/;"	f	signature:(__m128 __A, __m64 __B)
_mm_cvt_ps2pi	sse_set/intrin_ref.h	/^_mm_cvt_ps2pi (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvt_si2ss	sse_set/intrin_ref.h	/^_mm_cvt_si2ss (__m128 __A, int __B)$/;"	f	signature:(__m128 __A, int __B)
_mm_cvt_ss2si	sse_set/intrin_ref.h	/^_mm_cvt_ss2si (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtepi16_epi32	sse_set/intrin_ref.h	/^_mm_cvtepi16_epi32 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepi16_epi64	sse_set/intrin_ref.h	/^_mm_cvtepi16_epi64 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepi32_epi64	sse_set/intrin_ref.h	/^_mm_cvtepi32_epi64 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepi32_pd	sse_set/intrin_ref.h	/^_mm_cvtepi32_pd (__m128i __A)$/;"	f	signature:(__m128i __A)
_mm_cvtepi32_ps	sse_set/intrin_ref.h	/^_mm_cvtepi32_ps (__m128i __A)$/;"	f	signature:(__m128i __A)
_mm_cvtepi8_epi16	sse_set/intrin_ref.h	/^_mm_cvtepi8_epi16 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepi8_epi32	sse_set/intrin_ref.h	/^_mm_cvtepi8_epi32 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepi8_epi64	sse_set/intrin_ref.h	/^_mm_cvtepi8_epi64 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepu16_epi32	sse_set/intrin_ref.h	/^_mm_cvtepu16_epi32 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepu16_epi64	sse_set/intrin_ref.h	/^_mm_cvtepu16_epi64 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepu32_epi64	sse_set/intrin_ref.h	/^_mm_cvtepu32_epi64 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepu8_epi16	sse_set/intrin_ref.h	/^_mm_cvtepu8_epi16 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepu8_epi32	sse_set/intrin_ref.h	/^_mm_cvtepu8_epi32 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtepu8_epi64	sse_set/intrin_ref.h	/^_mm_cvtepu8_epi64 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_cvtm64_si64	sse_set/intrin_ref.h	/^_mm_cvtm64_si64 (__m64 __i)$/;"	f	signature:(__m64 __i)
_mm_cvtpd_epi32	sse_set/C_table_expanded.csv	/^sse_conversions	instruction	int32_t	double	CVRT_double_int32_t		2	2	_mm_shuffle_epi32(_mm_cvtpd_epi32($$arg1),0x58)		sse	10$/;"	p	file:	signature:($$arg1)
_mm_cvtpd_epi32	sse_set/C_table_expanded.csv	/^sse_conversions	instruction	uint32_t	double	CVRT_double_uint32_t		2	2	_mm_shuffle_epi32(_mm_cvtpd_epi32($$arg1),0x58)		sse	10$/;"	p	file:	signature:($$arg1)
_mm_cvtpd_epi32	sse_set/intrin_ref.h	/^_mm_cvtpd_epi32 (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvtpd_pi32	sse_set/intrin_ref.h	/^_mm_cvtpd_pi32 (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvtpd_ps	sse_set/intrin_ref.h	/^_mm_cvtpd_ps (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvtpi16_ps	sse_set/intrin_ref.h	/^_mm_cvtpi16_ps (__m64 __A)$/;"	f	signature:(__m64 __A)
_mm_cvtpi32_pd	sse_set/intrin_ref.h	/^_mm_cvtpi32_pd (__m64 __A)$/;"	f	signature:(__m64 __A)
_mm_cvtpi32_ps	sse_set/intrin_ref.h	/^_mm_cvtpi32_ps (__m128 __A, __m64 __B)$/;"	f	signature:(__m128 __A, __m64 __B)
_mm_cvtpi32x2_ps	sse_set/intrin_ref.h	/^_mm_cvtpi32x2_ps(__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_cvtpi8_ps	sse_set/intrin_ref.h	/^_mm_cvtpi8_ps (__m64 __A)$/;"	f	signature:(__m64 __A)
_mm_cvtps_epi32	sse_set/intrin_ref.h	/^_mm_cvtps_epi32 (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtps_pd	sse_set/intrin_ref.h	/^_mm_cvtps_pd (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtps_pi16	sse_set/intrin_ref.h	/^_mm_cvtps_pi16(__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtps_pi32	sse_set/intrin_ref.h	/^_mm_cvtps_pi32 (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtps_pi8	sse_set/intrin_ref.h	/^_mm_cvtps_pi8(__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtpu16_ps	sse_set/intrin_ref.h	/^_mm_cvtpu16_ps (__m64 __A)$/;"	f	signature:(__m64 __A)
_mm_cvtpu8_ps	sse_set/intrin_ref.h	/^_mm_cvtpu8_ps(__m64 __A)$/;"	f	signature:(__m64 __A)
_mm_cvtsd_f64	sse_set/intrin_ref.h	/^_mm_cvtsd_f64 (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvtsd_si32	sse_set/intrin_ref.h	/^_mm_cvtsd_si32 (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvtsd_si64	sse_set/intrin_ref.h	/^_mm_cvtsd_si64 (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvtsd_si64x	sse_set/intrin_ref.h	/^_mm_cvtsd_si64x (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvtsd_ss	sse_set/intrin_ref.h	/^_mm_cvtsd_ss (__m128 __A, __m128d __B)$/;"	f	signature:(__m128 __A, __m128d __B)
_mm_cvtsi128_si32	sse_set/intrin_ref.h	/^_mm_cvtsi128_si32 (__m128i __A)$/;"	f	signature:(__m128i __A)
_mm_cvtsi128_si64	sse_set/intrin_ref.h	/^_mm_cvtsi128_si64 (__m128i __A)$/;"	f	signature:(__m128i __A)
_mm_cvtsi128_si64x	sse_set/intrin_ref.h	/^_mm_cvtsi128_si64x (__m128i __A)$/;"	f	signature:(__m128i __A)
_mm_cvtsi32_sd	sse_set/intrin_ref.h	/^_mm_cvtsi32_sd (__m128d __A, int __B)$/;"	f	signature:(__m128d __A, int __B)
_mm_cvtsi32_si128	sse_set/intrin_ref.h	/^_mm_cvtsi32_si128 (int __A)$/;"	f	signature:(int __A)
_mm_cvtsi32_si64	sse_set/intrin_ref.h	/^_mm_cvtsi32_si64 (int __i)$/;"	f	signature:(int __i)
_mm_cvtsi32_ss	sse_set/intrin_ref.h	/^_mm_cvtsi32_ss (__m128 __A, int __B)$/;"	f	signature:(__m128 __A, int __B)
_mm_cvtsi64_m64	sse_set/intrin_ref.h	/^_mm_cvtsi64_m64 (long long __i)$/;"	f	signature:(long long __i)
_mm_cvtsi64_sd	sse_set/intrin_ref.h	/^_mm_cvtsi64_sd (__m128d __A, long long __B)$/;"	f	signature:(__m128d __A, long long __B)
_mm_cvtsi64_si128	sse_set/intrin_ref.h	/^_mm_cvtsi64_si128 (long long __A)$/;"	f	signature:(long long __A)
_mm_cvtsi64_si32	sse_set/intrin_ref.h	/^_mm_cvtsi64_si32 (__m64 __i)$/;"	f	signature:(__m64 __i)
_mm_cvtsi64_si64x	sse_set/intrin_ref.h	/^_mm_cvtsi64_si64x (__m64 __i)$/;"	f	signature:(__m64 __i)
_mm_cvtsi64_ss	sse_set/intrin_ref.h	/^_mm_cvtsi64_ss (__m128 __A, long long __B)$/;"	f	signature:(__m128 __A, long long __B)
_mm_cvtsi64x_sd	sse_set/intrin_ref.h	/^_mm_cvtsi64x_sd (__m128d __A, long long __B)$/;"	f	signature:(__m128d __A, long long __B)
_mm_cvtsi64x_si128	sse_set/intrin_ref.h	/^_mm_cvtsi64x_si128 (long long __A)$/;"	f	signature:(long long __A)
_mm_cvtsi64x_si64	sse_set/intrin_ref.h	/^_mm_cvtsi64x_si64 (long long __i)$/;"	f	signature:(long long __i)
_mm_cvtsi64x_ss	sse_set/intrin_ref.h	/^_mm_cvtsi64x_ss (__m128 __A, long long __B)$/;"	f	signature:(__m128 __A, long long __B)
_mm_cvtss_f32	sse_set/intrin_ref.h	/^_mm_cvtss_f32 (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtss_sd	sse_set/intrin_ref.h	/^_mm_cvtss_sd (__m128d __A, __m128 __B)$/;"	f	signature:(__m128d __A, __m128 __B)
_mm_cvtss_si32	sse_set/intrin_ref.h	/^_mm_cvtss_si32 (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtss_si64	sse_set/intrin_ref.h	/^_mm_cvtss_si64 (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtss_si64x	sse_set/intrin_ref.h	/^_mm_cvtss_si64x (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtt_ps2pi	sse_set/intrin_ref.h	/^_mm_cvtt_ps2pi (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvtt_ss2si	sse_set/intrin_ref.h	/^_mm_cvtt_ss2si (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvttpd_epi32	sse_set/intrin_ref.h	/^_mm_cvttpd_epi32 (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvttpd_pi32	sse_set/intrin_ref.h	/^_mm_cvttpd_pi32 (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvttps_epi32	sse_set/intrin_ref.h	/^_mm_cvttps_epi32 (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvttps_pi32	sse_set/intrin_ref.h	/^_mm_cvttps_pi32 (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvttsd_si32	sse_set/intrin_ref.h	/^_mm_cvttsd_si32 (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvttsd_si64	sse_set/intrin_ref.h	/^_mm_cvttsd_si64 (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvttsd_si64x	sse_set/intrin_ref.h	/^_mm_cvttsd_si64x (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_cvttss_si32	sse_set/intrin_ref.h	/^_mm_cvttss_si32 (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvttss_si64	sse_set/intrin_ref.h	/^_mm_cvttss_si64 (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_cvttss_si64x	sse_set/intrin_ref.h	/^_mm_cvttss_si64x (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_div_pd	sse_set/intrin_ref.h	/^_mm_div_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_div_ps	sse_set/intrin_ref.h	/^_mm_div_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_div_sd	sse_set/intrin_ref.h	/^_mm_div_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_div_ss	sse_set/intrin_ref.h	/^_mm_div_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_dp_pd	sse_set/intrin_ref.h	/^_mm_dp_pd (__m128d __X, __m128d __Y, const int __M)$/;"	f	signature:(__m128d __X, __m128d __Y, const int __M)
_mm_dp_pd	sse_set/intrin_ref.h	4323;"	d
_mm_dp_ps	sse_set/intrin_ref.h	/^_mm_dp_ps (__m128 __X, __m128 __Y, const int __M)$/;"	f	signature:(__m128 __X, __m128 __Y, const int __M)
_mm_dp_ps	sse_set/intrin_ref.h	4319;"	d
_mm_empty	sse_set/intrin_ref.h	/^_mm_empty (void)$/;"	f	signature:(void)
_mm_extract_epi16	sse_set/intrin_ref.h	/^_mm_extract_epi16 (__m128i const __A, int const __N)$/;"	f	signature:(__m128i const __A, int const __N)
_mm_extract_epi16	sse_set/intrin_ref.h	3493;"	d
_mm_extract_epi32	sse_set/intrin_ref.h	/^_mm_extract_epi32 (__m128i __X, const int __N)$/;"	f	signature:(__m128i __X, const int __N)
_mm_extract_epi32	sse_set/intrin_ref.h	4525;"	d
_mm_extract_epi64	sse_set/intrin_ref.h	/^_mm_extract_epi64 (__m128i __X, const int __N)$/;"	f	signature:(__m128i __X, const int __N)
_mm_extract_epi64	sse_set/intrin_ref.h	4529;"	d
_mm_extract_epi8	sse_set/intrin_ref.h	/^_mm_extract_epi8 (__m128i __X, const int __N)$/;"	f	signature:(__m128i __X, const int __N)
_mm_extract_epi8	sse_set/intrin_ref.h	4523;"	d
_mm_extract_pi16	sse_set/intrin_ref.h	/^_mm_extract_pi16 (__m64 const __A, int const __N)$/;"	f	signature:(__m64 const __A, int const __N)
_mm_extract_pi16	sse_set/intrin_ref.h	1924;"	d
_mm_extract_ps	sse_set/intrin_ref.h	/^_mm_extract_ps (__m128 __X, const int __N)$/;"	f	signature:(__m128 __X, const int __N)
_mm_extract_ps	sse_set/intrin_ref.h	4436;"	d
_mm_floor_pd	sse_set/intrin_ref.h	4213;"	d
_mm_floor_ps	sse_set/intrin_ref.h	4219;"	d
_mm_floor_sd	sse_set/intrin_ref.h	4214;"	d
_mm_floor_ss	sse_set/intrin_ref.h	4220;"	d
_mm_getcsr	sse_set/intrin_ref.h	/^_mm_getcsr (void)$/;"	f	signature:(void)
_mm_hadd_epi16	sse_set/intrin_ref.h	/^_mm_hadd_epi16 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_hadd_epi32	sse_set/intrin_ref.h	/^_mm_hadd_epi32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_hadd_pd	sse_set/intrin_ref.h	/^_mm_hadd_pd (__m128d __X, __m128d __Y)$/;"	f	signature:(__m128d __X, __m128d __Y)
_mm_hadd_pi16	sse_set/intrin_ref.h	/^_mm_hadd_pi16 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_hadd_pi32	sse_set/intrin_ref.h	/^_mm_hadd_pi32 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_hadd_ps	sse_set/intrin_ref.h	/^_mm_hadd_ps (__m128 __X, __m128 __Y)$/;"	f	signature:(__m128 __X, __m128 __Y)
_mm_hadds_epi16	sse_set/intrin_ref.h	/^_mm_hadds_epi16 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_hadds_pi16	sse_set/intrin_ref.h	/^_mm_hadds_pi16 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_hint	sse_set/intrin_ref.h	/^enum _mm_hint$/;"	g
_mm_hsub_epi16	sse_set/intrin_ref.h	/^_mm_hsub_epi16 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_hsub_epi32	sse_set/intrin_ref.h	/^_mm_hsub_epi32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_hsub_pd	sse_set/intrin_ref.h	/^_mm_hsub_pd (__m128d __X, __m128d __Y)$/;"	f	signature:(__m128d __X, __m128d __Y)
_mm_hsub_pi16	sse_set/intrin_ref.h	/^_mm_hsub_pi16 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_hsub_pi32	sse_set/intrin_ref.h	/^_mm_hsub_pi32 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_hsub_ps	sse_set/intrin_ref.h	/^_mm_hsub_ps (__m128 __X, __m128 __Y)$/;"	f	signature:(__m128 __X, __m128 __Y)
_mm_hsubs_epi16	sse_set/intrin_ref.h	/^_mm_hsubs_epi16 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_hsubs_pi16	sse_set/intrin_ref.h	/^_mm_hsubs_pi16 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_insert_epi16	sse_set/intrin_ref.h	/^_mm_insert_epi16 (__m128i const __A, int const __D, int const __N)$/;"	f	signature:(__m128i const __A, int const __D, int const __N)
_mm_insert_epi16	sse_set/intrin_ref.h	3495;"	d
_mm_insert_epi32	sse_set/intrin_ref.h	/^_mm_insert_epi32 (__m128i __D, int __S, const int __N)$/;"	f	signature:(__m128i __D, int __S, const int __N)
_mm_insert_epi32	sse_set/intrin_ref.h	4488;"	d
_mm_insert_epi64	sse_set/intrin_ref.h	/^_mm_insert_epi64 (__m128i __D, long long __S, const int __N)$/;"	f	signature:(__m128i __D, long long __S, const int __N)
_mm_insert_epi64	sse_set/intrin_ref.h	4493;"	d
_mm_insert_epi8	sse_set/intrin_ref.h	/^_mm_insert_epi8 (__m128i __D, int __S, const int __N)$/;"	f	signature:(__m128i __D, int __S, const int __N)
_mm_insert_epi8	sse_set/intrin_ref.h	4484;"	d
_mm_insert_pi16	sse_set/intrin_ref.h	/^_mm_insert_pi16 (__m64 const __A, int const __D, int const __N)$/;"	f	signature:(__m64 const __A, int const __D, int const __N)
_mm_insert_pi16	sse_set/intrin_ref.h	1945;"	d
_mm_insert_ps	sse_set/intrin_ref.h	/^_mm_insert_ps (__m128 __D, __m128 __S, const int __N)$/;"	f	signature:(__m128 __D, __m128 __S, const int __N)
_mm_insert_ps	sse_set/intrin_ref.h	4416;"	d
_mm_lddqu_si128	sse_set/intrin_ref.h	/^_mm_lddqu_si128 (__m128i const *__P)$/;"	f	signature:(__m128i const *__P)
_mm_lfence	sse_set/intrin_ref.h	/^_mm_lfence (void)$/;"	f	signature:(void)
_mm_load1_pd	sse_set/intrin_ref.h	/^_mm_load1_pd (double const *__P)$/;"	f	signature:(double const *__P)
_mm_load1_ps	sse_set/intrin_ref.h	/^_mm_load1_ps (float const *__P)$/;"	f	signature:(float const *__P)
_mm_load_pd	sse_set/intrin_ref.h	/^_mm_load_pd (double const *__P)$/;"	f	signature:(double const *__P)
_mm_load_pd1	sse_set/intrin_ref.h	/^_mm_load_pd1 (double const *__P)$/;"	f	signature:(double const *__P)
_mm_load_ps	sse_set/intrin_ref.h	/^_mm_load_ps (float const *__P)$/;"	f	signature:(float const *__P)
_mm_load_ps1	sse_set/intrin_ref.h	/^_mm_load_ps1 (float const *__P)$/;"	f	signature:(float const *__P)
_mm_load_sd	sse_set/intrin_ref.h	/^_mm_load_sd (double const *__P)$/;"	f	signature:(double const *__P)
_mm_load_si128	sse_set/intrin_ref.h	/^_mm_load_si128 (__m128i const *__P)$/;"	f	signature:(__m128i const *__P)
_mm_load_ss	sse_set/intrin_ref.h	/^_mm_load_ss (float const *__P)$/;"	f	signature:(float const *__P)
_mm_loaddup_pd	sse_set/intrin_ref.h	/^_mm_loaddup_pd (double const *__P)$/;"	f	signature:(double const *__P)
_mm_loadh_pd	sse_set/intrin_ref.h	/^_mm_loadh_pd (__m128d __A, double const *__B)$/;"	f	signature:(__m128d __A, double const *__B)
_mm_loadh_pi	sse_set/intrin_ref.h	/^_mm_loadh_pi (__m128 __A, __m64 const *__P)$/;"	f	signature:(__m128 __A, __m64 const *__P)
_mm_loadl_epi64	sse_set/intrin_ref.h	/^_mm_loadl_epi64 (__m128i const *__P)$/;"	f	signature:(__m128i const *__P)
_mm_loadl_pd	sse_set/intrin_ref.h	/^_mm_loadl_pd (__m128d __A, double const *__B)$/;"	f	signature:(__m128d __A, double const *__B)
_mm_loadl_pi	sse_set/intrin_ref.h	/^_mm_loadl_pi (__m128 __A, __m64 const *__P)$/;"	f	signature:(__m128 __A, __m64 const *__P)
_mm_loadr_pd	sse_set/intrin_ref.h	/^_mm_loadr_pd (double const *__P)$/;"	f	signature:(double const *__P)
_mm_loadr_ps	sse_set/intrin_ref.h	/^_mm_loadr_ps (float const *__P)$/;"	f	signature:(float const *__P)
_mm_loadu_pd	sse_set/intrin_ref.h	/^_mm_loadu_pd (double const *__P)$/;"	f	signature:(double const *__P)
_mm_loadu_ps	sse_set/intrin_ref.h	/^_mm_loadu_ps (float const *__P)$/;"	f	signature:(float const *__P)
_mm_loadu_si128	sse_set/intrin_ref.h	/^_mm_loadu_si128 (__m128i const *__P)$/;"	f	signature:(__m128i const *__P)
_mm_madd_epi16	sse_set/intrin_ref.h	/^_mm_madd_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_madd_pi16	sse_set/intrin_ref.h	/^_mm_madd_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_maddubs_epi16	sse_set/intrin_ref.h	/^_mm_maddubs_epi16 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_maddubs_pi16	sse_set/intrin_ref.h	/^_mm_maddubs_pi16 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_maskmove_si64	sse_set/intrin_ref.h	/^_mm_maskmove_si64 (__m64 __A, __m64 __N, char *__P)$/;"	f	signature:(__m64 __A, __m64 __N, char *__P)
_mm_maskmoveu_si128	sse_set/intrin_ref.h	/^_mm_maskmoveu_si128 (__m128i __A, __m128i __B, char *__C)$/;"	f	signature:(__m128i __A, __m128i __B, char *__C)
_mm_max_epi16	sse_set/intrin_ref.h	/^_mm_max_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_max_epi32	sse_set/intrin_ref.h	/^_mm_max_epi32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_max_epi8	sse_set/intrin_ref.h	/^_mm_max_epi8 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_max_epu16	sse_set/intrin_ref.h	/^_mm_max_epu16 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_max_epu32	sse_set/intrin_ref.h	/^_mm_max_epu32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_max_epu8	sse_set/intrin_ref.h	/^_mm_max_epu8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_max_pd	sse_set/intrin_ref.h	/^_mm_max_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_max_pi16	sse_set/intrin_ref.h	/^_mm_max_pi16 (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_max_ps	sse_set/intrin_ref.h	/^_mm_max_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_max_pu8	sse_set/intrin_ref.h	/^_mm_max_pu8 (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_max_sd	sse_set/intrin_ref.h	/^_mm_max_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_max_ss	sse_set/intrin_ref.h	/^_mm_max_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_mfence	sse_set/intrin_ref.h	/^_mm_mfence (void)$/;"	f	signature:(void)
_mm_min_epi16	sse_set/intrin_ref.h	/^_mm_min_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_min_epi32	sse_set/intrin_ref.h	/^_mm_min_epi32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_min_epi8	sse_set/intrin_ref.h	/^_mm_min_epi8 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_min_epu16	sse_set/intrin_ref.h	/^_mm_min_epu16 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_min_epu32	sse_set/intrin_ref.h	/^_mm_min_epu32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_min_epu8	sse_set/intrin_ref.h	/^_mm_min_epu8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_min_pd	sse_set/intrin_ref.h	/^_mm_min_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_min_pi16	sse_set/intrin_ref.h	/^_mm_min_pi16 (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_min_ps	sse_set/intrin_ref.h	/^_mm_min_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_min_pu8	sse_set/intrin_ref.h	/^_mm_min_pu8 (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_min_sd	sse_set/intrin_ref.h	/^_mm_min_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_min_ss	sse_set/intrin_ref.h	/^_mm_min_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_minpos_epu16	sse_set/intrin_ref.h	/^_mm_minpos_epu16 (__m128i __X)$/;"	f	signature:(__m128i __X)
_mm_monitor	sse_set/intrin_ref.h	/^_mm_monitor (void const * __P, unsigned int __E, unsigned int __H)$/;"	f	signature:(void const * __P, unsigned int __E, unsigned int __H)
_mm_move_epi64	sse_set/intrin_ref.h	/^_mm_move_epi64 (__m128i __A)$/;"	f	signature:(__m128i __A)
_mm_move_sd	sse_set/intrin_ref.h	/^_mm_move_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_move_ss	sse_set/intrin_ref.h	/^_mm_move_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_movedup_pd	sse_set/intrin_ref.h	/^_mm_movedup_pd (__m128d __X)$/;"	f	signature:(__m128d __X)
_mm_movehdup_ps	sse_set/intrin_ref.h	/^_mm_movehdup_ps (__m128 __X)$/;"	f	signature:(__m128 __X)
_mm_movehl_ps	sse_set/intrin_ref.h	/^_mm_movehl_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_moveldup_ps	sse_set/intrin_ref.h	/^_mm_moveldup_ps (__m128 __X)$/;"	f	signature:(__m128 __X)
_mm_movelh_ps	sse_set/intrin_ref.h	/^_mm_movelh_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_movemask_epi8	sse_set/intrin_ref.h	/^_mm_movemask_epi8 (__m128i __A)$/;"	f	signature:(__m128i __A)
_mm_movemask_pd	sse_set/intrin_ref.h	/^_mm_movemask_pd (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_movemask_pi8	sse_set/intrin_ref.h	/^_mm_movemask_pi8 (__m64 __A)$/;"	f	signature:(__m64 __A)
_mm_movemask_ps	sse_set/intrin_ref.h	/^_mm_movemask_ps (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_movepi64_pi64	sse_set/intrin_ref.h	/^_mm_movepi64_pi64 (__m128i __B)$/;"	f	signature:(__m128i __B)
_mm_movpi64_epi64	sse_set/intrin_ref.h	/^_mm_movpi64_epi64 (__m64 __A)$/;"	f	signature:(__m64 __A)
_mm_mpsadbw_epu8	sse_set/intrin_ref.h	/^_mm_mpsadbw_epu8 (__m128i __X, __m128i __Y, const int __M)$/;"	f	signature:(__m128i __X, __m128i __Y, const int __M)
_mm_mpsadbw_epu8	sse_set/intrin_ref.h	4638;"	d
_mm_mul_epi32	sse_set/intrin_ref.h	/^_mm_mul_epi32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_mul_epu32	sse_set/intrin_ref.h	/^_mm_mul_epu32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_mul_epu32	unit_test2/1.csv	/^	instruction	INT		MULI		2	2	_mm_shuffle_epi32(_mm_mul_epu32($$arg1, $$arg2), _MM_SHUFFLE (0,0,2,0))			0$/;"	p	file:	signature:($$arg1, $$arg2)
_mm_mul_epu32	unit_test2/2.csv	/^	instruction	INT		MULI		2	2	_mm_shuffle_epi32(_mm_mul_epu32($$arg1, $$arg2), _MM_SHUFFLE (0,0,2,0))			0$/;"	p	file:	signature:($$arg1, $$arg2)
_mm_mul_epu32	unit_test3/instab.csv	/^	instruction	INT	INT,INT	MULI		2	2	_mm_shuffle_epi32(_mm_mul_epu32($$arg1, $$arg2), _MM_SHUFFLE (0,0,2,0))			0$/;"	p	file:	signature:($$arg1, $$arg2)
_mm_mul_pd	sse_set/intrin_ref.h	/^_mm_mul_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_mul_ps	sse_set/intrin_ref.h	/^_mm_mul_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_mul_sd	sse_set/intrin_ref.h	/^_mm_mul_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_mul_ss	sse_set/intrin_ref.h	/^_mm_mul_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_mul_su32	sse_set/intrin_ref.h	/^_mm_mul_su32 (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_mulhi_epi16	sse_set/intrin_ref.h	/^_mm_mulhi_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_mulhi_epu16	sse_set/intrin_ref.h	/^_mm_mulhi_epu16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_mulhi_pi16	sse_set/intrin_ref.h	/^_mm_mulhi_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_mulhi_pu16	sse_set/intrin_ref.h	/^_mm_mulhi_pu16 (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_mulhrs_epi16	sse_set/intrin_ref.h	/^_mm_mulhrs_epi16 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_mulhrs_pi16	sse_set/intrin_ref.h	/^_mm_mulhrs_pi16 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_mullo_epi16	sse_set/intrin_ref.h	/^_mm_mullo_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_mullo_epi32	sse_set/intrin_ref.h	/^_mm_mullo_epi32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_mullo_pi16	sse_set/intrin_ref.h	/^_mm_mullo_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_mwait	sse_set/intrin_ref.h	/^_mm_mwait (unsigned int __E, unsigned int __H)$/;"	f	signature:(unsigned int __E, unsigned int __H)
_mm_or_pd	sse_set/intrin_ref.h	/^_mm_or_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_or_ps	sse_set/intrin_ref.h	/^_mm_or_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_or_si128	sse_set/intrin_ref.h	/^_mm_or_si128 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_or_si64	sse_set/intrin_ref.h	/^_mm_or_si64 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_packs_epi16	sse_set/intrin_ref.h	/^_mm_packs_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_packs_epi32	sse_set/intrin_ref.h	/^_mm_packs_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_packs_pi16	sse_set/intrin_ref.h	/^_mm_packs_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_packs_pi32	sse_set/intrin_ref.h	/^_mm_packs_pi32 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_packs_pu16	sse_set/intrin_ref.h	/^_mm_packs_pu16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_packus_epi16	sse_set/intrin_ref.h	/^_mm_packus_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_packus_epi32	sse_set/intrin_ref.h	/^_mm_packus_epi32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_pause	sse_set/intrin_ref.h	/^_mm_pause (void)$/;"	f	signature:(void)
_mm_prefetch	sse_set/intrin_ref.h	/^_mm_prefetch (const void *__P, enum _mm_hint __I)$/;"	f	signature:(const void *__P, enum _mm_hint __I)
_mm_prefetch	sse_set/intrin_ref.h	2117;"	d
_mm_rcp_ps	sse_set/intrin_ref.h	/^_mm_rcp_ps (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_rcp_ss	sse_set/intrin_ref.h	/^_mm_rcp_ss (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_round_pd	sse_set/intrin_ref.h	/^_mm_round_pd (__m128d __V, const int __M)$/;"	f	signature:(__m128d __V, const int __M)
_mm_round_pd	sse_set/intrin_ref.h	4176;"	d
_mm_round_ps	sse_set/intrin_ref.h	/^_mm_round_ps (__m128 __V, const int __M)$/;"	f	signature:(__m128 __V, const int __M)
_mm_round_ps	sse_set/intrin_ref.h	4201;"	d
_mm_round_sd	sse_set/intrin_ref.h	/^_mm_round_sd(__m128d __D, __m128d __V, const int __M)$/;"	f	signature:(__m128d __D, __m128d __V, const int __M)
_mm_round_sd	sse_set/intrin_ref.h	4179;"	d
_mm_round_ss	sse_set/intrin_ref.h	/^_mm_round_ss (__m128 __D, __m128 __V, const int __M)$/;"	f	signature:(__m128 __D, __m128 __V, const int __M)
_mm_round_ss	sse_set/intrin_ref.h	4204;"	d
_mm_rsqrt_ps	sse_set/intrin_ref.h	/^_mm_rsqrt_ps (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_rsqrt_ss	sse_set/intrin_ref.h	/^_mm_rsqrt_ss (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_sad_epu8	sse_set/intrin_ref.h	/^_mm_sad_epu8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sad_pu8	sse_set/intrin_ref.h	/^_mm_sad_pu8 (__m64 __A, __m64 __B)$/;"	f	signature:(__m64 __A, __m64 __B)
_mm_set1_epi16	sse_set/intrin_ref.h	/^_mm_set1_epi16 (short __A)$/;"	f	signature:(short __A)
_mm_set1_epi32	sse_set/intrin_ref.h	/^_mm_set1_epi32 (int __A)$/;"	f	signature:(int __A)
_mm_set1_epi64	sse_set/intrin_ref.h	/^_mm_set1_epi64 (__m64 __A)$/;"	f	signature:(__m64 __A)
_mm_set1_epi64x	sse_set/intrin_ref.h	/^_mm_set1_epi64x (long long __A)$/;"	f	signature:(long long __A)
_mm_set1_epi8	sse_set/intrin_ref.h	/^_mm_set1_epi8 (char __A)$/;"	f	signature:(char __A)
_mm_set1_pd	sse_set/intrin_ref.h	/^_mm_set1_pd (double __F)$/;"	f	signature:(double __F)
_mm_set1_pi16	sse_set/intrin_ref.h	/^_mm_set1_pi16 (short __w)$/;"	f	signature:(short __w)
_mm_set1_pi32	sse_set/intrin_ref.h	/^_mm_set1_pi32 (int __i)$/;"	f	signature:(int __i)
_mm_set1_pi8	sse_set/intrin_ref.h	/^_mm_set1_pi8 (char __b)$/;"	f	signature:(char __b)
_mm_set1_ps	sse_set/intrin_ref.h	/^_mm_set1_ps (float __F)$/;"	f	signature:(float __F)
_mm_set_epi16	sse_set/intrin_ref.h	/^_mm_set_epi16 (short __q7, short __q6, short __q5, short __q4,$/;"	f	signature:(short __q7, short __q6, short __q5, short __q4, short __q3, short __q2, short __q1, short __q0)
_mm_set_epi32	sse_set/intrin_ref.h	/^_mm_set_epi32 (int __q3, int __q2, int __q1, int __q0)$/;"	f	signature:(int __q3, int __q2, int __q1, int __q0)
_mm_set_epi64	sse_set/intrin_ref.h	/^_mm_set_epi64 (__m64 __q1,  __m64 __q0)$/;"	f	signature:(__m64 __q1, __m64 __q0)
_mm_set_epi64x	sse_set/intrin_ref.h	/^_mm_set_epi64x (long long __q1, long long __q0)$/;"	f	signature:(long long __q1, long long __q0)
_mm_set_epi8	sse_set/intrin_ref.h	/^_mm_set_epi8 (char __q15, char __q14, char __q13, char __q12,$/;"	f	signature:(char __q15, char __q14, char __q13, char __q12, char __q11, char __q10, char __q09, char __q08, char __q07, char __q06, char __q05, char __q04, char __q03, char __q02, char __q01, char __q00)
_mm_set_pd	sse_set/intrin_ref.h	/^_mm_set_pd (double __W, double __X)$/;"	f	signature:(double __W, double __X)
_mm_set_pd1	sse_set/intrin_ref.h	/^_mm_set_pd1 (double __F)$/;"	f	signature:(double __F)
_mm_set_pi16	sse_set/intrin_ref.h	/^_mm_set_pi16 (short __w3, short __w2, short __w1, short __w0)$/;"	f	signature:(short __w3, short __w2, short __w1, short __w0)
_mm_set_pi32	sse_set/intrin_ref.h	/^_mm_set_pi32 (int __i1, int __i0)$/;"	f	signature:(int __i1, int __i0)
_mm_set_pi64x	sse_set/intrin_ref.h	/^_mm_set_pi64x (long long __i)$/;"	f	signature:(long long __i)
_mm_set_pi8	sse_set/intrin_ref.h	/^_mm_set_pi8 (char __b7, char __b6, char __b5, char __b4,$/;"	f	signature:(char __b7, char __b6, char __b5, char __b4, char __b3, char __b2, char __b1, char __b0)
_mm_set_ps	sse_set/intrin_ref.h	/^_mm_set_ps (const float __Z, const float __Y, const float __X, const float __W)$/;"	f	signature:(const float __Z, const float __Y, const float __X, const float __W)
_mm_set_ps1	sse_set/intrin_ref.h	/^_mm_set_ps1 (float __F)$/;"	f	signature:(float __F)
_mm_set_sd	sse_set/intrin_ref.h	/^_mm_set_sd (double __F)$/;"	f	signature:(double __F)
_mm_set_ss	sse_set/intrin_ref.h	/^_mm_set_ss (float __F)$/;"	f	signature:(float __F)
_mm_setcsr	sse_set/intrin_ref.h	/^_mm_setcsr (unsigned int __I)$/;"	f	signature:(unsigned int __I)
_mm_setr_epi16	sse_set/intrin_ref.h	/^_mm_setr_epi16 (short __q0, short __q1, short __q2, short __q3,$/;"	f	signature:(short __q0, short __q1, short __q2, short __q3, short __q4, short __q5, short __q6, short __q7)
_mm_setr_epi32	sse_set/intrin_ref.h	/^_mm_setr_epi32 (int __q0, int __q1, int __q2, int __q3)$/;"	f	signature:(int __q0, int __q1, int __q2, int __q3)
_mm_setr_epi64	sse_set/intrin_ref.h	/^_mm_setr_epi64 (__m64 __q0, __m64 __q1)$/;"	f	signature:(__m64 __q0, __m64 __q1)
_mm_setr_epi8	sse_set/intrin_ref.h	/^_mm_setr_epi8 (char __q00, char __q01, char __q02, char __q03,$/;"	f	signature:(char __q00, char __q01, char __q02, char __q03, char __q04, char __q05, char __q06, char __q07, char __q08, char __q09, char __q10, char __q11, char __q12, char __q13, char __q14, char __q15)
_mm_setr_pd	sse_set/intrin_ref.h	/^_mm_setr_pd (double __W, double __X)$/;"	f	signature:(double __W, double __X)
_mm_setr_pi16	sse_set/intrin_ref.h	/^_mm_setr_pi16 (short __w0, short __w1, short __w2, short __w3)$/;"	f	signature:(short __w0, short __w1, short __w2, short __w3)
_mm_setr_pi32	sse_set/intrin_ref.h	/^_mm_setr_pi32 (int __i0, int __i1)$/;"	f	signature:(int __i0, int __i1)
_mm_setr_pi8	sse_set/intrin_ref.h	/^_mm_setr_pi8 (char __b0, char __b1, char __b2, char __b3,$/;"	f	signature:(char __b0, char __b1, char __b2, char __b3, char __b4, char __b5, char __b6, char __b7)
_mm_setr_ps	sse_set/intrin_ref.h	/^_mm_setr_ps (float __Z, float __Y, float __X, float __W)$/;"	f	signature:(float __Z, float __Y, float __X, float __W)
_mm_setzero_pd	sse_set/intrin_ref.h	/^_mm_setzero_pd (void)$/;"	f	signature:(void)
_mm_setzero_ps	sse_set/intrin_ref.h	/^_mm_setzero_ps (void)$/;"	f	signature:(void)
_mm_setzero_si128	sse_set/intrin_ref.h	/^_mm_setzero_si128 (void)$/;"	f	signature:(void)
_mm_setzero_si64	sse_set/intrin_ref.h	/^_mm_setzero_si64 (void)$/;"	f	signature:(void)
_mm_sfence	sse_set/intrin_ref.h	/^_mm_sfence (void)$/;"	f	signature:(void)
_mm_shuffle_epi32	sse_set/intrin_ref.h	/^_mm_shuffle_epi32 (__m128i __A, const int __mask)$/;"	f	signature:(__m128i __A, const int __mask)
_mm_shuffle_epi32	sse_set/intrin_ref.h	3559;"	d
_mm_shuffle_epi8	sse_set/intrin_ref.h	/^_mm_shuffle_epi8 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_shuffle_pd	sse_set/intrin_ref.h	/^_mm_shuffle_pd(__m128d __A, __m128d __B, const int __mask)$/;"	f	signature:(__m128d __A, __m128d __B, const int __mask)
_mm_shuffle_pd	sse_set/intrin_ref.h	3060;"	d
_mm_shuffle_pi16	sse_set/intrin_ref.h	/^_mm_shuffle_pi16 (__m64 __A, int const __N)$/;"	f	signature:(__m64 __A, int const __N)
_mm_shuffle_pi16	sse_set/intrin_ref.h	2046;"	d
_mm_shuffle_pi8	sse_set/intrin_ref.h	/^_mm_shuffle_pi8 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_shuffle_ps	sse_set/intrin_ref.h	/^_mm_shuffle_ps (__m128 __A, __m128 __B, int const __mask)$/;"	f	signature:(__m128 __A, __m128 __B, int const __mask)
_mm_shuffle_ps	sse_set/intrin_ref.h	1642;"	d
_mm_shufflehi_epi16	sse_set/intrin_ref.h	/^_mm_shufflehi_epi16 (__m128i __A, const int __mask)$/;"	f	signature:(__m128i __A, const int __mask)
_mm_shufflehi_epi16	sse_set/intrin_ref.h	3555;"	d
_mm_shufflelo_epi16	sse_set/intrin_ref.h	/^_mm_shufflelo_epi16 (__m128i __A, const int __mask)$/;"	f	signature:(__m128i __A, const int __mask)
_mm_shufflelo_epi16	sse_set/intrin_ref.h	3557;"	d
_mm_sign_epi16	sse_set/intrin_ref.h	/^_mm_sign_epi16 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_sign_epi32	sse_set/intrin_ref.h	/^_mm_sign_epi32 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_sign_epi8	sse_set/intrin_ref.h	/^_mm_sign_epi8 (__m128i __X, __m128i __Y)$/;"	f	signature:(__m128i __X, __m128i __Y)
_mm_sign_pi16	sse_set/intrin_ref.h	/^_mm_sign_pi16 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_sign_pi32	sse_set/intrin_ref.h	/^_mm_sign_pi32 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_sign_pi8	sse_set/intrin_ref.h	/^_mm_sign_pi8 (__m64 __X, __m64 __Y)$/;"	f	signature:(__m64 __X, __m64 __Y)
_mm_sll_epi16	sse_set/intrin_ref.h	/^_mm_sll_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sll_epi32	sse_set/intrin_ref.h	/^_mm_sll_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sll_epi64	sse_set/intrin_ref.h	/^_mm_sll_epi64 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sll_pi16	sse_set/intrin_ref.h	/^_mm_sll_pi16 (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_mm_sll_pi32	sse_set/intrin_ref.h	/^_mm_sll_pi32 (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_mm_sll_si64	sse_set/intrin_ref.h	/^_mm_sll_si64 (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_mm_slli_epi16	sse_set/intrin_ref.h	/^_mm_slli_epi16 (__m128i __A, int __B)$/;"	f	signature:(__m128i __A, int __B)
_mm_slli_epi32	sse_set/intrin_ref.h	/^_mm_slli_epi32 (__m128i __A, int __B)$/;"	f	signature:(__m128i __A, int __B)
_mm_slli_epi64	sse_set/intrin_ref.h	/^_mm_slli_epi64 (__m128i __A, int __B)$/;"	f	signature:(__m128i __A, int __B)
_mm_slli_pi16	sse_set/intrin_ref.h	/^_mm_slli_pi16 (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_mm_slli_pi32	sse_set/intrin_ref.h	/^_mm_slli_pi32 (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_mm_slli_si128	sse_set/intrin_ref.h	/^_mm_slli_si128 (__m128i __A, const int __N)$/;"	f	signature:(__m128i __A, const int __N)
_mm_slli_si128	sse_set/intrin_ref.h	3332;"	d
_mm_slli_si64	sse_set/intrin_ref.h	/^_mm_slli_si64 (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_mm_sqrt_pd	sse_set/intrin_ref.h	/^_mm_sqrt_pd (__m128d __A)$/;"	f	signature:(__m128d __A)
_mm_sqrt_ps	sse_set/intrin_ref.h	/^_mm_sqrt_ps (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_sqrt_sd	sse_set/intrin_ref.h	/^_mm_sqrt_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_sqrt_ss	sse_set/intrin_ref.h	/^_mm_sqrt_ss (__m128 __A)$/;"	f	signature:(__m128 __A)
_mm_sra_epi16	sse_set/intrin_ref.h	/^_mm_sra_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sra_epi32	sse_set/intrin_ref.h	/^_mm_sra_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sra_pi16	sse_set/intrin_ref.h	/^_mm_sra_pi16 (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_mm_sra_pi32	sse_set/intrin_ref.h	/^_mm_sra_pi32 (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_mm_srai_epi16	sse_set/intrin_ref.h	/^_mm_srai_epi16 (__m128i __A, int __B)$/;"	f	signature:(__m128i __A, int __B)
_mm_srai_epi32	sse_set/intrin_ref.h	/^_mm_srai_epi32 (__m128i __A, int __B)$/;"	f	signature:(__m128i __A, int __B)
_mm_srai_pi16	sse_set/intrin_ref.h	/^_mm_srai_pi16 (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_mm_srai_pi32	sse_set/intrin_ref.h	/^_mm_srai_pi32 (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_mm_srl_epi16	sse_set/intrin_ref.h	/^_mm_srl_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_srl_epi32	sse_set/intrin_ref.h	/^_mm_srl_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_srl_epi64	sse_set/intrin_ref.h	/^_mm_srl_epi64 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_srl_pi16	sse_set/intrin_ref.h	/^_mm_srl_pi16 (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_mm_srl_pi32	sse_set/intrin_ref.h	/^_mm_srl_pi32 (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_mm_srl_si64	sse_set/intrin_ref.h	/^_mm_srl_si64 (__m64 __m, __m64 __count)$/;"	f	signature:(__m64 __m, __m64 __count)
_mm_srli_epi16	sse_set/intrin_ref.h	/^_mm_srli_epi16 (__m128i __A, int __B)$/;"	f	signature:(__m128i __A, int __B)
_mm_srli_epi32	sse_set/intrin_ref.h	/^_mm_srli_epi32 (__m128i __A, int __B)$/;"	f	signature:(__m128i __A, int __B)
_mm_srli_epi64	sse_set/intrin_ref.h	/^_mm_srli_epi64 (__m128i __A, int __B)$/;"	f	signature:(__m128i __A, int __B)
_mm_srli_pi16	sse_set/intrin_ref.h	/^_mm_srli_pi16 (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_mm_srli_pi32	sse_set/intrin_ref.h	/^_mm_srli_pi32 (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_mm_srli_si128	sse_set/intrin_ref.h	/^_mm_srli_si128 (__m128i __A, const int __N)$/;"	f	signature:(__m128i __A, const int __N)
_mm_srli_si128	sse_set/intrin_ref.h	3330;"	d
_mm_srli_si64	sse_set/intrin_ref.h	/^_mm_srli_si64 (__m64 __m, int __count)$/;"	f	signature:(__m64 __m, int __count)
_mm_store1_pd	sse_set/intrin_ref.h	/^_mm_store1_pd (double *__P, __m128d __A)$/;"	f	signature:(double *__P, __m128d __A)
_mm_store1_ps	sse_set/intrin_ref.h	/^_mm_store1_ps (float *__P, __m128 __A)$/;"	f	signature:(float *__P, __m128 __A)
_mm_store_pd	sse_set/intrin_ref.h	/^_mm_store_pd (double *__P, __m128d __A)$/;"	f	signature:(double *__P, __m128d __A)
_mm_store_pd1	sse_set/intrin_ref.h	/^_mm_store_pd1 (double *__P, __m128d __A)$/;"	f	signature:(double *__P, __m128d __A)
_mm_store_ps	sse_set/intrin_ref.h	/^_mm_store_ps (float *__P, __m128 __A)$/;"	f	signature:(float *__P, __m128 __A)
_mm_store_ps1	sse_set/intrin_ref.h	/^_mm_store_ps1 (float *__P, __m128 __A)$/;"	f	signature:(float *__P, __m128 __A)
_mm_store_sd	sse_set/intrin_ref.h	/^_mm_store_sd (double *__P, __m128d __A)$/;"	f	signature:(double *__P, __m128d __A)
_mm_store_si128	sse_set/intrin_ref.h	/^_mm_store_si128 (__m128i *__P, __m128i __B)$/;"	f	signature:(__m128i *__P, __m128i __B)
_mm_store_ss	sse_set/intrin_ref.h	/^_mm_store_ss (float *__P, __m128 __A)$/;"	f	signature:(float *__P, __m128 __A)
_mm_storeh_pd	sse_set/intrin_ref.h	/^_mm_storeh_pd (double *__P, __m128d __A)$/;"	f	signature:(double *__P, __m128d __A)
_mm_storeh_pi	sse_set/intrin_ref.h	/^_mm_storeh_pi (__m64 *__P, __m128 __A)$/;"	f	signature:(__m64 *__P, __m128 __A)
_mm_storel_epi64	sse_set/intrin_ref.h	/^_mm_storel_epi64 (__m128i *__P, __m128i __B)$/;"	f	signature:(__m128i *__P, __m128i __B)
_mm_storel_pd	sse_set/intrin_ref.h	/^_mm_storel_pd (double *__P, __m128d __A)$/;"	f	signature:(double *__P, __m128d __A)
_mm_storel_pi	sse_set/intrin_ref.h	/^_mm_storel_pi (__m64 *__P, __m128 __A)$/;"	f	signature:(__m64 *__P, __m128 __A)
_mm_storer_pd	sse_set/intrin_ref.h	/^_mm_storer_pd (double *__P, __m128d __A)$/;"	f	signature:(double *__P, __m128d __A)
_mm_storer_ps	sse_set/intrin_ref.h	/^_mm_storer_ps (float *__P, __m128 __A)$/;"	f	signature:(float *__P, __m128 __A)
_mm_storeu_pd	sse_set/intrin_ref.h	/^_mm_storeu_pd (double *__P, __m128d __A)$/;"	f	signature:(double *__P, __m128d __A)
_mm_storeu_ps	sse_set/intrin_ref.h	/^_mm_storeu_ps (float *__P, __m128 __A)$/;"	f	signature:(float *__P, __m128 __A)
_mm_storeu_si128	sse_set/intrin_ref.h	/^_mm_storeu_si128 (__m128i *__P, __m128i __B)$/;"	f	signature:(__m128i *__P, __m128i __B)
_mm_stream_load_si128	sse_set/intrin_ref.h	/^_mm_stream_load_si128 (__m128i *__X)$/;"	f	signature:(__m128i *__X)
_mm_stream_pd	sse_set/intrin_ref.h	/^_mm_stream_pd (double *__A, __m128d __B)$/;"	f	signature:(double *__A, __m128d __B)
_mm_stream_pi	sse_set/intrin_ref.h	/^_mm_stream_pi (__m64 *__P, __m64 __A)$/;"	f	signature:(__m64 *__P, __m64 __A)
_mm_stream_ps	sse_set/intrin_ref.h	/^_mm_stream_ps (float *__P, __m128 __A)$/;"	f	signature:(float *__P, __m128 __A)
_mm_stream_si128	sse_set/intrin_ref.h	/^_mm_stream_si128 (__m128i *__A, __m128i __B)$/;"	f	signature:(__m128i *__A, __m128i __B)
_mm_stream_si32	sse_set/intrin_ref.h	/^_mm_stream_si32 (int *__A, int __B)$/;"	f	signature:(int *__A, int __B)
_mm_stream_si64	sse_set/intrin_ref.h	/^_mm_stream_si64 (long long int *__A, long long int __B)$/;"	f	signature:(long long int *__A, long long int __B)
_mm_sub_epi16	sse_set/intrin_ref.h	/^_mm_sub_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sub_epi32	sse_set/intrin_ref.h	/^_mm_sub_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sub_epi64	sse_set/intrin_ref.h	/^_mm_sub_epi64 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sub_epi8	sse_set/intrin_ref.h	/^_mm_sub_epi8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_sub_pd	sse_set/intrin_ref.h	/^_mm_sub_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_sub_pi16	sse_set/intrin_ref.h	/^_mm_sub_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_sub_pi32	sse_set/intrin_ref.h	/^_mm_sub_pi32 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_sub_pi8	sse_set/intrin_ref.h	/^_mm_sub_pi8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_sub_ps	sse_set/intrin_ref.h	/^_mm_sub_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_sub_sd	sse_set/intrin_ref.h	/^_mm_sub_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_sub_si64	sse_set/intrin_ref.h	/^_mm_sub_si64 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_sub_ss	sse_set/intrin_ref.h	/^_mm_sub_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_subs_epi16	sse_set/intrin_ref.h	/^_mm_subs_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_subs_epi8	sse_set/intrin_ref.h	/^_mm_subs_epi8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_subs_epu16	sse_set/intrin_ref.h	/^_mm_subs_epu16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_subs_epu8	sse_set/intrin_ref.h	/^_mm_subs_epu8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_subs_pi16	sse_set/intrin_ref.h	/^_mm_subs_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_subs_pi8	sse_set/intrin_ref.h	/^_mm_subs_pi8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_subs_pu16	sse_set/intrin_ref.h	/^_mm_subs_pu16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_subs_pu8	sse_set/intrin_ref.h	/^_mm_subs_pu8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_test_all_ones	sse_set/intrin_ref.h	4154;"	d
_mm_test_all_zeros	sse_set/intrin_ref.h	4152;"	d
_mm_test_mix_ones_zeros	sse_set/intrin_ref.h	4157;"	d
_mm_testc_si128	sse_set/intrin_ref.h	/^_mm_testc_si128 (__m128i __M, __m128i __V)$/;"	f	signature:(__m128i __M, __m128i __V)
_mm_testnzc_si128	sse_set/intrin_ref.h	/^_mm_testnzc_si128 (__m128i __M, __m128i __V)$/;"	f	signature:(__m128i __M, __m128i __V)
_mm_testz_si128	sse_set/intrin_ref.h	/^_mm_testz_si128 (__m128i __M, __m128i __V)$/;"	f	signature:(__m128i __M, __m128i __V)
_mm_ucomieq_sd	sse_set/intrin_ref.h	/^_mm_ucomieq_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_ucomieq_ss	sse_set/intrin_ref.h	/^_mm_ucomieq_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_ucomige_sd	sse_set/intrin_ref.h	/^_mm_ucomige_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_ucomige_ss	sse_set/intrin_ref.h	/^_mm_ucomige_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_ucomigt_sd	sse_set/intrin_ref.h	/^_mm_ucomigt_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_ucomigt_ss	sse_set/intrin_ref.h	/^_mm_ucomigt_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_ucomile_sd	sse_set/intrin_ref.h	/^_mm_ucomile_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_ucomile_ss	sse_set/intrin_ref.h	/^_mm_ucomile_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_ucomilt_sd	sse_set/intrin_ref.h	/^_mm_ucomilt_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_ucomilt_ss	sse_set/intrin_ref.h	/^_mm_ucomilt_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_ucomineq_sd	sse_set/intrin_ref.h	/^_mm_ucomineq_sd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_ucomineq_ss	sse_set/intrin_ref.h	/^_mm_ucomineq_ss (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_unpackhi_epi16	sse_set/intrin_ref.h	/^_mm_unpackhi_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_unpackhi_epi32	sse_set/intrin_ref.h	/^_mm_unpackhi_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_unpackhi_epi64	sse_set/intrin_ref.h	/^_mm_unpackhi_epi64 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_unpackhi_epi8	sse_set/intrin_ref.h	/^_mm_unpackhi_epi8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_unpackhi_pd	sse_set/intrin_ref.h	/^_mm_unpackhi_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_unpackhi_pi16	sse_set/intrin_ref.h	/^_mm_unpackhi_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_unpackhi_pi32	sse_set/intrin_ref.h	/^_mm_unpackhi_pi32 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_unpackhi_pi8	sse_set/intrin_ref.h	/^_mm_unpackhi_pi8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_unpackhi_ps	sse_set/intrin_ref.h	/^_mm_unpackhi_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_unpacklo_epi16	sse_set/intrin_ref.h	/^_mm_unpacklo_epi16 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_unpacklo_epi32	sse_set/intrin_ref.h	/^_mm_unpacklo_epi32 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_unpacklo_epi64	sse_set/intrin_ref.h	/^_mm_unpacklo_epi64 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_unpacklo_epi8	sse_set/intrin_ref.h	/^_mm_unpacklo_epi8 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_unpacklo_pd	sse_set/intrin_ref.h	/^_mm_unpacklo_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_unpacklo_pi16	sse_set/intrin_ref.h	/^_mm_unpacklo_pi16 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_unpacklo_pi32	sse_set/intrin_ref.h	/^_mm_unpacklo_pi32 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_unpacklo_pi8	sse_set/intrin_ref.h	/^_mm_unpacklo_pi8 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
_mm_unpacklo_ps	sse_set/intrin_ref.h	/^_mm_unpacklo_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_xor_pd	sse_set/intrin_ref.h	/^_mm_xor_pd (__m128d __A, __m128d __B)$/;"	f	signature:(__m128d __A, __m128d __B)
_mm_xor_ps	sse_set/intrin_ref.h	/^_mm_xor_ps (__m128 __A, __m128 __B)$/;"	f	signature:(__m128 __A, __m128 __B)
_mm_xor_si128	sse_set/intrin_ref.h	/^_mm_xor_si128 (__m128i __A, __m128i __B)$/;"	f	signature:(__m128i __A, __m128i __B)
_mm_xor_si64	sse_set/intrin_ref.h	/^_mm_xor_si64 (__m64 __m1, __m64 __m2)$/;"	f	signature:(__m64 __m1, __m64 __m2)
acces_map	generator.h	/^            acces_map_t acces_map;$/;"	m	class:ctb::generator::data_t	access:private
acces_map_t	generator.h	/^            typedef std::map<int, writer<aliasenv_generator> > acces_map_t;$/;"	t	class:ctb::generator::data_t	access:private
access	aliasenv_maker.h	/^        static std::string& access(const std::string&);$/;"	p	class:ctb::aliasenv_maker	access:public	signature:(const std::string&)
access	aliasenv_maker.h	/^    std::string& aliasenv_maker<T,L,R>::access(const std::string& str)$/;"	f	class:ctb::aliasenv_maker	signature:(const std::string& str)
add	cartesian_multiplier.h	/^      void add(T&);$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:(T&)
add	cartesian_multiplier.h	/^  void cartesian_multiplier<T>::add(T& t)$/;"	f	class:ctb::cartesian_multiplier	signature:(T& t)
add	writer.h	/^        template <bool preprocess> void add(std::string&& str, bool terminal) ;$/;"	p	class:ctb::writer	access:private	signature:(std::string&& str, bool terminal)
add	writer.h	/^    void writer<M,I,O,P>::add(std::string&& str, bool terminal)$/;"	f	class:ctb::writer	signature:(std::string&& str, bool terminal)
add_box	unit_test6/main.cpp	/^typedef output_box add_box;$/;"	t	file:
add_tags	instructions.h	/^        \/*API*\/ void add_tags(std::shared_ptr<taghandler_base>,std::size_t layer = gSELECT); $/;"	p	class:ctb::instruction_table	access:public	signature:(std::shared_ptr<taghandler_base>,std::size_t layer = gSELECT)
add_tags	instructions.h	/^    void instruction_table<T>::add_tags(std::shared_ptr<taghandler_base> ptr, std::size_t l)$/;"	f	class:ctb::instruction_table	signature:(std::shared_ptr<taghandler_base> ptr, std::size_t l)
addcode	instructions.h	/^            \/*IAPI*\/void addcode(int wi, int wo, const std::string& c,const std::string&,const std::string&,const std::string&,int r);$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int wi, int wo, const std::string& c,const std::string&,const std::string&,const std::string&,int r)
addcode	instructions.h	/^    void instruction_table<T>::operation::addcode(int wi, int wo, const std::string& c,const std::string& cc,const std::string& n,const std::string& t,int r)$/;"	f	class:ctb::instruction_table::operation	signature:(int wi, int wo, const std::string& c,const std::string& cc,const std::string& n,const std::string& t,int r)
addcode_conversion	instructions.h	/^            \/*IAPI*\/void addcode_conversion(int from, int to, const std::string& c1, const std::string& c2,const std::string& cc,const std::string& cg, const std::string& n, const std::string& t,int r);$/;"	p	class:ctb::instruction_table::type	access:public	signature:(int from, int to, const std::string& c1, const std::string& c2,const std::string& cc,const std::string& cg, const std::string& n, const std::string& t,int r)
addcode_conversion	instructions.h	/^    void instruction_table<T>::type::addcode_conversion(int in, int out, const std::string& c1,const std::string& c2,const std::string& cc,const std::string& cg, const std::string& n,const std::string& t,int r)$/;"	f	class:ctb::instruction_table::type	signature:(int in, int out, const std::string& c1,const std::string& c2,const std::string& cc,const std::string& cg, const std::string& n,const std::string& t,int r)
addcode_type	instructions.h	/^            \/*IAPI*\/void addcode_type(int w, const std::string& c,const std::string&) ;$/;"	p	class:ctb::instruction_table::type	access:public	signature:(int w, const std::string& c,const std::string&)
addcode_type	instructions.h	/^    void instruction_table<T>::type::addcode_type(int w, const std::string& c,const std::string& n)$/;"	f	class:ctb::instruction_table::type	signature:(int w, const std::string& c,const std::string& n)
adddebug	loader_test.h	/^          void adddebug(G& graph, const IT&, int frame, const stringlist&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(G& graph, const IT&, int frame, const stringlist&)
adddebug	loader_test.h	/^  void test_loader<T,G,IT>::adddebug(G& gen, const IT& it, int depth, const stringlist& v)$/;"	f	class:ctb::test_loader	signature:(G& gen, const IT& it, int depth, const stringlist& v)
addedge	generator.h	/^        void addedge(vid_t aid, vid_t bid, int b_argpos) ;$/;"	p	class:ctb::generator	access:public	signature:(vid_t aid, vid_t bid, int b_argpos)
addedge	generator.h	/^    void generator<T,IT>::addedge(vid_t aid, vid_t bid, int b_argpos)  $/;"	f	class:ctb::generator	signature:(vid_t aid, vid_t bid, int b_argpos)
addedge	graph.h	/^        void addedge(I aid, I bid, int b_argpos = -1) ; \/** self describing I believe*\/$/;"	p	class:ctb::graph_generic	access:public	signature:(I aid, I bid, int b_argpos = -1)
addedge	graph.h	/^    void graph_generic<T,I,directed,O...>::addedge(I aid, I bid, int b_argpos)  $/;"	f	class:ctb::graph_generic	signature:(I aid, I bid, int b_argpos)
addons	.exrc	/^set runtimepath=~\/.vim,\/var\/lib\/vim\/addons,\/usr\/share\/vim\/vimfiles,\/usr\/share\/vim\/vim73,\/usr\/share\/vim\/vimfiles\/after,\/var\/lib\/vim\/addons\/after,~\/.vim\/after$/;"	v
addons	tags	/^addons	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
addons	tags	/^after	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
addons	tags	/^vim73	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
addoperation	instructions.h	/^        \/*IAPI*\/ operation_t& addoperation(typename T::opid_t op, typename T::tid_t t, const std::vector<typename T::tid_t>&it, typename T::flag_t f) ;$/;"	p	class:ctb::instruction_table	access:public	signature:(typename T::opid_t op, typename T::tid_t t, const std::vector<typename T::tid_t>&it, typename T::flag_t f)
addoperation	instructions.h	/^    typename instruction_table<T>::operation_t& instruction_table<T>::addoperation(typename T::opid_t op, typename T::tid_t t, const std::vector<typename T::tid_t>& it, typename T::flag_t f)$/;"	f	class:ctb::instruction_table	signature:(typename T::opid_t op, typename T::tid_t t, const std::vector<typename T::tid_t>& it, typename T::flag_t f)
addtype	instructions.h	/^        \/*IAPI*\/ type_t& addtype(typename T::tid_t t, int bitwidth = 0) ;$/;"	p	class:ctb::instruction_table	access:public	signature:(typename T::tid_t t, int bitwidth = 0)
addtype	instructions.h	/^    typename instruction_table<T>::type_t& instruction_table<T>::addtype(typename T::tid_t t, int bitwidth)$/;"	f	class:ctb::instruction_table	signature:(typename T::tid_t t, int bitwidth)
addvert	generator.h	/^        template <typename...L> void addvert(vid_t v, id_t op, L... p) ;$/;"	p	class:ctb::generator	access:public	signature:(vid_t v, id_t op, L... p)
addvert	generator.h	/^    template <typename...L> void generator<T,IT>::addvert(vid_t v, id_t op, L... p)  $/;"	f	class:ctb::generator	signature:(vid_t v, id_t op, L... p)
addvert	graph.h	/^        template <typename...L> void addvert(I v, bool in , bool out , L&&... p) ; \/** v is identifier of a vetes, in and out specify whether vertex should be registered as output\/input, p... are parameters to be passed to the 'data' member upon construction*\/$/;"	p	class:ctb::graph_generic	access:public	signature:(I v, bool in , bool out , L&&... p)
addvert	graph.h	/^    void graph_generic<T,I,directed,O...>::addvert(I v, bool bin, bool bout, L&&... p)  $/;"	f	class:ctb::graph_generic	signature:(I v, bool bin, bool bout, L&&... p)
after	.exrc	/^set runtimepath=~\/.vim,\/var\/lib\/vim\/addons,\/usr\/share\/vim\/vimfiles,\/usr\/share\/vim\/vim73,\/usr\/share\/vim\/vimfiles\/after,\/var\/lib\/vim\/addons\/after,~\/.vim\/after$/;"	v
after	tags	/^addons	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
after	tags	/^after	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
after	tags	/^vim73	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
alias	aliasenv_bobox.h	/^      static std::string alias(const std::string& a, bool* s = NULL);$/;"	p	class:ctb::aliasenv_bobox	access:public	signature:(const std::string& a, bool* s = NULL)
alias	aliasenv_bobox.h	/^  std::string aliasenv_bobox::alias(const std::string& a, bool* s)$/;"	f	class:ctb::aliasenv_bobox	signature:(const std::string& a, bool* s)
alias	aliasenv_generator.h	/^      static std::string alias(const std::string& a, bool* s = NULL, int n = -1);$/;"	p	class:ctb::aliasenv_generator	access:public	signature:(const std::string& a, bool* s = NULL, int n = -1)
alias	aliasenv_generator.h	/^  std::string aliasenv_generator::alias(const std::string& a, bool* s, int n)$/;"	f	class:ctb::aliasenv_generator	signature:(const std::string& a, bool* s, int n)
alias	aliasenv_maker.h	/^        static std::string alias(const std::string& a, bool* success = NULL);$/;"	p	class:ctb::aliasenv_maker	access:public	signature:(const std::string& a, bool* success = NULL)
alias	aliasenv_maker.h	/^    std::string aliasenv_maker<T,L,R>::alias(const std::string& a, bool* s)$/;"	f	class:ctb::aliasenv_maker	signature:(const std::string& a, bool* s)
alias	aliasenv_simple.h	/^      static std::string alias(const std::string& a, bool* s = NULL);$/;"	p	class:ctb::aliasenv_simple	access:public	signature:(const std::string& a, bool* s = NULL)
alias	aliasenv_simple.h	/^  std::string aliasenv_simple::alias(const std::string& a, bool* s)$/;"	f	class:ctb::aliasenv_simple	signature:(const std::string& a, bool* s)
alias	aliasenv_simu.h	/^      static std::string alias(const std::string& a, bool* s = NULL);$/;"	p	class:ctb::aliasenv_simu	access:public	signature:(const std::string& a, bool* s = NULL)
alias	aliasenv_simu.h	/^  std::string aliasenv_simu::alias(const std::string& a, bool* s)$/;"	f	class:ctb::aliasenv_simu	signature:(const std::string& a, bool* s)
aliasenv_BOBOX_GUARD	aliasenv_bobox.h	3;"	d
aliasenv_GENERATOR_GUARD	aliasenv_generator.h	3;"	d
aliasenv_GUARD	aliasenv_maker.h	3;"	d
aliasenv_SIMPLE_GUARD	aliasenv_simple.h	3;"	d
aliasenv_SIMU_GUARD	aliasenv_simu.h	3;"	d
aliasenv_bobox	aliasenv_bobox.h	/^  class aliasenv_bobox : public aliasenv_generator$/;"	c	namespace:ctb	inherits:aliasenv_generator
aliasenv_empty	writer.h	/^  typedef aliasenv_maker<empty_tag, language_empty> aliasenv_empty;$/;"	t	namespace:ctb
aliasenv_empty_cpp	writer.h	/^  typedef aliasenv_maker<empty_tag, language_cpp> aliasenv_empty_cpp;$/;"	t	namespace:ctb
aliasenv_generator	aliasenv_generator.h	/^  class aliasenv_generator $/;"	c	namespace:ctb
aliasenv_maker	aliasenv_maker.h	/^    class aliasenv_maker$/;"	c	namespace:ctb
aliasenv_record	ctb.h	/^        typedef std::function<std::string(std::string)> aliasenv_record;$/;"	t	class:ctb::ctb	access:private
aliasenv_simple	aliasenv_simple.h	/^  class aliasenv_simple : public aliasenv_generator$/;"	c	namespace:ctb	inherits:aliasenv_generator
aliasenv_simu	aliasenv_simu.h	/^  class aliasenv_simu : public aliasenv_generator$/;"	c	namespace:ctb	inherits:aliasenv_generator
aliases	aliasenv_bobox.h	/^      static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_bobox	access:protected
aliases	aliasenv_bobox.h	/^  std::map<std::string, std::string> aliasenv_bobox::aliases;$/;"	m	class:ctb::aliasenv_bobox
aliases	aliasenv_generator.h	/^      static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_generator	access:protected
aliases	aliasenv_generator.h	/^  std::map<std::string, std::string> aliasenv_generator::aliases;$/;"	m	class:ctb::aliasenv_generator
aliases	aliasenv_maker.h	/^        static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_maker	access:protected
aliases	aliasenv_maker.h	/^  template <typename T, typename L, bool R> std::map<std::string, std::string> aliasenv_maker<T,L,R>::aliases;$/;"	m	class:ctb::aliasenv_maker
aliases	aliasenv_simple.h	/^      static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_simple	access:protected
aliases	aliasenv_simple.h	/^  std::map<std::string, std::string> aliasenv_simple::aliases;$/;"	m	class:ctb::aliasenv_simple
aliases	aliasenv_simu.h	/^      static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_simu	access:protected
aliases	aliasenv_simu.h	/^  std::map<std::string, std::string> aliasenv_simu::aliases;$/;"	m	class:ctb::aliasenv_simu
aliastab_t	aliasenv_bobox.h	/^      typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_bobox	access:protected
aliastab_t	aliasenv_generator.h	/^      typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_generator	access:protected
aliastab_t	aliasenv_maker.h	/^        typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_maker	access:protected
aliastab_t	aliasenv_simple.h	/^      typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_simple	access:protected
aliastab_t	aliasenv_simu.h	/^      typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_simu	access:protected
align_offset	templates/bobox_align.h	/^std::size_t align_offset = pos_in_$2 % $1;$/;"	v
aligned	templates/bobox_align.h	/^bool aligned = true;;$/;"	v
allowed	tagmaster.h	/^        F allowed;$/;"	m	class:ctb::tagmaster	access:private
append	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename Types> writer<M,I,O,P>& append(Types str) ;$/;"	p	class:ctb::writer	access:public	signature:(Types str)
append	writer.h	/^    template <dolar_mode dolars , typename Type> writer<M,I,O,P>& writer<M,I,O,P>::append(Type str)$/;"	f	class:ctb::writer	signature:(Type str)
at	tagmaster.h	/^        F at;$/;"	m	class:ctb::tagmaster	access:private
basic_ignorant_exporter	writer.h	/^        \/*operators*\/typedef writer<M, dIgnore, dExpand, P> basic_ignorant_exporter;$/;"	t	class:ctb::writer	access:public
basic_importer	writer.h	/^        \/*operators*\/typedef writer<M, dLet, dEat, P> basic_importer;$/;"	t	class:ctb::writer	access:public
begin	cartesian_multiplier.h	/^      cartesian_multiplier begin();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
begin	cartesian_multiplier.h	/^      cartesian_multiplier::constant begin() const;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:() const
begin	cartesian_multiplier.h	/^  cartesian_multiplier<T> cartesian_multiplier<T>::begin()$/;"	f	class:ctb::cartesian_multiplier	signature:()
begin	cartesian_multiplier.h	/^  typename cartesian_multiplier<T>::constant cartesian_multiplier<T>::begin() const$/;"	f	class:ctb::cartesian_multiplier	signature:() const
begins	cartesian_multiplier.h	/^      itr begins;$/;"	m	class:ctb::cartesian_multiplier	access:private
bitwidth	instructions.h	/^            \/*EAPI*\/proxy<int> bitwidth;$/;"	m	class:ctb::instruction_table::type	access:public
bool	sse_set/C_table.csv	/^logical	instruction	bool	bool,bool	${op,c->GE,>=,LE,<=,GT,>,LT,<}_bool		1	1	$$arg1 $c $$arg2 		C	10$/;"	v
bool	sse_set/C_table.csv	/^logical	instruction	bool	bool,bool	AND_bool		1	1	$$arg1 && $$arg2		C	10$/;"	v
bool	sse_set/C_table.csv	/^logical	instruction	bool	bool,bool	EQ_bool		1	1	$$arg1 == $$arg2		C	10$/;"	v
bool	sse_set/C_table.csv	/^logical	instruction	bool	bool,bool	NE_bool		1	1	$$arg1 != $$arg2		C	10$/;"	v
bool	sse_set/C_table.csv	/^logical	instruction	bool	bool,bool	OR_bool		1	1	$$arg1 || $$arg2		C	10$/;"	v
bool	sse_set/C_table.csv	/^logical	instruction	bool	bool,bool	XOR_bool		1	1	$$arg1 ^ $$arg2 		C	10$/;"	v
bool	sse_set/C_table_expanded.csv	/^logical	instruction	bool	bool,bool	AND_bool		1	1	$$arg1 && $$arg2		C	10$/;"	v
bool	sse_set/C_table_expanded.csv	/^logical	instruction	bool	bool,bool	EQ_bool		1	1	$$arg1 == $$arg2		C	10$/;"	v
bool	sse_set/C_table_expanded.csv	/^logical	instruction	bool	bool,bool	GE_bool		1	1	$$arg1 >= $$arg2		C	10$/;"	v
bool	sse_set/C_table_expanded.csv	/^logical	instruction	bool	bool,bool	GT_bool		1	1	$$arg1 > $$arg2		C	10$/;"	v
bool	sse_set/C_table_expanded.csv	/^logical	instruction	bool	bool,bool	LE_bool		1	1	$$arg1 <= $$arg2		C	10$/;"	v
bool	sse_set/C_table_expanded.csv	/^logical	instruction	bool	bool,bool	LT_bool		1	1	$$arg1 < $$arg2		C	10$/;"	v
bool	sse_set/C_table_expanded.csv	/^logical	instruction	bool	bool,bool	XOR_bool		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	AND_bool		1	1	$$arg1 & $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	AND_bool		128	128	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	AND_bool		16	16	$$arg1 & $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	AND_bool		2	2	$$arg1 & $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	AND_bool		32	32	$$arg1 & $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	AND_bool		4	4	$$arg1 & $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	AND_bool		64	64	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	AND_bool		8	8	$$arg1 & $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	EQ_bool		128	128	_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2))		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	EQ_bool		16	16	~($$arg1 ^ $$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	EQ_bool		2	2	~($$arg1 ^ $$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	EQ_bool		32	32	~($$arg1 ^ $$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	EQ_bool		4	4	~($$arg1 ^ $$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	EQ_bool		64	64	_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2))		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	EQ_bool		8	8	~($$arg1 ^ $$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GE_bool		128	128	_mm_or_si128($$arg1, _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GE_bool		16	16	$$arg1 | (~($$arg1 ^ $$arg2))		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GE_bool		2	2	$$arg1 | (~($$arg1 ^ $$arg2))		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GE_bool		32	32	$$arg1 | (~($$arg1 ^ $$arg2))		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GE_bool		4	4	$$arg1 | (~($$arg1 ^ $$arg2))		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GE_bool		64	64	_mm_or_si128($$arg1, _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GE_bool		8	8	$$arg1 | (~($$arg1 ^ $$arg2))		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GT_bool		128	128	_mm_and_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg2))		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GT_bool		16	16	$$arg1 & (~$$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GT_bool		2	2	$$arg1 & (~$$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GT_bool		32	32	$$arg1 & (~$$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GT_bool		4	4	$$arg1 & (~$$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GT_bool		64	64	_mm_and_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg2))		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	GT_bool		8	8	$$arg1 & (~$$arg2)		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	LE_bool		128	128	_mm_or_si128($$arg2, _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	LE_bool		16	16	$$arg2 | (~($$arg1 ^ $$arg2))		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	LE_bool		32	32	$$arg2 | (~($$arg1 ^ $$arg2))		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	LE_bool		4	4	$$arg2 | (~($$arg1 ^ $$arg2))		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	LE_bool		64	64	_mm_or_si128($$arg2, _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	LE_bool		8	8	$$arg2 | (~($$arg1 ^ $$arg2))		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	XOR_bool		1	1	$$arg1 ^ $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	XOR_bool		128	128	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	XOR_bool		16	16	$$arg1 ^ $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	XOR_bool		2	2	$$arg1 ^ $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	XOR_bool		32	32	$$arg1 ^ $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	XOR_bool		4	4	$$arg1 ^ $$arg2		C	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	XOR_bool		64	64	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
bool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	bool	bool,bool	XOR_bool		8	8	$$arg1 ^ $$arg2		C	5$/;"	v
br_ct	proxy.h	/^      template <typename U> struct br_ct  { typedef decltype(std::declval<T const>()[std::declval<U>()]) type; };$/;"	s	class:ctb::proxy_	access:private
br_t	proxy.h	/^      template <typename U> struct br_t { typedef decltype(std::declval<T      >()[std::declval<U>()]) type; };$/;"	s	class:ctb::proxy_	access:private
buffer	writer.h	/^        std::string buffer; \/** serves as an intermediate buffer for multiple processing phases*\/$/;"	m	class:ctb::writer	access:private
calculate	parser.h	/^      static int calculate(const std::string&);$/;"	p	class:ctb::parser	access:public	signature:(const std::string&)
calculate	parser.h	/^  int parser::calculate(const std::string& s)$/;"	f	class:ctb::parser	signature:(const std::string& s)
calculate_distances	graph.h	/^        void calculate_distances(); \/**performs bellman-ford algorithm *\/$/;"	p	class:ctb::graph_generic	access:public	signature:()
calculate_distances	graph.h	/^    void graph_generic<T,I,directed,O...>::calculate_distances()  $/;"	f	class:ctb::graph_generic	signature:()
cartesian_multiplier	cartesian_multiplier.h	/^      cartesian_multiplier();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
cartesian_multiplier	cartesian_multiplier.h	/^    cartesian_multiplier<T>::cartesian_multiplier() : end_b(true)$/;"	f	class:ctb::cartesian_multiplier	signature:()
cartesian_multiplier	cartesian_multiplier.h	/^   class cartesian_multiplier : std::forward_iterator_tag$/;"	c	namespace:ctb	inherits:std::forward_iterator_tag
cartesian_multiplier_default	cartesian_multiplier.h	/^  typedef cartesian_multiplier<std::vector<int> > cartesian_multiplier_default;$/;"	t	namespace:ctb
cartesian_test	writer.h	/^        \/*static*\/   static void cartesian_test() ;$/;"	p	class:ctb::writer	access:public	signature:()
cartesian_test	writer.h	/^    void writer<M,I,O,P>::cartesian_test()$/;"	f	class:ctb::writer	signature:()
ccBW	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccCode1	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccCode2	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccCodeCustom	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccCodeGeneric	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccNote	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccRating	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccTId	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccTag	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccType	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccWIn	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ccWOut	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
check_pos_alias	aliasenv_generator.h	/^      static bool check_pos_alias(const std::string& name, const std::string& a, int offset);$/;"	p	class:ctb::aliasenv_generator	access:protected	signature:(const std::string& name, const std::string& a, int offset)
check_pos_alias	aliasenv_generator.h	/^  bool aliasenv_generator::check_pos_alias(const std::string& name, const std::string& a, int offset)$/;"	f	class:ctb::aliasenv_generator	signature:(const std::string& name, const std::string& a, int offset)
ciCode	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciCodeCustom	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciFlags	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciInTypes	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciNote	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciOpId	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciOutType	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciRating	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciTag	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciType	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciWIn	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ciWOut	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
clear	aliasenv_maker.h	/^        static void clear();$/;"	p	class:ctb::aliasenv_maker	access:public	signature:()
clear	aliasenv_maker.h	/^    void aliasenv_maker<T,L,R>::clear()$/;"	f	class:ctb::aliasenv_maker	signature:()
clear	generator.h	/^        void clear();$/;"	p	class:ctb::generator	access:public	signature:()
clear	generator.h	/^    void generator<T,IT>::clear()  $/;"	f	class:ctb::generator	signature:()
clear	graph.h	/^        void clear();$/;"	p	class:ctb::graph_generic	access:public	signature:()
clear	graph.h	/^    void graph_generic<T,I,directed,O...>::clear()$/;"	f	class:ctb::graph_generic	signature:()
clear	instructions.h	/^        void clear(bool tags = false) ;$/;"	p	class:ctb::instruction_table	access:public	signature:(bool tags = false)
clear	instructions.h	/^    void instruction_table<T>::clear(bool tags)$/;"	f	class:ctb::instruction_table	signature:(bool tags)
clear	tagmaster.h	/^        void clear();$/;"	p	class:ctb::tagmaster	access:public	signature:()
clear	tagmaster.h	/^  void tagmaster<F>::clear()$/;"	f	class:ctb::tagmaster	signature:()
clear	writer.h	/^        \/*others*\/   void clear() ;$/;"	p	class:ctb::writer	access:public	signature:()
clear	writer.h	/^    void writer<M,I,O,P>::clear()  $/;"	f	class:ctb::writer	signature:()
cmdline_old	ctb.h	/^        int cmdline_old(int count, char ** args);$/;"	p	class:ctb::ctb	access:public	signature:(int count, char ** args)
cmdline_old	ctb.h	/^    int ctb<T,IT>::cmdline_old(int count, char ** args)$/;"	f	class:ctb::ctb	signature:(int count, char ** args)
code	instructions.h	/^              const std::string code;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
code	instructions.h	/^              const std::string code;$/;"	m	struct:ctb::instruction_table::type::type_version	access:public
code1	instructions.h	/^              const std::string code1;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
code2	instructions.h	/^              const std::string code2;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
code_custom	instructions.h	/^              const std::string code_custom;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
code_custom	instructions.h	/^              const std::string code_custom;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
code_generic	instructions.h	/^              const std::string code_generic;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
col_in_$1	templates/bobox_decl_in.h	/^static const bobox::column_index_type col_in_$1( $1);$/;"	p	signature:( $1)
col_out_$1	templates/bobox_decl_out.h	/^static const bobox::column_index_type col_out_$1( $1);$/;"	p	signature:( $1)
cols_conversion	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	g	class:ctb::csv_loader	access:private
cols_instruction	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	g	class:ctb::csv_loader	access:private
cols_version	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	g	class:ctb::csv_loader	access:private
command_adddebug	ctb.h	/^        void command_adddebug(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
command_adddebug	ctb.h	/^    void ctb<T,IT>::command_adddebug(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
command_generate	ctb.h	/^        void command_generate(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
command_generate	ctb.h	/^    void ctb<T,IT>::command_generate(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
command_help	ctb.h	/^        void command_help(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
command_help	ctb.h	/^    void ctb<T,IT>::command_help(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
command_io	ctb.h	/^        template<functor_id I, typename F, bool input> void command_io(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
command_io	ctb.h	/^    template<functor_id I, typename F, bool input> void ctb<T,IT>::command_io(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
command_record	ctb.h	/^        typedef std::pair<std::function<void(stringlist&&)>,std::string> command_record;$/;"	t	class:ctb::ctb	access:private
command_source	ctb.h	/^        void command_source(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
command_source	ctb.h	/^    void ctb<T,IT>::command_source(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
command_stream_cmdline	ctb.h	/^        int command_stream_cmdline(int count, char ** args);$/;"	p	class:ctb::ctb	access:public	signature:(int count, char ** args)
command_stream_cmdline	ctb.h	/^    int ctb<T,IT>::command_stream_cmdline(int count, char ** args)$/;"	f	class:ctb::ctb	signature:(int count, char ** args)
command_testgraph	ctb.h	/^        void command_testgraph(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
command_testgraph	ctb.h	/^    void ctb<T,IT>::command_testgraph(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
commit	writer.h	/^        template <dolar_mode dolars> void commit();$/;"	p	class:ctb::writer	access:private	signature:()
commit	writer.h	/^    void writer<M,I,O,P>::commit()$/;"	f	class:ctb::writer	signature:()
compiletest	generator.h	/^        bool compiletest; \/*abbreviated as plain 'c'*\/$/;"	m	class:ctb::generator	access:private
constant	cartesian_multiplier.h	/^      typedef cartesian_multiplier<const T> constant;$/;"	t	class:ctb::cartesian_multiplier	access:public
conversion	instructions.h	/^              conversion() = delete;$/;"	p	struct:ctb::instruction_table::type::conversion	access:public	signature:()
conversion	instructions.h	/^              conversion(int in, int out, const std::string& c1, const std::string& c2,const std::string&,const std::string&,const std::string&, const std::string&, int r, bool s);$/;"	p	struct:ctb::instruction_table::type::conversion	access:public	signature:(int in, int out, const std::string& c1, const std::string& c2,const std::string&,const std::string&,const std::string&, const std::string&, int r, bool s)
conversion	instructions.h	/^            struct conversion$/;"	s	class:ctb::instruction_table::type	access:private
conversion	instructions.h	/^    instruction_table<T>::type::conversion::conversion(int i, int o, const std::string& c1, const std::string& c2,const std::string& cc, const std::string& cg, const std::string& n,const std::string& t,int r, bool s) : width_in(i), width_out(o), code1(c1), code2(c2), code_custom(cc), code_generic(cg), note(n), tags(t), rating(r), satisfactory(s)$/;"	f	class:ctb::instruction_table::type::conversion	signature:(int i, int o, const std::string& c1, const std::string& c2,const std::string& cc, const std::string& cg, const std::string& n,const std::string& t,int r, bool s)
conversions	instructions.h	/^            \/*EAPI*\/proxy<std::vector<conversion>> conversions;$/;"	m	class:ctb::instruction_table::type	access:public
convert	conversions.h	/^  static A convert(const A& a){return a;};$/;"	f	struct:ctb::cvt	access:public	signature:(const A& a)
convert	conversions.h	/^  static B convert(const B&);$/;"	p	struct:ctb::cvt	access:public	signature:(const B&)
convert	conversions.h	/^  static int convert(const std::string& a)$/;"	f	struct:ctb::cvt	access:public	signature:(const std::string& a)
convert	conversions.h	/^template <> struct cvt<int,std::string> { static std::string convert(const int& a){return std::to_string(a);}; };$/;"	f	struct:ctb::cvt	access:public	signature:(const int& a)
cpo_save	.exrc	/^let s:cpo_save=&cpo$/;"	v
crawl	graph.h	/^            template <bool recurse = false, bool inverse = false> void crawl(std::function<bool(node*)> f, std::function<bool(node*)> g, std::queue<node*>* q = NULL); \/** see the documentation written in the actual code, for example see implementation of the calculate_distances() function *\/$/;"	p	class:ctb::graph_generic::node	access:public	signature:(std::function<bool(node*)> f, std::function<bool(node*)> g, std::queue<node*>* q = NULL)
crawl	graph.h	/^    void graph_generic<T,I,directed,O...>::node::crawl(std::function<bool(node*)> f, std::function<bool(node*)> g, std::queue<node*>* q)$/;"	f	class:ctb::graph_generic::node	signature:(std::function<bool(node*)> f, std::function<bool(node*)> g, std::queue<node*>* q)
crawl_topological	graph.h	/^            void crawl_topological(std::function<void(node*)> f); \/** this is an overload of crawl for topological search*\/$/;"	p	class:ctb::graph_generic::node	access:public	signature:(std::function<void(node*)> f)
crawl_topological	graph.h	/^        void crawl_topological(std::function<void(node*)> f); \/** this is an overload of crawl for topological search, may be also abbreviated as 'do f for each vertex'*\/$/;"	p	class:ctb::graph_generic	access:public	signature:(std::function<void(node*)> f)
crawl_topological	graph.h	/^    void graph_generic<T,I,directed,O...>::crawl_topological(std::function<void(node*)> f)$/;"	f	class:ctb::graph_generic	signature:(std::function<void(node*)> f)
crawl_topological	graph.h	/^    void graph_generic<T,I,directed,O...>::node::crawl_topological(std::function<void(node*)> f)$/;"	f	class:ctb::graph_generic::node	signature:(std::function<void(node*)> f)
csv_loader	loader_csv.h	/^    class csv_loader$/;"	c	namespace:ctb
csvloader_default	loader_csv.h	/^  typedef csv_loader<traits, generator_default, instruction_table_default> csvloader_default;$/;"	t	namespace:ctb
ctb	aliasenv_bobox.h	/^namespace ctb$/;"	n
ctb	aliasenv_generator.h	/^namespace ctb$/;"	n
ctb	aliasenv_maker.h	/^namespace ctb$/;"	n
ctb	aliasenv_simple.h	/^namespace ctb$/;"	n
ctb	aliasenv_simu.h	/^namespace ctb$/;"	n
ctb	cartesian_multiplier.h	/^namespace ctb$/;"	n
ctb	conversions.h	/^namespace ctb$/;"	n
ctb	ctb.h	/^        ctb();$/;"	p	class:ctb::ctb	access:public	signature:()
ctb	ctb.h	/^        ctb(const ctb&) = delete;$/;"	p	class:ctb::ctb	access:public	signature:(const ctb&)
ctb	ctb.h	/^        ctb(ctb&&) = delete;$/;"	p	class:ctb::ctb	access:public	signature:(ctb&&)
ctb	ctb.h	/^    class ctb$/;"	c	namespace:ctb
ctb	ctb.h	/^    ctb<T,IT>::ctb() : instab(), mygenerator(instab), hash_aliasenv(), hash_loader()$/;"	f	class:ctb::ctb	signature:()
ctb	ctb.h	/^namespace ctb$/;"	n
ctb	datatypes.h	/^namespace ctb$/;"	n
ctb	errorhandling.h	/^namespace ctb$/;"	n
ctb	generator.h	/^namespace ctb$/;"	n
ctb	graph.h	/^namespace ctb$/;"	n
ctb	instructions.h	/^namespace ctb$/;"	n
ctb	languages.h	/^namespace ctb$/;"	n
ctb	loader_csv.h	/^namespace ctb$/;"	n
ctb	loader_test.h	/^namespace ctb$/;"	n
ctb	loader_xml.h	/^namespace ctb$/;"	n
ctb	parser.h	/^namespace ctb$/;"	n
ctb	proxy.h	/^namespace ctb$/;"	n
ctb	split.h	/^namespace ctb$/;"	n
ctb	taghandler.h	/^namespace ctb$/;"	n
ctb	tagmaster.h	/^namespace ctb$/;"	n
ctb	writer.h	/^namespace ctb$/;"	n
ctb::aliasenv_bobox	aliasenv_bobox.h	/^  class aliasenv_bobox : public aliasenv_generator$/;"	c	namespace:ctb	inherits:aliasenv_generator
ctb::aliasenv_bobox::alias	aliasenv_bobox.h	/^      static std::string alias(const std::string& a, bool* s = NULL);$/;"	p	class:ctb::aliasenv_bobox	access:public	signature:(const std::string& a, bool* s = NULL)
ctb::aliasenv_bobox::alias	aliasenv_bobox.h	/^  std::string aliasenv_bobox::alias(const std::string& a, bool* s)$/;"	f	class:ctb::aliasenv_bobox	signature:(const std::string& a, bool* s)
ctb::aliasenv_bobox::aliases	aliasenv_bobox.h	/^      static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_bobox	access:protected
ctb::aliasenv_bobox::aliases	aliasenv_bobox.h	/^  std::map<std::string, std::string> aliasenv_bobox::aliases;$/;"	m	class:ctb::aliasenv_bobox
ctb::aliasenv_bobox::aliastab_t	aliasenv_bobox.h	/^      typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_bobox	access:protected
ctb::aliasenv_bobox::generate	aliasenv_bobox.h	/^      template <class G> static writer<aliasenv_bobox> generate(int m,  G& generator, std::string name);$/;"	p	class:ctb::aliasenv_bobox	access:public	signature:(int m, G& generator, std::string name)
ctb::aliasenv_bobox::generate	aliasenv_bobox.h	/^    writer<aliasenv_bobox> aliasenv_bobox::generate(int granularity, G& generator, std::string name)$/;"	f	class:ctb::aliasenv_bobox	signature:(int granularity, G& generator, std::string name)
ctb::aliasenv_bobox::get_name	aliasenv_bobox.h	/^      static std::string get_name();$/;"	p	class:ctb::aliasenv_bobox	access:public	signature:()
ctb::aliasenv_bobox::get_name	aliasenv_bobox.h	/^  std::string aliasenv_bobox::get_name()$/;"	f	class:ctb::aliasenv_bobox	signature:()
ctb::aliasenv_bobox::init	aliasenv_bobox.h	/^      static void init();$/;"	p	class:ctb::aliasenv_bobox	access:protected	signature:()
ctb::aliasenv_bobox::init	aliasenv_bobox.h	/^  void aliasenv_bobox::init()$/;"	f	class:ctb::aliasenv_bobox	signature:()
ctb::aliasenv_bobox::language	aliasenv_bobox.h	/^      typedef language_cpp language;$/;"	t	class:ctb::aliasenv_bobox	access:public
ctb::aliasenv_empty	writer.h	/^  typedef aliasenv_maker<empty_tag, language_empty> aliasenv_empty;$/;"	t	namespace:ctb
ctb::aliasenv_empty_cpp	writer.h	/^  typedef aliasenv_maker<empty_tag, language_cpp> aliasenv_empty_cpp;$/;"	t	namespace:ctb
ctb::aliasenv_generator	aliasenv_generator.h	/^  class aliasenv_generator $/;"	c	namespace:ctb
ctb::aliasenv_generator::alias	aliasenv_generator.h	/^      static std::string alias(const std::string& a, bool* s = NULL, int n = -1);$/;"	p	class:ctb::aliasenv_generator	access:public	signature:(const std::string& a, bool* s = NULL, int n = -1)
ctb::aliasenv_generator::alias	aliasenv_generator.h	/^  std::string aliasenv_generator::alias(const std::string& a, bool* s, int n)$/;"	f	class:ctb::aliasenv_generator	signature:(const std::string& a, bool* s, int n)
ctb::aliasenv_generator::aliases	aliasenv_generator.h	/^      static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_generator	access:protected
ctb::aliasenv_generator::aliases	aliasenv_generator.h	/^  std::map<std::string, std::string> aliasenv_generator::aliases;$/;"	m	class:ctb::aliasenv_generator
ctb::aliasenv_generator::aliastab_t	aliasenv_generator.h	/^      typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_generator	access:protected
ctb::aliasenv_generator::check_pos_alias	aliasenv_generator.h	/^      static bool check_pos_alias(const std::string& name, const std::string& a, int offset);$/;"	p	class:ctb::aliasenv_generator	access:protected	signature:(const std::string& name, const std::string& a, int offset)
ctb::aliasenv_generator::check_pos_alias	aliasenv_generator.h	/^  bool aliasenv_generator::check_pos_alias(const std::string& name, const std::string& a, int offset)$/;"	f	class:ctb::aliasenv_generator	signature:(const std::string& name, const std::string& a, int offset)
ctb::aliasenv_generator::generate	aliasenv_generator.h	/^      template <class G> static writer<aliasenv_generator> generate(int m,  G& graph, std::string name) ;$/;"	p	class:ctb::aliasenv_generator	access:public	signature:(int m, G& graph, std::string name)
ctb::aliasenv_generator::generate	aliasenv_generator.h	/^    writer<aliasenv_generator> aliasenv_generator::generate(int max_granularity, G& graph, std::string name)$/;"	f	class:ctb::aliasenv_generator	signature:(int max_granularity, G& graph, std::string name)
ctb::aliasenv_generator::init	aliasenv_generator.h	/^      static void init();$/;"	p	class:ctb::aliasenv_generator	access:protected	signature:()
ctb::aliasenv_generator::init	aliasenv_generator.h	/^  void aliasenv_generator::init()$/;"	f	class:ctb::aliasenv_generator	signature:()
ctb::aliasenv_generator::language	aliasenv_generator.h	/^      typedef language_empty language;$/;"	t	class:ctb::aliasenv_generator	access:public
ctb::aliasenv_maker	aliasenv_maker.h	/^    class aliasenv_maker$/;"	c	namespace:ctb
ctb::aliasenv_maker::access	aliasenv_maker.h	/^        static std::string& access(const std::string&);$/;"	p	class:ctb::aliasenv_maker	access:public	signature:(const std::string&)
ctb::aliasenv_maker::access	aliasenv_maker.h	/^    std::string& aliasenv_maker<T,L,R>::access(const std::string& str)$/;"	f	class:ctb::aliasenv_maker	signature:(const std::string& str)
ctb::aliasenv_maker::alias	aliasenv_maker.h	/^        static std::string alias(const std::string& a, bool* success = NULL);$/;"	p	class:ctb::aliasenv_maker	access:public	signature:(const std::string& a, bool* success = NULL)
ctb::aliasenv_maker::alias	aliasenv_maker.h	/^    std::string aliasenv_maker<T,L,R>::alias(const std::string& a, bool* s)$/;"	f	class:ctb::aliasenv_maker	signature:(const std::string& a, bool* s)
ctb::aliasenv_maker::aliases	aliasenv_maker.h	/^        static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_maker	access:protected
ctb::aliasenv_maker::aliases	aliasenv_maker.h	/^  template <typename T, typename L, bool R> std::map<std::string, std::string> aliasenv_maker<T,L,R>::aliases;$/;"	m	class:ctb::aliasenv_maker
ctb::aliasenv_maker::aliastab_t	aliasenv_maker.h	/^        typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_maker	access:protected
ctb::aliasenv_maker::clear	aliasenv_maker.h	/^        static void clear();$/;"	p	class:ctb::aliasenv_maker	access:public	signature:()
ctb::aliasenv_maker::clear	aliasenv_maker.h	/^    void aliasenv_maker<T,L,R>::clear()$/;"	f	class:ctb::aliasenv_maker	signature:()
ctb::aliasenv_maker::init	aliasenv_maker.h	/^        static void init();$/;"	p	class:ctb::aliasenv_maker	access:protected	signature:()
ctb::aliasenv_maker::init	aliasenv_maker.h	/^    void aliasenv_maker<T,L,R>::init()$/;"	f	class:ctb::aliasenv_maker	signature:()
ctb::aliasenv_maker::language	aliasenv_maker.h	/^        typedef L language;$/;"	t	class:ctb::aliasenv_maker	access:public
ctb::aliasenv_maker::noreport	aliasenv_maker.h	/^        typedef aliasenv_maker<T,L,false> noreport;$/;"	t	class:ctb::aliasenv_maker	access:public
ctb::aliasenv_simple	aliasenv_simple.h	/^  class aliasenv_simple : public aliasenv_generator$/;"	c	namespace:ctb	inherits:aliasenv_generator
ctb::aliasenv_simple::alias	aliasenv_simple.h	/^      static std::string alias(const std::string& a, bool* s = NULL);$/;"	p	class:ctb::aliasenv_simple	access:public	signature:(const std::string& a, bool* s = NULL)
ctb::aliasenv_simple::alias	aliasenv_simple.h	/^  std::string aliasenv_simple::alias(const std::string& a, bool* s)$/;"	f	class:ctb::aliasenv_simple	signature:(const std::string& a, bool* s)
ctb::aliasenv_simple::aliases	aliasenv_simple.h	/^      static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_simple	access:protected
ctb::aliasenv_simple::aliases	aliasenv_simple.h	/^  std::map<std::string, std::string> aliasenv_simple::aliases;$/;"	m	class:ctb::aliasenv_simple
ctb::aliasenv_simple::aliastab_t	aliasenv_simple.h	/^      typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_simple	access:protected
ctb::aliasenv_simple::generate	aliasenv_simple.h	/^      template <class G> static writer<aliasenv_simple> generate(int m,  G& generator, std::string name);$/;"	p	class:ctb::aliasenv_simple	access:public	signature:(int m, G& generator, std::string name)
ctb::aliasenv_simple::generate	aliasenv_simple.h	/^    writer<aliasenv_simple> aliasenv_simple::generate(int granularity, G& generator, std::string name)$/;"	f	class:ctb::aliasenv_simple	signature:(int granularity, G& generator, std::string name)
ctb::aliasenv_simple::get_name	aliasenv_simple.h	/^      static std::string get_name();$/;"	p	class:ctb::aliasenv_simple	access:public	signature:()
ctb::aliasenv_simple::get_name	aliasenv_simple.h	/^  std::string aliasenv_simple::get_name()$/;"	f	class:ctb::aliasenv_simple	signature:()
ctb::aliasenv_simple::init	aliasenv_simple.h	/^      static void init();$/;"	p	class:ctb::aliasenv_simple	access:protected	signature:()
ctb::aliasenv_simple::init	aliasenv_simple.h	/^  void aliasenv_simple::init()$/;"	f	class:ctb::aliasenv_simple	signature:()
ctb::aliasenv_simple::language	aliasenv_simple.h	/^      typedef language_cpp language;$/;"	t	class:ctb::aliasenv_simple	access:public
ctb::aliasenv_simu	aliasenv_simu.h	/^  class aliasenv_simu : public aliasenv_generator$/;"	c	namespace:ctb	inherits:aliasenv_generator
ctb::aliasenv_simu::alias	aliasenv_simu.h	/^      static std::string alias(const std::string& a, bool* s = NULL);$/;"	p	class:ctb::aliasenv_simu	access:public	signature:(const std::string& a, bool* s = NULL)
ctb::aliasenv_simu::alias	aliasenv_simu.h	/^  std::string aliasenv_simu::alias(const std::string& a, bool* s)$/;"	f	class:ctb::aliasenv_simu	signature:(const std::string& a, bool* s)
ctb::aliasenv_simu::aliases	aliasenv_simu.h	/^      static aliastab_t aliases;$/;"	m	class:ctb::aliasenv_simu	access:protected
ctb::aliasenv_simu::aliases	aliasenv_simu.h	/^  std::map<std::string, std::string> aliasenv_simu::aliases;$/;"	m	class:ctb::aliasenv_simu
ctb::aliasenv_simu::aliastab_t	aliasenv_simu.h	/^      typedef std::map<std::string, std::string> aliastab_t;$/;"	t	class:ctb::aliasenv_simu	access:protected
ctb::aliasenv_simu::generate	aliasenv_simu.h	/^      template <class G> static writer<aliasenv_simu> generate(int m,  G& generator, std::string name);$/;"	p	class:ctb::aliasenv_simu	access:public	signature:(int m, G& generator, std::string name)
ctb::aliasenv_simu::generate	aliasenv_simu.h	/^      writer<aliasenv_simu> aliasenv_simu::generate(int granularity, G& generator, std::string name)$/;"	f	class:ctb::aliasenv_simu	signature:(int granularity, G& generator, std::string name)
ctb::aliasenv_simu::generate_body	aliasenv_simu.h	/^      template <class G> static writer<aliasenv_simu> generate_body(int m,  G& generator, std::string name);$/;"	p	class:ctb::aliasenv_simu	access:protected	signature:(int m, G& generator, std::string name)
ctb::aliasenv_simu::generate_body	aliasenv_simu.h	/^    writer<aliasenv_simu> aliasenv_simu::generate_body(int granularity, G& generator, std::string name)$/;"	f	class:ctb::aliasenv_simu	signature:(int granularity, G& generator, std::string name)
ctb::aliasenv_simu::get_name	aliasenv_simu.h	/^      static std::string get_name();$/;"	p	class:ctb::aliasenv_simu	access:public	signature:()
ctb::aliasenv_simu::get_name	aliasenv_simu.h	/^  std::string aliasenv_simu::get_name()$/;"	f	class:ctb::aliasenv_simu	signature:()
ctb::aliasenv_simu::init	aliasenv_simu.h	/^      static void init();$/;"	p	class:ctb::aliasenv_simu	access:protected	signature:()
ctb::aliasenv_simu::init	aliasenv_simu.h	/^  void aliasenv_simu::init()$/;"	f	class:ctb::aliasenv_simu	signature:()
ctb::aliasenv_simu::language	aliasenv_simu.h	/^      typedef language_cpp language;$/;"	t	class:ctb::aliasenv_simu	access:public
ctb::cartesian_multiplier	cartesian_multiplier.h	/^   class cartesian_multiplier : std::forward_iterator_tag$/;"	c	namespace:ctb	inherits:std::forward_iterator_tag
ctb::cartesian_multiplier::add	cartesian_multiplier.h	/^      void add(T&);$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:(T&)
ctb::cartesian_multiplier::add	cartesian_multiplier.h	/^  void cartesian_multiplier<T>::add(T& t)$/;"	f	class:ctb::cartesian_multiplier	signature:(T& t)
ctb::cartesian_multiplier::begin	cartesian_multiplier.h	/^      cartesian_multiplier begin();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
ctb::cartesian_multiplier::begin	cartesian_multiplier.h	/^      cartesian_multiplier::constant begin() const;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:() const
ctb::cartesian_multiplier::begin	cartesian_multiplier.h	/^  cartesian_multiplier<T> cartesian_multiplier<T>::begin()$/;"	f	class:ctb::cartesian_multiplier	signature:()
ctb::cartesian_multiplier::begin	cartesian_multiplier.h	/^  typename cartesian_multiplier<T>::constant cartesian_multiplier<T>::begin() const$/;"	f	class:ctb::cartesian_multiplier	signature:() const
ctb::cartesian_multiplier::begins	cartesian_multiplier.h	/^      itr begins;$/;"	m	class:ctb::cartesian_multiplier	access:private
ctb::cartesian_multiplier::cartesian_multiplier	cartesian_multiplier.h	/^      cartesian_multiplier();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
ctb::cartesian_multiplier::cartesian_multiplier	cartesian_multiplier.h	/^    cartesian_multiplier<T>::cartesian_multiplier() : end_b(true)$/;"	f	class:ctb::cartesian_multiplier	signature:()
ctb::cartesian_multiplier::constant	cartesian_multiplier.h	/^      typedef cartesian_multiplier<const T> constant;$/;"	t	class:ctb::cartesian_multiplier	access:public
ctb::cartesian_multiplier::end	cartesian_multiplier.h	/^      cartesian_multiplier end();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
ctb::cartesian_multiplier::end	cartesian_multiplier.h	/^      cartesian_multiplier::constant end() const;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:() const
ctb::cartesian_multiplier::end	cartesian_multiplier.h	/^    cartesian_multiplier<T> cartesian_multiplier<T>::end()$/;"	f	class:ctb::cartesian_multiplier	signature:()
ctb::cartesian_multiplier::end	cartesian_multiplier.h	/^    typename cartesian_multiplier<T>::constant cartesian_multiplier<T>::end() const$/;"	f	class:ctb::cartesian_multiplier	signature:() const
ctb::cartesian_multiplier::end_b	cartesian_multiplier.h	/^      bool end_b;$/;"	m	class:ctb::cartesian_multiplier	access:private
ctb::cartesian_multiplier::ends	cartesian_multiplier.h	/^      itr ends;$/;"	m	class:ctb::cartesian_multiplier	access:private
ctb::cartesian_multiplier::iterator	cartesian_multiplier.h	/^      typedef itr iterator;$/;"	t	class:ctb::cartesian_multiplier	access:public
ctb::cartesian_multiplier::itr	cartesian_multiplier.h	/^      typedef std::vector<typename T::iterator> itr;$/;"	t	class:ctb::cartesian_multiplier	access:private
ctb::cartesian_multiplier::middles	cartesian_multiplier.h	/^      itr middles;$/;"	m	class:ctb::cartesian_multiplier	access:private
ctb::cartesian_multiplier::operator !=	cartesian_multiplier.h	/^      bool operator!=(const cartesian_multiplier&)const ;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:(const cartesian_multiplier&) const
ctb::cartesian_multiplier::operator !=	cartesian_multiplier.h	/^    bool cartesian_multiplier<T>::operator!=(const cartesian_multiplier& c) const$/;"	f	class:ctb::cartesian_multiplier	signature:(const cartesian_multiplier& c) const
ctb::cartesian_multiplier::operator *	cartesian_multiplier.h	/^      const iterator& operator*() const;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:() const
ctb::cartesian_multiplier::operator *	cartesian_multiplier.h	/^      iterator& operator*();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
ctb::cartesian_multiplier::operator *	cartesian_multiplier.h	/^   const typename cartesian_multiplier<T>::iterator& cartesian_multiplier<T>::operator*() const$/;"	f	class:ctb::cartesian_multiplier	signature:() const
ctb::cartesian_multiplier::operator *	cartesian_multiplier.h	/^   typename cartesian_multiplier<T>::iterator& cartesian_multiplier<T>::operator*()$/;"	f	class:ctb::cartesian_multiplier	signature:()
ctb::cartesian_multiplier::operator ++	cartesian_multiplier.h	/^    cartesian_multiplier<T>& cartesian_multiplier<T>::operator++()$/;"	f	class:ctb::cartesian_multiplier	signature:()
ctb::cartesian_multiplier::operator ++	cartesian_multiplier.h	/^cartesian_multiplier& operator++();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
ctb::cartesian_multiplier::operator ->	cartesian_multiplier.h	/^      const iterator* operator->() const;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:() const
ctb::cartesian_multiplier::operator ->	cartesian_multiplier.h	/^      iterator* operator->();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
ctb::cartesian_multiplier::operator ->	cartesian_multiplier.h	/^    const typename cartesian_multiplier<T>::iterator* cartesian_multiplier<T>::operator->() const$/;"	f	class:ctb::cartesian_multiplier	signature:() const
ctb::cartesian_multiplier::operator ->	cartesian_multiplier.h	/^    typename cartesian_multiplier<T>::iterator* cartesian_multiplier<T>::operator->()$/;"	f	class:ctb::cartesian_multiplier	signature:()
ctb::cartesian_multiplier::operator ==	cartesian_multiplier.h	/^      bool operator==(const cartesian_multiplier&)const ;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:(const cartesian_multiplier&) const
ctb::cartesian_multiplier::operator ==	cartesian_multiplier.h	/^    bool cartesian_multiplier<T>::operator==(const cartesian_multiplier& c) const$/;"	f	class:ctb::cartesian_multiplier	signature:(const cartesian_multiplier& c) const
ctb::cartesian_multiplier::reset	cartesian_multiplier.h	/^      void reset();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
ctb::cartesian_multiplier::reset	cartesian_multiplier.h	/^  void cartesian_multiplier<T>::reset()$/;"	f	class:ctb::cartesian_multiplier	signature:()
ctb::cartesian_multiplier::self_test	cartesian_multiplier.h	/^      static void self_test();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
ctb::cartesian_multiplier::self_test	cartesian_multiplier.h	/^      void cartesian_multiplier<T>::self_test()$/;"	f	class:ctb::cartesian_multiplier	signature:()
ctb::cartesian_multiplier_default	cartesian_multiplier.h	/^  typedef cartesian_multiplier<std::vector<int> > cartesian_multiplier_default;$/;"	t	namespace:ctb
ctb::csv_loader	loader_csv.h	/^    class csv_loader$/;"	c	namespace:ctb
ctb::csv_loader::ccBW	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccCode1	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccCode2	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccCodeCustom	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccCodeGeneric	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccNote	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccRating	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccTId	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccTag	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccType	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccWIn	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ccWOut	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	e	enum:ctb::csv_loader::cols_conversion
ctb::csv_loader::ciCode	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciCodeCustom	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciFlags	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciInTypes	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciNote	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciOpId	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciOutType	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciRating	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciTag	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciType	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciWIn	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::ciWOut	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	e	enum:ctb::csv_loader::cols_instruction
ctb::csv_loader::cols_conversion	loader_csv.h	/^        enum cols_conversion  {ccNote,ccType,ccTId,ccBW,ccWIn,ccWOut,ccCode1,ccCode2,ccCodeCustom,ccCodeGeneric,ccTag,ccRating};$/;"	g	class:ctb::csv_loader	access:private
ctb::csv_loader::cols_instruction	loader_csv.h	/^        enum cols_instruction {ciNote,ciType,ciOutType,ciInTypes,ciOpId,ciFlags,ciWIn,ciWOut,ciCode,ciCodeCustom,ciTag,ciRating};$/;"	g	class:ctb::csv_loader	access:private
ctb::csv_loader::cols_version	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	g	class:ctb::csv_loader	access:private
ctb::csv_loader::cvBW	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
ctb::csv_loader::cvCode	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
ctb::csv_loader::cvNote	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
ctb::csv_loader::cvTId	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
ctb::csv_loader::cvType	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
ctb::csv_loader::cvW	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
ctb::csv_loader::empty	loader_csv.h	/^        static bool empty(const std::string& line);$/;"	p	class:ctb::csv_loader	access:private	signature:(const std::string& line)
ctb::csv_loader::empty	loader_csv.h	/^    bool csv_loader<T,G,IT,D>::empty(const std::string& line)$/;"	f	class:ctb::csv_loader	signature:(const std::string& line)
ctb::csv_loader::export_graph	loader_csv.h	/^        void export_graph(G& instab, std::ostream&) ;$/;"	p	class:ctb::csv_loader	access:public	signature:(G& instab, std::ostream&)
ctb::csv_loader::export_graph	loader_csv.h	/^    void csv_loader<T,G,IT,D>::export_graph(G& graph, std::ostream&)$/;"	f	class:ctb::csv_loader	signature:(G& graph, std::ostream&)
ctb::csv_loader::export_instab	loader_csv.h	/^        void export_instab(IT& instab, std::ostream&) ;$/;"	p	class:ctb::csv_loader	access:public	signature:(IT& instab, std::ostream&)
ctb::csv_loader::export_instab	loader_csv.h	/^    void csv_loader<T,G,IT,D>::export_instab(IT& instab, std::ostream& s)$/;"	f	class:ctb::csv_loader	signature:(IT& instab, std::ostream& s)
ctb::csv_loader::flags	loader_csv.h	/^        static std::map<std::string, int> flags;$/;"	m	class:ctb::csv_loader	access:private
ctb::csv_loader::get_name	loader_csv.h	/^        static std::string get_name();$/;"	p	class:ctb::csv_loader	access:public	signature:()
ctb::csv_loader::get_name	loader_csv.h	/^    std::string csv_loader<T,G,IT,D>::get_name()$/;"	f	class:ctb::csv_loader	signature:()
ctb::csv_loader::insert	loader_csv.h	/^        static void insert(IT& instab, std::string line);$/;"	p	class:ctb::csv_loader	access:private	signature:(IT& instab, std::string line)
ctb::csv_loader::insert	loader_csv.h	/^    void csv_loader<T,G,IT,D>::insert(IT& instab, std::string line)$/;"	f	class:ctb::csv_loader	signature:(IT& instab, std::string line)
ctb::csv_loader::load_graph	loader_csv.h	/^        void load_graph(G& graph, std::istream&) ;$/;"	p	class:ctb::csv_loader	access:public	signature:(G& graph, std::istream&)
ctb::csv_loader::load_graph	loader_csv.h	/^    void csv_loader<T,G,IT,D>::load_graph(G& graph, std::istream&)$/;"	f	class:ctb::csv_loader	signature:(G& graph, std::istream&)
ctb::csv_loader::load_instab	loader_csv.h	/^        void load_instab(IT& instab, std::istream&) ;$/;"	p	class:ctb::csv_loader	access:public	signature:(IT& instab, std::istream&)
ctb::csv_loader::load_instab	loader_csv.h	/^    void csv_loader<T,G,IT,D>::load_instab(IT& instab, std::istream& s)$/;"	f	class:ctb::csv_loader	signature:(IT& instab, std::istream& s)
ctb::csv_loader::preprocessline	loader_csv.h	/^        static writer_plain preprocessline(std::string line);$/;"	p	class:ctb::csv_loader	access:private	signature:(std::string line)
ctb::csv_loader::preprocessline	loader_csv.h	/^    writer_plain csv_loader<T,G,IT,D>::preprocessline(std::string line)$/;"	f	class:ctb::csv_loader	signature:(std::string line)
ctb::csv_loader::process	loader_csv.h	/^        static void process(IT& instab, std::istream& s);$/;"	p	class:ctb::csv_loader	access:private	signature:(IT& instab, std::istream& s)
ctb::csv_loader::process	loader_csv.h	/^    void csv_loader<T,G,IT,D>::process(IT& instab, std::istream& s)$/;"	f	class:ctb::csv_loader	signature:(IT& instab, std::istream& s)
ctb::csv_loader::self_test	loader_csv.h	/^        static void self_test() ;$/;"	p	class:ctb::csv_loader	access:public	signature:()
ctb::csv_loader::self_test	loader_csv.h	/^    void csv_loader<T,G,IT,D>::self_test()$/;"	f	class:ctb::csv_loader	signature:()
ctb::csvloader_default	loader_csv.h	/^  typedef csv_loader<traits, generator_default, instruction_table_default> csvloader_default;$/;"	t	namespace:ctb
ctb::ctb	ctb.h	/^    class ctb$/;"	c	namespace:ctb
ctb::ctb::aliasenv_record	ctb.h	/^        typedef std::function<std::string(std::string)> aliasenv_record;$/;"	t	class:ctb::ctb	access:private
ctb::ctb::cmdline_old	ctb.h	/^        int cmdline_old(int count, char ** args);$/;"	p	class:ctb::ctb	access:public	signature:(int count, char ** args)
ctb::ctb::cmdline_old	ctb.h	/^    int ctb<T,IT>::cmdline_old(int count, char ** args)$/;"	f	class:ctb::ctb	signature:(int count, char ** args)
ctb::ctb::command_adddebug	ctb.h	/^        void command_adddebug(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
ctb::ctb::command_adddebug	ctb.h	/^    void ctb<T,IT>::command_adddebug(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
ctb::ctb::command_generate	ctb.h	/^        void command_generate(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
ctb::ctb::command_generate	ctb.h	/^    void ctb<T,IT>::command_generate(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
ctb::ctb::command_help	ctb.h	/^        void command_help(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
ctb::ctb::command_help	ctb.h	/^    void ctb<T,IT>::command_help(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
ctb::ctb::command_io	ctb.h	/^        template<functor_id I, typename F, bool input> void command_io(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
ctb::ctb::command_io	ctb.h	/^    template<functor_id I, typename F, bool input> void ctb<T,IT>::command_io(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
ctb::ctb::command_record	ctb.h	/^        typedef std::pair<std::function<void(stringlist&&)>,std::string> command_record;$/;"	t	class:ctb::ctb	access:private
ctb::ctb::command_source	ctb.h	/^        void command_source(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
ctb::ctb::command_source	ctb.h	/^    void ctb<T,IT>::command_source(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
ctb::ctb::command_stream_cmdline	ctb.h	/^        int command_stream_cmdline(int count, char ** args);$/;"	p	class:ctb::ctb	access:public	signature:(int count, char ** args)
ctb::ctb::command_stream_cmdline	ctb.h	/^    int ctb<T,IT>::command_stream_cmdline(int count, char ** args)$/;"	f	class:ctb::ctb	signature:(int count, char ** args)
ctb::ctb::command_testgraph	ctb.h	/^        void command_testgraph(stringlist&& args);$/;"	p	class:ctb::ctb	access:private	signature:(stringlist&& args)
ctb::ctb::command_testgraph	ctb.h	/^    void ctb<T,IT>::command_testgraph(stringlist&& args)$/;"	f	class:ctb::ctb	signature:(stringlist&& args)
ctb::ctb::ctb	ctb.h	/^        ctb();$/;"	p	class:ctb::ctb	access:public	signature:()
ctb::ctb::ctb	ctb.h	/^        ctb(const ctb&) = delete;$/;"	p	class:ctb::ctb	access:public	signature:(const ctb&)
ctb::ctb::ctb	ctb.h	/^        ctb(ctb&&) = delete;$/;"	p	class:ctb::ctb	access:public	signature:(ctb&&)
ctb::ctb::ctb	ctb.h	/^    ctb<T,IT>::ctb() : instab(), mygenerator(instab), hash_aliasenv(), hash_loader()$/;"	f	class:ctb::ctb	signature:()
ctb::ctb::export_graph	ctb.h	/^        template<template <typename ...> class L, typename...P> void        export_graph(P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(P....params)
ctb::ctb::export_graph	ctb.h	/^    template<template <typename ...> class L, typename...P> void ctb<T,IT>::export_graph(P...params)$/;"	f	class:ctb::ctb	signature:(P....params)
ctb::ctb::export_instab	ctb.h	/^        template<template <typename ...> class L, typename...P> void        export_instab(P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(P....params)
ctb::ctb::export_instab	ctb.h	/^    template<template <typename ...> class L, typename...P> void ctb<T,IT>::export_instab(P...params)$/;"	f	class:ctb::ctb	signature:(P....params)
ctb::ctb::fill	ctb.h	/^        void fill();$/;"	p	class:ctb::ctb	access:private	signature:()
ctb::ctb::fill	ctb.h	/^    void ctb<T,IT>::fill()$/;"	f	class:ctb::ctb	signature:()
ctb::ctb::fill_commands	ctb.h	/^        void fill_commands();$/;"	p	class:ctb::ctb	access:private	signature:()
ctb::ctb::fill_commands	ctb.h	/^    void ctb<T,IT>::fill_commands()$/;"	f	class:ctb::ctb	signature:()
ctb::ctb::generate	ctb.h	/^        template<typename M>                             std::string generate(std::string name) ;$/;"	p	class:ctb::ctb	access:public	signature:(std::string name)
ctb::ctb::generate	ctb.h	/^    std::string ctb<T,IT>::generate(std::string name)$/;"	f	class:ctb::ctb	signature:(std::string name)
ctb::ctb::generator_t	ctb.h	/^        typedef generator<T,IT> generator_t;$/;"	t	class:ctb::ctb	access:private
ctb::ctb::get_inner_name	ctb.h	/^        static std::string get_inner_name(std::string fname);$/;"	p	class:ctb::ctb	access:private	signature:(std::string fname)
ctb::ctb::get_inner_name	ctb.h	/^    std::string ctb<T,IT>::get_inner_name(std::string f)$/;"	f	class:ctb::ctb	signature:(std::string f)
ctb::ctb::get_prefix	ctb.h	/^        static std::string get_prefix(std::string fname);$/;"	p	class:ctb::ctb	access:private	signature:(std::string fname)
ctb::ctb::get_prefix	ctb.h	/^    std::string ctb<T,IT>::get_prefix(std::string f)$/;"	f	class:ctb::ctb	signature:(std::string f)
ctb::ctb::hash_aliasenv	ctb.h	/^        std::map<std::string, aliasenv_record> hash_aliasenv;$/;"	m	class:ctb::ctb	access:private
ctb::ctb::hash_command	ctb.h	/^        std::map<std::string, command_record> hash_command;$/;"	m	class:ctb::ctb	access:private
ctb::ctb::hash_loader	ctb.h	/^        std::map<std::string, loader_record> hash_loader;$/;"	m	class:ctb::ctb	access:private
ctb::ctb::help_cmdline_old	ctb.h	/^        void help_cmdline_old();$/;"	p	class:ctb::ctb	access:private	signature:()
ctb::ctb::help_cmdline_old	ctb.h	/^    void ctb<T,IT>::help_cmdline_old()$/;"	f	class:ctb::ctb	signature:()
ctb::ctb::help_command_stream	ctb.h	/^        void help_command_stream();$/;"	p	class:ctb::ctb	access:private	signature:()
ctb::ctb::help_command_stream	ctb.h	/^    void ctb<T,IT>::help_command_stream()$/;"	f	class:ctb::ctb	signature:()
ctb::ctb::instab	ctb.h	/^        IT instab;$/;"	m	class:ctb::ctb	access:private
ctb::ctb::load_graph	ctb.h	/^        template<template <typename ...> class L, typename...P> void        load_graph(P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(P....params)
ctb::ctb::load_graph	ctb.h	/^    template<template <typename ...> class L, typename...P> void ctb<T,IT>::load_graph(P...params)$/;"	f	class:ctb::ctb	signature:(P....params)
ctb::ctb::load_instab	ctb.h	/^        template<template <typename ...> class L, typename...P> void        load_instab(P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(P....params)
ctb::ctb::load_instab	ctb.h	/^    template<template <typename ...> class L, typename...P> void ctb<T,IT>::load_instab(P...params)$/;"	f	class:ctb::ctb	signature:(P....params)
ctb::ctb::loader_record	ctb.h	/^        typedef std::tuple< std::function<void(std::istream&)>, std::function<void(std::istream&)>, std::function<void(std::ostream&)>, std::function<void(std::ostream&)>> loader_record;$/;"	t	class:ctb::ctb	access:private
ctb::ctb::mygenerator	ctb.h	/^        generator_t mygenerator;$/;"	m	class:ctb::ctb	access:private
ctb::ctb::mytags	ctb.h	/^        std::shared_ptr<tagmaster<uint32_t>> mytags;$/;"	m	class:ctb::ctb	access:private
ctb::ctb::parse_command	ctb.h	/^        int parse_command(std::string);$/;"	p	class:ctb::ctb	access:public	signature:(std::string)
ctb::ctb::parse_command	ctb.h	/^    int ctb<T,IT>::parse_command(std::string line)$/;"	f	class:ctb::ctb	signature:(std::string line)
ctb::ctb::parse_command_stream	ctb.h	/^        int parse_command_stream(std::istream& );$/;"	p	class:ctb::ctb	access:public	signature:(std::istream& )
ctb::ctb::parse_command_stream	ctb.h	/^    int ctb<T,IT>::parse_command_stream(std::istream& stream)$/;"	f	class:ctb::ctb	signature:(std::istream& stream)
ctb::ctb::process	ctb.h	/^        template<template <typename ...> class L, typename M, typename...P> std::string process(std::string name, P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(std::string name, P...params)
ctb::ctb::process	ctb.h	/^    std::string ctb<T,IT>::process(std::string name, P...params)$/;"	f	class:ctb::ctb	signature:(std::string name, P...params)
ctb::ctb::register_aliasenv	ctb.h	/^        template<class M> void register_aliasenv() ;$/;"	p	class:ctb::ctb	access:public	signature:()
ctb::ctb::register_aliasenv	ctb.h	/^    template<class M> void ctb<T,IT>::register_aliasenv()$/;"	f	class:ctb::ctb	signature:()
ctb::ctb::register_command	ctb.h	/^        void register_command(const std::string& cmd, std::function<void(stringlist&&)> f, const std::string& description);$/;"	p	class:ctb::ctb	access:public	signature:(const std::string& cmd, std::function<void(stringlist&&)> f, const std::string& description)
ctb::ctb::register_command	ctb.h	/^  void ctb<T,IT>::register_command(const std::string& cmd, std::function<void(stringlist&&)> f, const std::string& description)$/;"	f	class:ctb::ctb	signature:(const std::string& cmd, std::function<void(stringlist&&)> f, const std::string& description)
ctb::ctb::register_loader	ctb.h	/^        template<template <typename ... > class L> void register_loader() ;$/;"	p	class:ctb::ctb	access:public	signature:()
ctb::ctb::register_loader	ctb.h	/^    template<template <typename...> class L> void ctb<T,IT>::register_loader()$/;"	f	class:ctb::ctb	signature:()
ctb::ctb::self_test	ctb.h	/^        static void self_test() ;$/;"	p	class:ctb::ctb	access:public	signature:()
ctb::ctb::self_test	ctb.h	/^    void ctb<T,IT>::self_test()$/;"	f	class:ctb::ctb	signature:()
ctb::ctb_default	ctb.h	/^  typedef ctb<traits, instruction_table<traits> > ctb_default;$/;"	t	namespace:ctb
ctb::cvt	conversions.h	/^struct cvt$/;"	s	namespace:ctb
ctb::cvt	conversions.h	/^struct cvt<A,A>$/;"	s	namespace:ctb
ctb::cvt	conversions.h	/^template <> struct cvt<int,std::string> { static std::string convert(const int& a){return std::to_string(a);}; };$/;"	s	namespace:ctb
ctb::cvt	conversions.h	/^template <> struct cvt<std::string,int>$/;"	s	namespace:ctb
ctb::cvt::convert	conversions.h	/^  static A convert(const A& a){return a;};$/;"	f	struct:ctb::cvt	access:public	signature:(const A& a)
ctb::cvt::convert	conversions.h	/^  static B convert(const B&);$/;"	p	struct:ctb::cvt	access:public	signature:(const B&)
ctb::cvt::convert	conversions.h	/^  static int convert(const std::string& a)$/;"	f	struct:ctb::cvt	access:public	signature:(const std::string& a)
ctb::cvt::convert	conversions.h	/^template <> struct cvt<int,std::string> { static std::string convert(const int& a){return std::to_string(a);}; };$/;"	f	struct:ctb::cvt	access:public	signature:(const int& a)
ctb::dEat	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	e	enum:ctb::dolar_mode
ctb::dExpand	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	e	enum:ctb::dolar_mode
ctb::dIgnore	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	e	enum:ctb::dolar_mode
ctb::dLet	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	e	enum:ctb::dolar_mode
ctb::delimiter	loader_csv.h	/^    struct delimiter$/;"	s	namespace:ctb
ctb::delimiter::value	loader_csv.h	/^      static const char value = D;$/;"	m	struct:ctb::delimiter	access:public
ctb::dolar_mode	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	g	namespace:ctb
ctb::dummy	proxy.h	/^  struct dummy$/;"	s	namespace:ctb
ctb::dummy::dummy	proxy.h	/^      dummy(D...t){};$/;"	f	struct:ctb::dummy	access:public	signature:(D....t)
ctb::dummy_friend	proxy.h	/^  struct dummy_friend$/;"	s	namespace:ctb
ctb::empty_tag	aliasenv_maker.h	/^  struct empty_tag{};$/;"	s	namespace:ctb
ctb::error	errorhandling.h	/^  void error(const std::string& e, bool critical = true)$/;"	f	namespace:ctb	signature:(const std::string& e, bool critical = true)
ctb::error_struct	errorhandling.h	/^  typedef std::pair<std::string,bool> error_struct;$/;"	t	namespace:ctb
ctb::exec_path	datatypes.h	/^  std::string exec_path;$/;"	m	namespace:ctb
ctb::fDEBUG	datatypes.h	/^    fINPUT = 1, fOUTPUT = 2, fDEBUG = 4$/;"	e	enum:ctb::flags
ctb::fINPUT	datatypes.h	/^    fINPUT = 1, fOUTPUT = 2, fDEBUG = 4$/;"	e	enum:ctb::flags
ctb::fOUTPUT	datatypes.h	/^    fINPUT = 1, fOUTPUT = 2, fDEBUG = 4$/;"	e	enum:ctb::flags
ctb::fideg	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	e	enum:ctb::functor_id
ctb::fidei	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	e	enum:ctb::functor_id
ctb::fidlg	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	e	enum:ctb::functor_id
ctb::fidli	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	e	enum:ctb::functor_id
ctb::fileexists	datatypes.h	/^  bool fileexists(const char *name)$/;"	f	namespace:ctb	signature:(const char *name)
ctb::fileexists	split.h	/^  bool fileexists(const char *name)$/;"	f	namespace:ctb	signature:(const char *name)
ctb::flags	datatypes.h	/^  enum flags $/;"	g	namespace:ctb
ctb::flags_to_string	datatypes.h	/^    std::string flags_to_string(F f)$/;"	f	namespace:ctb	signature:(F f)
ctb::friend_maker	proxy.h	/^    struct friend_maker$/;"	s	namespace:ctb
ctb::friend_maker::type	proxy.h	/^      typedef T type;$/;"	t	struct:ctb::friend_maker	access:public
ctb::functor_id	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	g	namespace:ctb
ctb::gONCE	datatypes.h	/^  enum maskmodes { gSELECT = 1, gPRINT = 2, gONCE = 3};$/;"	e	enum:ctb::maskmodes
ctb::gPRINT	datatypes.h	/^  enum maskmodes { gSELECT = 1, gPRINT = 2, gONCE = 3};$/;"	e	enum:ctb::maskmodes
ctb::gSELECT	datatypes.h	/^  enum maskmodes { gSELECT = 1, gPRINT = 2, gONCE = 3};$/;"	e	enum:ctb::maskmodes
ctb::generator	generator.h	/^    class generator$/;"	c	namespace:ctb
ctb::generator::addedge	generator.h	/^        void addedge(vid_t aid, vid_t bid, int b_argpos) ;$/;"	p	class:ctb::generator	access:public	signature:(vid_t aid, vid_t bid, int b_argpos)
ctb::generator::addedge	generator.h	/^    void generator<T,IT>::addedge(vid_t aid, vid_t bid, int b_argpos)  $/;"	f	class:ctb::generator	signature:(vid_t aid, vid_t bid, int b_argpos)
ctb::generator::addvert	generator.h	/^        template <typename...L> void addvert(vid_t v, id_t op, L... p) ;$/;"	p	class:ctb::generator	access:public	signature:(vid_t v, id_t op, L... p)
ctb::generator::addvert	generator.h	/^    template <typename...L> void generator<T,IT>::addvert(vid_t v, id_t op, L... p)  $/;"	f	class:ctb::generator	signature:(vid_t v, id_t op, L... p)
ctb::generator::clear	generator.h	/^        void clear();$/;"	p	class:ctb::generator	access:public	signature:()
ctb::generator::clear	generator.h	/^    void generator<T,IT>::clear()  $/;"	f	class:ctb::generator	signature:()
ctb::generator::compiletest	generator.h	/^        bool compiletest; \/*abbreviated as plain 'c'*\/$/;"	m	class:ctb::generator	access:private
ctb::generator::data_t	generator.h	/^        class data_t$/;"	c	class:ctb::generator	access:private
ctb::generator::data_t::acces_map	generator.h	/^            acces_map_t acces_map;$/;"	m	class:ctb::generator::data_t	access:private
ctb::generator::data_t::acces_map_t	generator.h	/^            typedef std::map<int, writer<aliasenv_generator> > acces_map_t;$/;"	t	class:ctb::generator::data_t	access:private
ctb::generator::data_t::data_t	generator.h	/^            template <typename... L> data_t( node_t* me, const typename IT::operation_t* o, id_t opi, L&&... p);$/;"	p	class:ctb::generator::data_t	access:public	signature:( node_t* me, const typename IT::operation_t* o, id_t opi, L&&... p)
ctb::generator::data_t::data_t	generator.h	/^    generator<T,IT>::data_t::data_t( node_t* m, const typename IT::operation_t* o, id_t opi, L&&... p) : me(m), opid(opi), acces_map(), op(o)$/;"	f	class:ctb::generator::data_t	signature:( node_t* m, const typename IT::operation_t* o, id_t opi, L&&... p)
ctb::generator::data_t::generate	generator.h	/^            template <class W> void generate(int granularity, W& w, bool c);$/;"	p	class:ctb::generator::data_t	access:public	signature:(int granularity, W& w, bool c)
ctb::generator::data_t::generate	generator.h	/^    void generator<T,IT>::data_t::generate(int granularity, W& w, bool c)$/;"	f	class:ctb::generator::data_t	signature:(int granularity, W& w, bool c)
ctb::generator::data_t::get_acces	generator.h	/^            template <class W> writer<aliasenv_generator> get_acces(int width, int gran, W& w, bool c);$/;"	p	class:ctb::generator::data_t	access:private	signature:(int width, int gran, W& w, bool c)
ctb::generator::data_t::get_acces	generator.h	/^    writer<aliasenv_generator> generator<T,IT>::data_t::get_acces(int width, int granularity, W& w, bool c)$/;"	f	class:ctb::generator::data_t	signature:(int width, int granularity, W& w, bool c)
ctb::generator::data_t::get_inout_pos	generator.h	/^            int get_inout_pos() const;$/;"	p	class:ctb::generator::data_t	access:public	signature:() const
ctb::generator::data_t::get_inout_pos	generator.h	/^    int generator<T,IT>::data_t::get_inout_pos() const$/;"	f	class:ctb::generator::data_t	signature:() const
ctb::generator::data_t::me	generator.h	/^            node_t* me;$/;"	m	class:ctb::generator::data_t	access:private
ctb::generator::data_t::newid	generator.h	/^            static int newid(bool reset);$/;"	p	class:ctb::generator::data_t	access:private	signature:(bool reset)
ctb::generator::data_t::newid	generator.h	/^    int generator<T,IT>::data_t::newid(bool reset)$/;"	f	class:ctb::generator::data_t	signature:(bool reset)
ctb::generator::data_t::newname	generator.h	/^            std::string newname(std::string tag) ;$/;"	p	class:ctb::generator::data_t	access:private	signature:(std::string tag)
ctb::generator::data_t::newname	generator.h	/^    std::string generator<T,IT>::data_t::newname(std::string tag)$/;"	f	class:ctb::generator::data_t	signature:(std::string tag)
ctb::generator::data_t::opid	generator.h	/^            proxy<id_t> opid;$/;"	m	class:ctb::generator::data_t	access:public
ctb::generator::data_t::parameters	generator.h	/^            std::vector<param_t> parameters;$/;"	m	class:ctb::generator::data_t	access:private
ctb::generator::data_t::push_params	generator.h	/^            template<typename P, typename...Ps> void push_params(P&&, Ps&&... params);$/;"	p	class:ctb::generator::data_t	access:private	signature:(P&&, Ps&&... params)
ctb::generator::data_t::push_params	generator.h	/^            void push_params();$/;"	p	class:ctb::generator::data_t	access:private	signature:()
ctb::generator::data_t::push_params	generator.h	/^    void generator<T,IT>::data_t::push_params()$/;"	f	class:ctb::generator::data_t	signature:()
ctb::generator::data_t::push_params	generator.h	/^    void generator<T,IT>::data_t::push_params(P&& p, Ps&&...params)$/;"	f	class:ctb::generator::data_t	signature:(P&& p, Ps&&...params)
ctb::generator::generate	generator.h	/^        template <class W> void generate(int granularity, W& w, std::shared_ptr<taghandler_base> p = NULL, std::shared_ptr<taghandler_base> q = NULL, std::shared_ptr<taghandler_base> s = NULL) ;$/;"	p	class:ctb::generator	access:public	signature:(int granularity, W& w, std::shared_ptr<taghandler_base> p = NULL, std::shared_ptr<taghandler_base> q = NULL, std::shared_ptr<taghandler_base> s = NULL)
ctb::generator::generate	generator.h	/^    void generator<T,IT>::generate(int packsize, W& w, std::shared_ptr<taghandler_base> ts, std::shared_ptr<taghandler_base> tp, std::shared_ptr<taghandler_base> to)$/;"	f	class:ctb::generator	signature:(int packsize, W& w, std::shared_ptr<taghandler_base> ts, std::shared_ptr<taghandler_base> tp, std::shared_ptr<taghandler_base> to)
ctb::generator::generator	generator.h	/^        generator( IT& i);$/;"	p	class:ctb::generator	access:public	signature:( IT& i)
ctb::generator::generator	generator.h	/^    generator<T,IT>::generator( IT & i) : instab(i), graph(), compiletest(false)$/;"	f	class:ctb::generator	signature:( IT & i)
ctb::generator::get_broadest	generator.h	/^        int get_broadest(int upperbound = 10000000) ;$/;"	p	class:ctb::generator	access:public	signature:(int upperbound = 10000000)
ctb::generator::get_broadest	generator.h	/^    int generator<T,IT>::get_broadest(int upperbound)$/;"	f	class:ctb::generator	signature:(int upperbound)
ctb::generator::graph	generator.h	/^        proxy<graph_t> graph;$/;"	m	class:ctb::generator	access:public
ctb::generator::graph_t	generator.h	/^        typedef graph_generic<data_t, typename T::vid_t, true, generator> graph_t;$/;"	t	class:ctb::generator	access:public
ctb::generator::id_t	generator.h	/^        typedef typename T::opid_t id_t;$/;"	t	class:ctb::generator	access:private
ctb::generator::instab	generator.h	/^        proxy< IT&> instab;$/;"	m	class:ctb::generator	access:public
ctb::generator::node_t	generator.h	/^        typedef typename graph_t::node_t node_t;$/;"	t	class:ctb::generator	access:public
ctb::generator::op_t	generator.h	/^        typedef typename IT::operation_t op_t;$/;"	t	class:ctb::generator	access:private
ctb::generator::param_t	generator.h	/^        typedef typename T::param_t param_t;$/;"	t	class:ctb::generator	access:private
ctb::generator::reset	generator.h	/^        void reset();$/;"	p	class:ctb::generator	access:public	signature:()
ctb::generator::reset	generator.h	/^    void generator<T,IT>::reset()$/;"	f	class:ctb::generator	signature:()
ctb::generator::set_compiletest	generator.h	/^        void set_compiletest(bool);$/;"	p	class:ctb::generator	access:public	signature:(bool)
ctb::generator::set_compiletest	generator.h	/^    void generator<T,IT>::set_compiletest(bool c)$/;"	f	class:ctb::generator	signature:(bool c)
ctb::generator::set_instab	generator.h	/^        void set_instab( IT& i);$/;"	p	class:ctb::generator	access:public	signature:( IT& i)
ctb::generator::set_instab	generator.h	/^    void generator<T,IT>::set_instab( IT& i)$/;"	f	class:ctb::generator	signature:( IT& i)
ctb::generator::update	generator.h	/^        void update(); \/** In case instruction table is reloaded the operation pointers are no longer valid. This function updates them.*\/$/;"	p	class:ctb::generator	access:public	signature:()
ctb::generator::update	generator.h	/^    void generator<T,IT>::update()$/;"	f	class:ctb::generator	signature:()
ctb::generator::vid_t	generator.h	/^        typedef typename T::vid_t vid_t;$/;"	t	class:ctb::generator	access:private
ctb::generator_default	generator.h	/^  typedef generator<traits, instruction_table_default> generator_default;$/;"	t	namespace:ctb
ctb::gmCOUNT	datatypes.h	/^  const int gmCOUNT = 3;$/;"	m	namespace:ctb
ctb::graph_default	graph.h	/^  typedef graph_generic<dummy,int,true> graph_default;$/;"	t	namespace:ctb
ctb::graph_generic	graph.h	/^    class graph_generic$/;"	c	namespace:ctb
ctb::graph_generic::addedge	graph.h	/^        void addedge(I aid, I bid, int b_argpos = -1) ; \/** self describing I believe*\/$/;"	p	class:ctb::graph_generic	access:public	signature:(I aid, I bid, int b_argpos = -1)
ctb::graph_generic::addedge	graph.h	/^    void graph_generic<T,I,directed,O...>::addedge(I aid, I bid, int b_argpos)  $/;"	f	class:ctb::graph_generic	signature:(I aid, I bid, int b_argpos)
ctb::graph_generic::addvert	graph.h	/^        template <typename...L> void addvert(I v, bool in , bool out , L&&... p) ; \/** v is identifier of a vetes, in and out specify whether vertex should be registered as output\/input, p... are parameters to be passed to the 'data' member upon construction*\/$/;"	p	class:ctb::graph_generic	access:public	signature:(I v, bool in , bool out , L&&... p)
ctb::graph_generic::addvert	graph.h	/^    void graph_generic<T,I,directed,O...>::addvert(I v, bool bin, bool bout, L&&... p)  $/;"	f	class:ctb::graph_generic	signature:(I v, bool bin, bool bout, L&&... p)
ctb::graph_generic::calculate_distances	graph.h	/^        void calculate_distances(); \/**performs bellman-ford algorithm *\/$/;"	p	class:ctb::graph_generic	access:public	signature:()
ctb::graph_generic::calculate_distances	graph.h	/^    void graph_generic<T,I,directed,O...>::calculate_distances()  $/;"	f	class:ctb::graph_generic	signature:()
ctb::graph_generic::clear	graph.h	/^        void clear();$/;"	p	class:ctb::graph_generic	access:public	signature:()
ctb::graph_generic::clear	graph.h	/^    void graph_generic<T,I,directed,O...>::clear()$/;"	f	class:ctb::graph_generic	signature:()
ctb::graph_generic::crawl_topological	graph.h	/^        void crawl_topological(std::function<void(node*)> f); \/** this is an overload of crawl for topological search, may be also abbreviated as 'do f for each vertex'*\/$/;"	p	class:ctb::graph_generic	access:public	signature:(std::function<void(node*)> f)
ctb::graph_generic::crawl_topological	graph.h	/^    void graph_generic<T,I,directed,O...>::crawl_topological(std::function<void(node*)> f)$/;"	f	class:ctb::graph_generic	signature:(std::function<void(node*)> f)
ctb::graph_generic::get_dist	graph.h	/^        int get_dist(I a, I b, I* c = NULL) const; \/** returns distance from a to b and the next vertex on path from a to b into c (if not null)*\/$/;"	p	class:ctb::graph_generic	access:public	signature:(I a, I b, I* c = NULL) const
ctb::graph_generic::get_dist	graph.h	/^    int graph_generic<T,I,directed,O...>::get_dist(I a, I b, I* c) const$/;"	f	class:ctb::graph_generic	signature:(I a, I b, I* c) const
ctb::graph_generic::graph_generic	graph.h	/^        graph_generic();$/;"	p	class:ctb::graph_generic	access:public	signature:()
ctb::graph_generic::graph_generic	graph.h	/^    graph_generic<T,I,directed,O...>::graph_generic() : in(), out(), verts(), index(0)$/;"	f	class:ctb::graph_generic	signature:()
ctb::graph_generic::index	graph.h	/^        int index;$/;"	m	class:ctb::graph_generic	access:private
ctb::graph_generic::node	graph.h	/^        class node$/;"	c	class:ctb::graph_generic	access:private
ctb::graph_generic::node::crawl	graph.h	/^            template <bool recurse = false, bool inverse = false> void crawl(std::function<bool(node*)> f, std::function<bool(node*)> g, std::queue<node*>* q = NULL); \/** see the documentation written in the actual code, for example see implementation of the calculate_distances() function *\/$/;"	p	class:ctb::graph_generic::node	access:public	signature:(std::function<bool(node*)> f, std::function<bool(node*)> g, std::queue<node*>* q = NULL)
ctb::graph_generic::node::crawl	graph.h	/^    void graph_generic<T,I,directed,O...>::node::crawl(std::function<bool(node*)> f, std::function<bool(node*)> g, std::queue<node*>* q)$/;"	f	class:ctb::graph_generic::node	signature:(std::function<bool(node*)> f, std::function<bool(node*)> g, std::queue<node*>* q)
ctb::graph_generic::node::crawl_topological	graph.h	/^            void crawl_topological(std::function<void(node*)> f); \/** this is an overload of crawl for topological search*\/$/;"	p	class:ctb::graph_generic::node	access:public	signature:(std::function<void(node*)> f)
ctb::graph_generic::node::crawl_topological	graph.h	/^    void graph_generic<T,I,directed,O...>::node::crawl_topological(std::function<void(node*)> f)$/;"	f	class:ctb::graph_generic::node	signature:(std::function<void(node*)> f)
ctb::graph_generic::node::get_path	graph.h	/^            node * get_path(node * n);$/;"	p	class:ctb::graph_generic::node	access:private	signature:(node * n)
ctb::graph_generic::node::get_path	graph.h	/^    typename graph_generic<T,I,directed,O...>::node* graph_generic<T,I,directed,O...>::node::get_path(node * n)$/;"	f	class:ctb::graph_generic::node	signature:(node * n)
ctb::graph_generic::node::id	graph.h	/^            proxy<I> id;$/;"	m	class:ctb::graph_generic::node	access:public
ctb::graph_generic::node::in	graph.h	/^            proxy<std::vector<node*> > in;$/;"	m	class:ctb::graph_generic::node	access:public
ctb::graph_generic::node::index	graph.h	/^            int index; \/** I believe this is used as an identifier in maps*\/$/;"	m	class:ctb::graph_generic::node	access:private
ctb::graph_generic::node::init_map	graph.h	/^            bool init_map(int size);$/;"	p	class:ctb::graph_generic::node	access:private	signature:(int size)
ctb::graph_generic::node::init_map	graph.h	/^    bool graph_generic<T,I,directed,O...>::node::init_map(int size)$/;"	f	class:ctb::graph_generic::node	signature:(int size)
ctb::graph_generic::node::lastpass	graph.h	/^            int lastpass; \/** is used mostly for keeping track of whether or not we've visited this node in current crawl*\/$/;"	m	class:ctb::graph_generic::node	access:private
ctb::graph_generic::node::map	graph.h	/^            mutable std::vector<route> map;$/;"	m	class:ctb::graph_generic::node	access:private
ctb::graph_generic::node::newid	graph.h	/^            static int newid();$/;"	p	class:ctb::graph_generic::node	access:private	signature:()
ctb::graph_generic::node::newid	graph.h	/^    int graph_generic<T,I,directed,O...>::node::newid()$/;"	f	class:ctb::graph_generic::node	signature:()
ctb::graph_generic::node::node	graph.h	/^            template <typename... L> node(I vid, int index, L&&... p);$/;"	p	class:ctb::graph_generic::node	access:private	signature:(I vid, int index, L&&... p)
ctb::graph_generic::node::node	graph.h	/^    graph_generic<T,I,directed,O...>::node::node(I vid, int idx, L&&... p) : id(vid), out(), in(), data(this, (std::forward<L>(p))...), index(idx)$/;"	f	class:ctb::graph_generic::node	signature:(I vid, int idx, L&&... p)
ctb::graph_generic::node::operator ->	graph.h	/^            proxy<T,O...>& operator->(); \/**provides diect access to the data member*\/$/;"	p	class:ctb::graph_generic::node	access:public	signature:()
ctb::graph_generic::node::operator ->	graph.h	/^    graph_generic<T,I,directed,O...>::node::proxy<T,O...>& graph_generic<T,I,directed,O...>::node::operator->()  $/;"	f	class:ctb::graph_generic::node	signature:()
ctb::graph_generic::node::out	graph.h	/^            proxy<std::vector<node*> > out;$/;"	m	class:ctb::graph_generic::node	access:public
ctb::graph_generic::node::parent	graph.h	/^            graph_generic* parent;$/;"	m	class:ctb::graph_generic::node	access:private
ctb::graph_generic::node::route	graph.h	/^            typedef std::pair<node*, int> route;$/;"	t	class:ctb::graph_generic::node	access:private
ctb::graph_generic::node::update_distances	graph.h	/^            bool update_distances();$/;"	p	class:ctb::graph_generic::node	access:private	signature:()
ctb::graph_generic::node::update_distances	graph.h	/^    bool graph_generic<T,I,directed,O...>::node::update_distances()$/;"	f	class:ctb::graph_generic::node	signature:()
ctb::graph_generic::node_t	graph.h	/^        typedef node node_t;$/;"	t	class:ctb::graph_generic	access:public
ctb::graph_generic::out	graph.h	/^        proxy<vertex_list_t> out;$/;"	m	class:ctb::graph_generic	access:public
ctb::graph_generic::self_test	graph.h	/^        static void self_test();$/;"	p	class:ctb::graph_generic	access:public	signature:()
ctb::graph_generic::self_test	graph.h	/^    void graph_generic<T,I,directed,O...>::self_test()$/;"	f	class:ctb::graph_generic	signature:()
ctb::graph_generic::vertex_container_t	graph.h	/^        typedef std::map<I, node*> vertex_container_t;$/;"	t	class:ctb::graph_generic	access:private
ctb::graph_generic::vertex_list_t	graph.h	/^        typedef std::vector<node*> vertex_list_t;$/;"	t	class:ctb::graph_generic	access:private
ctb::graph_generic::verts	graph.h	/^        proxy<vertex_container_t> verts;$/;"	m	class:ctb::graph_generic	access:public
ctb::graph_generic::~graph_generic	graph.h	/^        ~graph_generic();$/;"	p	class:ctb::graph_generic	access:public	signature:()
ctb::graph_generic::~graph_generic	graph.h	/^    graph_generic<T,I,directed,O...>::~graph_generic()$/;"	f	class:ctb::graph_generic	signature:()
ctb::instruction_table	instructions.h	/^    class instruction_table \/\/provides transition from opcode to abstract operation$/;"	c	namespace:ctb
ctb::instruction_table::add_tags	instructions.h	/^        \/*API*\/ void add_tags(std::shared_ptr<taghandler_base>,std::size_t layer = gSELECT); $/;"	p	class:ctb::instruction_table	access:public	signature:(std::shared_ptr<taghandler_base>,std::size_t layer = gSELECT)
ctb::instruction_table::add_tags	instructions.h	/^    void instruction_table<T>::add_tags(std::shared_ptr<taghandler_base> ptr, std::size_t l)$/;"	f	class:ctb::instruction_table	signature:(std::shared_ptr<taghandler_base> ptr, std::size_t l)
ctb::instruction_table::addoperation	instructions.h	/^        \/*IAPI*\/ operation_t& addoperation(typename T::opid_t op, typename T::tid_t t, const std::vector<typename T::tid_t>&it, typename T::flag_t f) ;$/;"	p	class:ctb::instruction_table	access:public	signature:(typename T::opid_t op, typename T::tid_t t, const std::vector<typename T::tid_t>&it, typename T::flag_t f)
ctb::instruction_table::addoperation	instructions.h	/^    typename instruction_table<T>::operation_t& instruction_table<T>::addoperation(typename T::opid_t op, typename T::tid_t t, const std::vector<typename T::tid_t>& it, typename T::flag_t f)$/;"	f	class:ctb::instruction_table	signature:(typename T::opid_t op, typename T::tid_t t, const std::vector<typename T::tid_t>& it, typename T::flag_t f)
ctb::instruction_table::addtype	instructions.h	/^        \/*IAPI*\/ type_t& addtype(typename T::tid_t t, int bitwidth = 0) ;$/;"	p	class:ctb::instruction_table	access:public	signature:(typename T::tid_t t, int bitwidth = 0)
ctb::instruction_table::addtype	instructions.h	/^    typename instruction_table<T>::type_t& instruction_table<T>::addtype(typename T::tid_t t, int bitwidth)$/;"	f	class:ctb::instruction_table	signature:(typename T::tid_t t, int bitwidth)
ctb::instruction_table::clear	instructions.h	/^        void clear(bool tags = false) ;$/;"	p	class:ctb::instruction_table	access:public	signature:(bool tags = false)
ctb::instruction_table::clear	instructions.h	/^    void instruction_table<T>::clear(bool tags)$/;"	f	class:ctb::instruction_table	signature:(bool tags)
ctb::instruction_table::dec	instructions.h	/^        \/*API*\/ const operation_t& dec(typename T::opid_t type) const ;$/;"	p	class:ctb::instruction_table	access:public	signature:(typename T::opid_t type) const
ctb::instruction_table::dec	instructions.h	/^    const typename instruction_table<T>::operation_t& instruction_table<T>::dec(typename T::opid_t type)   const$/;"	f	class:ctb::instruction_table	signature:(typename T::opid_t type) const
ctb::instruction_table::dectype	instructions.h	/^        \/*API*\/ const type_t& dectype(typename T::tid_t type) const ;$/;"	p	class:ctb::instruction_table	access:public	signature:(typename T::tid_t type) const
ctb::instruction_table::dectype	instructions.h	/^    const typename instruction_table<T>::type_t& instruction_table<T>::dectype(typename T::tid_t type)   const$/;"	f	class:ctb::instruction_table	signature:(typename T::tid_t type) const
ctb::instruction_table::empty	instructions.h	/^        bool empty();$/;"	p	class:ctb::instruction_table	access:public	signature:()
ctb::instruction_table::empty	instructions.h	/^    bool instruction_table<T>::empty()$/;"	f	class:ctb::instruction_table	signature:()
ctb::instruction_table::get_tag_mask	instructions.h	/^        typename T::flag_t get_tag_mask(const std::string& tags);$/;"	p	class:ctb::instruction_table	access:private	signature:(const std::string& tags)
ctb::instruction_table::get_tag_mask	instructions.h	/^  typename T::flag_t instruction_table<T>::get_tag_mask(const std::string& tags)$/;"	f	class:ctb::instruction_table	signature:(const std::string& tags)
ctb::instruction_table::instab	instructions.h	/^        \/*EAPI*\/proxy<instab_t> instab;$/;"	m	class:ctb::instruction_table	access:public
ctb::instruction_table::instab_t	instructions.h	/^        typedef std::map<typename T::opid_t, operation*> instab_t;$/;"	t	class:ctb::instruction_table	access:private
ctb::instruction_table::is_tag_satisfactory	instructions.h	/^        \/*API*\/ bool is_tag_satisfactory(const std::string&) const;$/;"	p	class:ctb::instruction_table	access:public	signature:(const std::string&) const
ctb::instruction_table::is_tag_satisfactory	instructions.h	/^  bool instruction_table<T>::is_tag_satisfactory(const std::string& tags) const$/;"	f	class:ctb::instruction_table	signature:(const std::string& tags) const
ctb::instruction_table::operation	instructions.h	/^        class operation \/\/holds general operation traits$/;"	c	class:ctb::instruction_table	access:private
ctb::instruction_table::operation::addcode	instructions.h	/^            \/*IAPI*\/void addcode(int wi, int wo, const std::string& c,const std::string&,const std::string&,const std::string&,int r);$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int wi, int wo, const std::string& c,const std::string&,const std::string&,const std::string&,int r)
ctb::instruction_table::operation::addcode	instructions.h	/^    void instruction_table<T>::operation::addcode(int wi, int wo, const std::string& c,const std::string& cc,const std::string& n,const std::string& t,int r)$/;"	f	class:ctb::instruction_table::operation	signature:(int wi, int wo, const std::string& c,const std::string& cc,const std::string& n,const std::string& t,int r)
ctb::instruction_table::operation::flags	instructions.h	/^            \/*EAPI*\/proxy<typename T::flag_t> flags; \/*EAPI*\/proxy<typename T::opid_t> opid;$/;"	m	class:ctb::instruction_table::operation	access:public
ctb::instruction_table::operation::get_conv_string	instructions.h	/^            \/*API*\/bool get_conv_string(int from, int to, std::string& c1, std::string& c2, std::string&cc, std::string& type, std::size_t&)const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int from, int to, std::string& c1, std::string& c2, std::string&cc, std::string& type, std::size_t&) const
ctb::instruction_table::operation::get_conv_string	instructions.h	/^    bool instruction_table<T>::operation::get_conv_string(int from, int to, std::string& c1, std::string& c2, std::string& cc, std::string& t, std::size_t& printability) const$/;"	f	class:ctb::instruction_table::operation	signature:(int from, int to, std::string& c1, std::string& c2, std::string& cc, std::string& t, std::size_t& printability) const
ctb::instruction_table::operation::get_conversion_graph	instructions.h	/^            \/*API*\/const typename type::graph_distance_t& get_conversion_graph() const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:() const
ctb::instruction_table::operation::get_conversion_graph	instructions.h	/^    const typename instruction_table<T>::type::graph_distance_t& instruction_table<T>::operation::get_conversion_graph() const$/;"	f	class:ctb::instruction_table::operation	signature:() const
ctb::instruction_table::operation::get_debug_opid	instructions.h	/^            \/*API*\/typename T::opid_t get_debug_opid() const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:() const
ctb::instruction_table::operation::get_debug_opid	instructions.h	/^  typename T::opid_t instruction_table<T>::operation::get_debug_opid() const$/;"	f	class:ctb::instruction_table::operation	signature:() const
ctb::instruction_table::operation::get_max_width	instructions.h	/^            \/*API*\/int get_max_width(int bound = 1000000000, int* in = NULL, int* out = NULL)const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int bound = 1000000000, int* in = NULL, int* out = NULL) const
ctb::instruction_table::operation::get_max_width	instructions.h	/^    int instruction_table<T>::operation::get_max_width(int bound, int* in, int* out)const$/;"	f	class:ctb::instruction_table::operation	signature:(int bound, int* in, int* out) const
ctb::instruction_table::operation::get_op_string	instructions.h	/^            \/*API*\/bool get_op_string(int w, std::string& c, std::string& cc, std::size_t&)const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int w, std::string& c, std::string& cc, std::size_t&) const
ctb::instruction_table::operation::get_op_string	instructions.h	/^    bool instruction_table<T>::operation::get_op_string(int w, std::string& c, std::string& cc, std::size_t& printability)const$/;"	f	class:ctb::instruction_table::operation	signature:(int w, std::string& c, std::string& cc, std::size_t& printability) const
ctb::instruction_table::operation::get_type_string	instructions.h	/^            \/*API*\/bool get_type_string(int w, std::string&)const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int w, std::string&) const
ctb::instruction_table::operation::get_type_string	instructions.h	/^    bool instruction_table<T>::operation::get_type_string(int w, std::string& c)const$/;"	f	class:ctb::instruction_table::operation	signature:(int w, std::string& c) const
ctb::instruction_table::operation::imbued_width	instructions.h	/^            mutable int imbued_width;$/;"	m	class:ctb::instruction_table::operation	access:private
ctb::instruction_table::operation::in_types	instructions.h	/^            \/*EAPI*\/proxy<typename std::vector<typename T::tid_t>> in_types;$/;"	m	class:ctb::instruction_table::operation	access:public
ctb::instruction_table::operation::instruction	instructions.h	/^            struct instruction \/\/holds information for generation$/;"	s	class:ctb::instruction_table::operation	access:private
ctb::instruction_table::operation::instruction::code	instructions.h	/^              const std::string code;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
ctb::instruction_table::operation::instruction::code_custom	instructions.h	/^              const std::string code_custom;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
ctb::instruction_table::operation::instruction::instruction	instructions.h	/^              instruction() = delete;$/;"	p	struct:ctb::instruction_table::operation::instruction	access:public	signature:()
ctb::instruction_table::operation::instruction::instruction	instructions.h	/^              instruction(int wi, int wo, const std::string& c,const std::string&,const std::string&,const std::string&,int r, bool satisfactory);$/;"	p	struct:ctb::instruction_table::operation::instruction	access:public	signature:(int wi, int wo, const std::string& c,const std::string&,const std::string&,const std::string&,int r, bool satisfactory)
ctb::instruction_table::operation::instruction::instruction	instructions.h	/^    instruction_table<T>::operation::instruction::instruction(int wi, int wo, const std::string& c,const std::string& cc,const std::string& n,const std::string& t,int r, bool s) : code(c), width_in(wi), width_out(wo), width(std::max(wi, wo)), code_custom(cc), note(n), tags(t), rating(r), satisfactory(s)$/;"	f	class:ctb::instruction_table::operation::instruction	signature:(int wi, int wo, const std::string& c,const std::string& cc,const std::string& n,const std::string& t,int r, bool s)
ctb::instruction_table::operation::instruction::note	instructions.h	/^              const std::string note;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
ctb::instruction_table::operation::instruction::rating	instructions.h	/^              const int rating;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
ctb::instruction_table::operation::instruction::satisfactory	instructions.h	/^              mutable typename T::flag_t satisfactory;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
ctb::instruction_table::operation::instruction::tags	instructions.h	/^              const std::string tags;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
ctb::instruction_table::operation::instruction::width	instructions.h	/^              int width;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
ctb::instruction_table::operation::instruction::width_in	instructions.h	/^              int width_in;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
ctb::instruction_table::operation::instruction::width_out	instructions.h	/^              int width_out;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
ctb::instruction_table::operation::is	instructions.h	/^            \/*API*\/bool is(typename T::flag_t f) const ;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(typename T::flag_t f) const
ctb::instruction_table::operation::is	instructions.h	/^    bool instruction_table<T>::operation::is(typename T::flag_t f) const $/;"	f	class:ctb::instruction_table::operation	signature:(typename T::flag_t f) const
ctb::instruction_table::operation::mytype	instructions.h	/^            \/*EAPI*\/proxy<type*> mytype;$/;"	m	class:ctb::instruction_table::operation	access:public
ctb::instruction_table::operation::operation	instructions.h	/^            operation() = delete;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:()
ctb::instruction_table::operation::operation	instructions.h	/^            operation(typename T::opid_t i, typename T::tid_t ot, const std::vector<typename T::tid_t>& it, typename T::flag_t f, type* t, instruction_table* parent);$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(typename T::opid_t i, typename T::tid_t ot, const std::vector<typename T::tid_t>& it, typename T::flag_t f, type* t, instruction_table* parent)
ctb::instruction_table::operation::operation	instructions.h	/^    instruction_table<T>::operation::operation(typename T::opid_t i, typename T::tid_t ot, const std::vector<typename T::tid_t>& it, typename T::flag_t f, type* t, instruction_table<T>* p) : opid(i), mytype(t), out_type(ot), flags(f), parent(p), in_types(it)$/;"	f	class:ctb::instruction_table::operation	signature:(typename T::opid_t i, typename T::tid_t ot, const std::vector<typename T::tid_t>& it, typename T::flag_t f, type* t, instruction_table<T>* p)
ctb::instruction_table::operation::opid	instructions.h	/^            \/*EAPI*\/proxy<typename T::flag_t> flags; \/*EAPI*\/proxy<typename T::opid_t> opid;$/;"	m	class:ctb::instruction_table::operation	access:public
ctb::instruction_table::operation::out_type	instructions.h	/^            \/*EAPI*\/proxy<typename T::tid_t> out_type;$/;"	m	class:ctb::instruction_table::operation	access:public
ctb::instruction_table::operation::parent	instructions.h	/^            instruction_table* parent;$/;"	m	class:ctb::instruction_table::operation	access:private
ctb::instruction_table::operation::update_tags	instructions.h	/^            void update_tags() const;$/;"	p	class:ctb::instruction_table::operation	access:private	signature:() const
ctb::instruction_table::operation::update_tags	instructions.h	/^  void instruction_table<T>::operation::update_tags() const$/;"	f	class:ctb::instruction_table::operation	signature:() const
ctb::instruction_table::operation::versions	instructions.h	/^            \/*EAPI*\/proxy<std::vector<instruction>> versions;$/;"	m	class:ctb::instruction_table::operation	access:public
ctb::instruction_table::operation_t	instructions.h	/^        typedef operation operation_t; $/;"	t	class:ctb::instruction_table	access:public
ctb::instruction_table::rm_tags	instructions.h	/^        \/*API*\/ void rm_tags(std::shared_ptr<taghandler_base>,std::size_t layer = gSELECT);$/;"	p	class:ctb::instruction_table	access:public	signature:(std::shared_ptr<taghandler_base>,std::size_t layer = gSELECT)
ctb::instruction_table::rm_tags	instructions.h	/^    void instruction_table<T>::rm_tags(std::shared_ptr<taghandler_base> ptr, std::size_t l)$/;"	f	class:ctb::instruction_table	signature:(std::shared_ptr<taghandler_base> ptr, std::size_t l)
ctb::instruction_table::taghandlerrec_t	instructions.h	/^        typedef std::set<std::shared_ptr<taghandler_base>> taghandlerrec_t;$/;"	t	class:ctb::instruction_table	access:private
ctb::instruction_table::taghandlertab_t	instructions.h	/^        typedef std::vector<taghandlerrec_t> taghandlertab_t;$/;"	t	class:ctb::instruction_table	access:private
ctb::instruction_table::taglists	instructions.h	/^        taghandlertab_t taglists;$/;"	m	class:ctb::instruction_table	access:private
ctb::instruction_table::type	instructions.h	/^        class type$/;"	c	class:ctb::instruction_table	access:private
ctb::instruction_table::type::addcode_conversion	instructions.h	/^            \/*IAPI*\/void addcode_conversion(int from, int to, const std::string& c1, const std::string& c2,const std::string& cc,const std::string& cg, const std::string& n, const std::string& t,int r);$/;"	p	class:ctb::instruction_table::type	access:public	signature:(int from, int to, const std::string& c1, const std::string& c2,const std::string& cc,const std::string& cg, const std::string& n, const std::string& t,int r)
ctb::instruction_table::type::addcode_conversion	instructions.h	/^    void instruction_table<T>::type::addcode_conversion(int in, int out, const std::string& c1,const std::string& c2,const std::string& cc,const std::string& cg, const std::string& n,const std::string& t,int r)$/;"	f	class:ctb::instruction_table::type	signature:(int in, int out, const std::string& c1,const std::string& c2,const std::string& cc,const std::string& cg, const std::string& n,const std::string& t,int r)
ctb::instruction_table::type::addcode_type	instructions.h	/^            \/*IAPI*\/void addcode_type(int w, const std::string& c,const std::string&) ;$/;"	p	class:ctb::instruction_table::type	access:public	signature:(int w, const std::string& c,const std::string&)
ctb::instruction_table::type::addcode_type	instructions.h	/^    void instruction_table<T>::type::addcode_type(int w, const std::string& c,const std::string& n)$/;"	f	class:ctb::instruction_table::type	signature:(int w, const std::string& c,const std::string& n)
ctb::instruction_table::type::bitwidth	instructions.h	/^            \/*EAPI*\/proxy<int> bitwidth;$/;"	m	class:ctb::instruction_table::type	access:public
ctb::instruction_table::type::conversion	instructions.h	/^            struct conversion$/;"	s	class:ctb::instruction_table::type	access:private
ctb::instruction_table::type::conversion::code1	instructions.h	/^              const std::string code1;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversion::code2	instructions.h	/^              const std::string code2;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversion::code_custom	instructions.h	/^              const std::string code_custom;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversion::code_generic	instructions.h	/^              const std::string code_generic;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversion::conversion	instructions.h	/^              conversion() = delete;$/;"	p	struct:ctb::instruction_table::type::conversion	access:public	signature:()
ctb::instruction_table::type::conversion::conversion	instructions.h	/^              conversion(int in, int out, const std::string& c1, const std::string& c2,const std::string&,const std::string&,const std::string&, const std::string&, int r, bool s);$/;"	p	struct:ctb::instruction_table::type::conversion	access:public	signature:(int in, int out, const std::string& c1, const std::string& c2,const std::string&,const std::string&,const std::string&, const std::string&, int r, bool s)
ctb::instruction_table::type::conversion::conversion	instructions.h	/^    instruction_table<T>::type::conversion::conversion(int i, int o, const std::string& c1, const std::string& c2,const std::string& cc, const std::string& cg, const std::string& n,const std::string& t,int r, bool s) : width_in(i), width_out(o), code1(c1), code2(c2), code_custom(cc), code_generic(cg), note(n), tags(t), rating(r), satisfactory(s)$/;"	f	class:ctb::instruction_table::type::conversion	signature:(int i, int o, const std::string& c1, const std::string& c2,const std::string& cc, const std::string& cg, const std::string& n,const std::string& t,int r, bool s)
ctb::instruction_table::type::conversion::note	instructions.h	/^              const std::string note;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversion::rating	instructions.h	/^              const int rating;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversion::satisfactory	instructions.h	/^              mutable typename T::flag_t satisfactory;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversion::tags	instructions.h	/^              const std::string tags;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversion::width_in	instructions.h	/^              const int width_in;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversion::width_out	instructions.h	/^              const int width_out;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
ctb::instruction_table::type::conversions	instructions.h	/^            \/*EAPI*\/proxy<std::vector<conversion>> conversions;$/;"	m	class:ctb::instruction_table::type	access:public
ctb::instruction_table::type::debug_op	instructions.h	/^            proxy<typename T::opid_t> debug_op;$/;"	m	class:ctb::instruction_table::type	access:public
ctb::instruction_table::type::distances	instructions.h	/^            mutable graph_distance_t distances; \/\/technically taken just a cache$/;"	m	class:ctb::instruction_table::type	access:public
ctb::instruction_table::type::graph_distance_t	instructions.h	/^            typedef graph_generic<dummy, int, false, type> graph_distance_t;$/;"	t	class:ctb::instruction_table::type	access:public
ctb::instruction_table::type::parent	instructions.h	/^            instruction_table* parent;$/;"	m	class:ctb::instruction_table::type	access:private
ctb::instruction_table::type::tid	instructions.h	/^            \/*EAPI*\/proxy<typename T::tid_t> tid;$/;"	m	class:ctb::instruction_table::type	access:public
ctb::instruction_table::type::type	instructions.h	/^            type() = delete;$/;"	p	class:ctb::instruction_table::type	access:public	signature:()
ctb::instruction_table::type::type	instructions.h	/^            type(instruction_table*, int bitwidth);$/;"	p	class:ctb::instruction_table::type	access:public	signature:(instruction_table*, int bitwidth)
ctb::instruction_table::type::type	instructions.h	/^    instruction_table<T>::type::type(instruction_table<T>* p, int bw) : parent(p), bitwidth(bw)$/;"	f	class:ctb::instruction_table::type	signature:(instruction_table<T>* p, int bw)
ctb::instruction_table::type::type_version	instructions.h	/^            struct type_version$/;"	s	class:ctb::instruction_table::type	access:private
ctb::instruction_table::type::type_version::code	instructions.h	/^              const std::string code;$/;"	m	struct:ctb::instruction_table::type::type_version	access:public
ctb::instruction_table::type::type_version::note	instructions.h	/^              const std::string note;$/;"	m	struct:ctb::instruction_table::type::type_version	access:public
ctb::instruction_table::type::type_version::type_version	instructions.h	/^              type_version() = delete;$/;"	p	struct:ctb::instruction_table::type::type_version	access:public	signature:()
ctb::instruction_table::type::type_version::type_version	instructions.h	/^              type_version(int w, const std::string& c,const std::string&);$/;"	p	struct:ctb::instruction_table::type::type_version	access:public	signature:(int w, const std::string& c,const std::string&)
ctb::instruction_table::type::type_version::type_version	instructions.h	/^    instruction_table<T>::type::type_version::type_version(int w, const std::string& c,const std::string& n) : width(w), code(c), note(n)$/;"	f	class:ctb::instruction_table::type::type_version	signature:(int w, const std::string& c,const std::string& n)
ctb::instruction_table::type::type_version::width	instructions.h	/^              const int width;$/;"	m	struct:ctb::instruction_table::type::type_version	access:public
ctb::instruction_table::type::update_tags	instructions.h	/^            void update_tags() const;$/;"	p	class:ctb::instruction_table::type	access:private	signature:() const
ctb::instruction_table::type::update_tags	instructions.h	/^  void instruction_table<T>::type::update_tags() const$/;"	f	class:ctb::instruction_table::type	signature:() const
ctb::instruction_table::type::versions	instructions.h	/^            \/*EAPI*\/proxy<std::vector<type_version>> versions;$/;"	m	class:ctb::instruction_table::type	access:public
ctb::instruction_table::type_t	instructions.h	/^        typedef type type_t;$/;"	t	class:ctb::instruction_table	access:public
ctb::instruction_table::typetab	instructions.h	/^        \/*EAPI*\/proxy<typetab_t> typetab;$/;"	m	class:ctb::instruction_table	access:public
ctb::instruction_table::typetab_t	instructions.h	/^        typedef std::map<typename T::tid_t, type*> typetab_t;$/;"	t	class:ctb::instruction_table	access:private
ctb::instruction_table::update_tags	instructions.h	/^        \/*API*\/ void update_tags() const;$/;"	p	class:ctb::instruction_table	access:public	signature:() const
ctb::instruction_table::update_tags	instructions.h	/^    void instruction_table<T>::update_tags() const$/;"	f	class:ctb::instruction_table	signature:() const
ctb::instruction_table::~instruction_table	instructions.h	/^        ~instruction_table();$/;"	p	class:ctb::instruction_table	access:public	signature:()
ctb::instruction_table::~instruction_table	instructions.h	/^    instruction_table<T>::~instruction_table()  $/;"	f	class:ctb::instruction_table	signature:()
ctb::instruction_table_default	instructions.h	/^  typedef instruction_table<traits> instruction_table_default;$/;"	t	namespace:ctb
ctb::language_cpp	languages.h	/^  class language_cpp$/;"	c	namespace:ctb
ctb::language_cpp::shouldbreak	languages.h	/^      static void shouldbreak(const int& pos, const std::string& format, bool& brbf, bool& braf)$/;"	f	class:ctb::language_cpp	access:public	signature:(const int& pos, const std::string& format, bool& brbf, bool& braf)
ctb::language_cpp::shouldindent	languages.h	/^      static void shouldindent( const std::string& line, int& outindent, int& indent, int& nobreak)$/;"	f	class:ctb::language_cpp	access:public	signature:( const std::string& line, int& outindent, int& indent, int& nobreak)
ctb::language_empty	languages.h	/^  class language_empty$/;"	c	namespace:ctb
ctb::language_empty::shouldbreak	languages.h	/^      static void shouldbreak(const int& pos, const std::string& format, bool& brbf, bool& braf)$/;"	f	class:ctb::language_empty	access:public	signature:(const int& pos, const std::string& format, bool& brbf, bool& braf)
ctb::language_empty::shouldindent	languages.h	/^      static void shouldindent( const std::string&, int& outindent, int& indent, int& nobreak)$/;"	f	class:ctb::language_empty	access:public	signature:( const std::string&, int& outindent, int& indent, int& nobreak)
ctb::loader_default	loader_xml.h	/^  typedef xml_loader<traits, generator_default, instruction_table_default> loader_default;$/;"	t	namespace:ctb
ctb::mONCE	datatypes.h	/^  enum maskmodes_masks { mSELECT = 1 , mPRINT = 2, mONCE = 4 };$/;"	e	enum:ctb::maskmodes_masks
ctb::mPRINT	datatypes.h	/^  enum maskmodes_masks { mSELECT = 1 , mPRINT = 2, mONCE = 4 };$/;"	e	enum:ctb::maskmodes_masks
ctb::mSELECT	datatypes.h	/^  enum maskmodes_masks { mSELECT = 1 , mPRINT = 2, mONCE = 4 };$/;"	e	enum:ctb::maskmodes_masks
ctb::maskmodes	datatypes.h	/^  enum maskmodes { gSELECT = 1, gPRINT = 2, gONCE = 3};$/;"	g	namespace:ctb
ctb::maskmodes_masks	datatypes.h	/^  enum maskmodes_masks { mSELECT = 1 , mPRINT = 2, mONCE = 4 };$/;"	g	namespace:ctb
ctb::openstream	datatypes.h	/^    void openstream(S& stream, const std::string& name, bool check_existence = true)$/;"	f	namespace:ctb	signature:(S& stream, const std::string& name, bool check_existence = true)
ctb::openstream	split.h	/^    void openstream(S& stream, const std::string& name, bool check_existence = true)$/;"	f	namespace:ctb	signature:(S& stream, const std::string& name, bool check_existence = true)
ctb::parser	parser.h	/^  class parser$/;"	c	namespace:ctb
ctb::parser::calculate	parser.h	/^      static int calculate(const std::string&);$/;"	p	class:ctb::parser	access:public	signature:(const std::string&)
ctb::parser::calculate	parser.h	/^  int parser::calculate(const std::string& s)$/;"	f	class:ctb::parser	signature:(const std::string& s)
ctb::parser::diagnosis	parser.h	/^      static void diagnosis(const std::string& s, const std::string& e, int pos);$/;"	p	class:ctb::parser	access:private	signature:(const std::string& s, const std::string& e, int pos)
ctb::parser::diagnosis	parser.h	/^  void parser::diagnosis(const std::string& s, const std::string& e, int pos)$/;"	f	class:ctb::parser	signature:(const std::string& s, const std::string& e, int pos)
ctb::parser::get	parser.h	/^      const token& get(int i);$/;"	p	class:ctb::parser	access:private	signature:(int i)
ctb::parser::get	parser.h	/^  const parser::token& parser::get(int i)$/;"	f	class:ctb::parser	signature:(int i)
ctb::parser::process	parser.h	/^      int process(const char*&);$/;"	p	class:ctb::parser	access:private	signature:(const char*&)
ctb::parser::process	parser.h	/^  int parser::process(const char*& exp)$/;"	f	class:ctb::parser	signature:(const char*& exp)
ctb::parser::self_test	parser.h	/^      static void self_test();$/;"	p	class:ctb::parser	access:public	signature:()
ctb::parser::self_test	parser.h	/^  void parser::self_test()$/;"	f	class:ctb::parser	signature:()
ctb::parser::squash_add_sub	parser.h	/^      void squash_add_sub();$/;"	p	class:ctb::parser	access:private	signature:()
ctb::parser::squash_add_sub	parser.h	/^  void parser::squash_add_sub()$/;"	f	class:ctb::parser	signature:()
ctb::parser::squash_mul_div	parser.h	/^      void squash_mul_div();$/;"	p	class:ctb::parser	access:private	signature:()
ctb::parser::squash_mul_div	parser.h	/^  void parser::squash_mul_div()$/;"	f	class:ctb::parser	signature:()
ctb::parser::stack	parser.h	/^      std::vector<token> stack;$/;"	m	class:ctb::parser	access:private
ctb::parser::tAdd	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
ctb::parser::tDiv	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
ctb::parser::tEof	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
ctb::parser::tMul	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
ctb::parser::tNum	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
ctb::parser::tPB	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
ctb::parser::tPE	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
ctb::parser::tSub	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
ctb::parser::token	parser.h	/^      typedef std::pair<ttype, int> token;$/;"	t	class:ctb::parser	access:public
ctb::parser::tokenize	parser.h	/^      token tokenize(const char *&);$/;"	p	class:ctb::parser	access:private	signature:(const char *&)
ctb::parser::tokenize	parser.h	/^  parser::token parser::tokenize(const char *& ptr)$/;"	f	class:ctb::parser	signature:(const char *& ptr)
ctb::parser::ttype	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	g	class:ctb::parser	access:public
ctb::parser::type	parser.h	/^      ttype type(const token&);$/;"	p	class:ctb::parser	access:private	signature:(const token&)
ctb::parser::type	parser.h	/^  parser::ttype parser::type(const token& t)$/;"	f	class:ctb::parser	signature:(const token& t)
ctb::parser::val	parser.h	/^      int val(const token&);$/;"	p	class:ctb::parser	access:private	signature:(const token&)
ctb::parser::val	parser.h	/^  int parser::val(const parser::token& t)$/;"	f	class:ctb::parser	signature:(const parser::token& t)
ctb::pass	datatypes.h	/^  template <typename ... T> void pass(T...)$/;"	f	namespace:ctb	signature:(T....)
ctb::pass	split.h	/^  template <typename ... T> void pass(T...)$/;"	f	namespace:ctb	signature:(T....)
ctb::print	writer.h	/^  template<bool dolars = false, typename ... Types> std::string print (const Types&... params)$/;"	f	namespace:ctb	signature:(const Types&.... params)
ctb::proxy_	proxy.h	/^    class proxy_ {$/;"	c	namespace:ctb
ctb::proxy_::br_ct	proxy.h	/^      template <typename U> struct br_ct  { typedef decltype(std::declval<T const>()[std::declval<U>()]) type; };$/;"	s	class:ctb::proxy_	access:private
ctb::proxy_::br_ct::type	proxy.h	/^      template <typename U> struct br_ct  { typedef decltype(std::declval<T const>()[std::declval<U>()]) type; };$/;"	t	struct:ctb::proxy_::br_ct	access:public
ctb::proxy_::br_t	proxy.h	/^      template <typename U> struct br_t { typedef decltype(std::declval<T      >()[std::declval<U>()]) type; };$/;"	s	class:ctb::proxy_	access:private
ctb::proxy_::br_t::type	proxy.h	/^      template <typename U> struct br_t { typedef decltype(std::declval<T      >()[std::declval<U>()]) type; };$/;"	t	struct:ctb::proxy_::br_t	access:public
ctb::proxy_::data	proxy.h	/^      T data;$/;"	m	class:ctb::proxy_	access:private
ctb::proxy_::dereference	proxy.h	/^      template <typename U> U& dereference( U* t) const {return *t;};$/;"	f	class:ctb::proxy_	access:private	signature:( U* t) const
ctb::proxy_::dereference	proxy.h	/^      template <typename U> const U& dereference(const U& t) const {return t;};$/;"	f	class:ctb::proxy_	access:private	signature:(const U& t) const
ctb::proxy_::operator *	proxy.h	/^      const T& operator*() const { return data; }$/;"	f	class:ctb::proxy_	access:public	signature:() const
ctb::proxy_::operator ->	proxy.h	/^      const result_dereferenced_t* operator->() const { return &dereference(data); }$/;"	f	class:ctb::proxy_	access:public	signature:() const
ctb::proxy_::operator []	proxy.h	/^      template <typename U> typename br_ct<U>::type operator [](U args) const { return data[args]; }$/;"	f	class:ctb::proxy_	access:public	signature:(U args) const
ctb::proxy_::operator const T&	proxy.h	/^      operator const T&() const { return data; }$/;"	f	class:ctb::proxy_	access:public	signature:() const
ctb::proxy_::proxy_	proxy.h	/^      template <typename...L> proxy_(L&&... args) : data((std::forward<L>(args))...){}$/;"	f	class:ctb::proxy_	access:public	signature:(L&&.... args)
ctb::proxy_::r	proxy.h	/^      const result_t& r() const { return data; }$/;"	f	class:ctb::proxy_	access:public	signature:() const
ctb::proxy_::result_dereferenced_t	proxy.h	/^      typedef typename std::remove_reference<typename std::remove_pointer<T>::type>::type result_dereferenced_t;$/;"	t	class:ctb::proxy_	access:private
ctb::proxy_::result_t	proxy.h	/^      typedef typename std::remove_reference<T>::type result_t;$/;"	t	class:ctb::proxy_	access:private
ctb::proxy_::rw	proxy.h	/^      result_t& rw() { return data; }$/;"	f	class:ctb::proxy_	access:private	signature:()
ctb::split	datatypes.h	/^  std::vector<std::string> split(std::string str, char d, bool squash = false)$/;"	f	namespace:ctb	signature:(std::string str, char d, bool squash = false)
ctb::split	split.h	/^  std::vector<std::string> split(std::string str, char d, bool squash = false)$/;"	f	namespace:ctb	signature:(std::string str, char d, bool squash = false)
ctb::static_false	writer.h	/^  struct static_false{ const static bool value = false;};$/;"	s	namespace:ctb
ctb::static_false::value	writer.h	/^  struct static_false{ const static bool value = false;};$/;"	m	struct:ctb::static_false	access:public
ctb::static_true	writer.h	/^  struct static_true{ const static bool value = true;};$/;"	s	namespace:ctb
ctb::static_true::value	writer.h	/^  struct static_true{ const static bool value = true;};$/;"	m	struct:ctb::static_true	access:public
ctb::stoi	datatypes.h	/^  int stoi(std::string str)$/;"	f	namespace:ctb	signature:(std::string str)
ctb::string_to_flags	datatypes.h	/^    F string_to_flags(std::string str)$/;"	f	namespace:ctb	signature:(std::string str)
ctb::stringlist	datatypes.h	/^  typedef std::vector<std::string> stringlist;$/;"	t	namespace:ctb
ctb::stringlist	split.h	/^  typedef std::vector<std::string> stringlist;$/;"	t	namespace:ctb
ctb::taghandler_base	taghandler.h	/^  class taghandler_base$/;"	c	namespace:ctb
ctb::taghandler_base::is_satisfactory	taghandler.h	/^      virtual bool is_satisfactory(const std::string&) = 0;$/;"	p	class:ctb::taghandler_base	access:public	signature:(const std::string&)
ctb::tagmaster	tagmaster.h	/^    class tagmaster : public taghandler_base$/;"	c	namespace:ctb	inherits:taghandler_base
ctb::tagmaster::allowed	tagmaster.h	/^        F allowed;$/;"	m	class:ctb::tagmaster	access:private
ctb::tagmaster::at	tagmaster.h	/^        F at;$/;"	m	class:ctb::tagmaster	access:private
ctb::tagmaster::clear	tagmaster.h	/^        void clear();$/;"	p	class:ctb::tagmaster	access:public	signature:()
ctb::tagmaster::clear	tagmaster.h	/^  void tagmaster<F>::clear()$/;"	f	class:ctb::tagmaster	signature:()
ctb::tagmaster::excluded	tagmaster.h	/^        F excluded;$/;"	m	class:ctb::tagmaster	access:private
ctb::tagmaster::full	tagmaster.h	/^        F full;$/;"	m	class:ctb::tagmaster	access:private
ctb::tagmaster::is_satisfactory	tagmaster.h	/^        bool is_satisfactory(const std::string&);$/;"	p	class:ctb::tagmaster	access:public	signature:(const std::string&)
ctb::tagmaster::is_satisfactory	tagmaster.h	/^    bool tagmaster<F>::is_satisfactory(const std::string& str)$/;"	f	class:ctb::tagmaster	signature:(const std::string& str)
ctb::tagmaster::nonexcluded	tagmaster.h	/^        F nonexcluded;$/;"	m	class:ctb::tagmaster	access:private
ctb::tagmaster::required	tagmaster.h	/^        F required;$/;"	m	class:ctb::tagmaster	access:private
ctb::tagmaster::self_test	tagmaster.h	/^        static void self_test();$/;"	p	class:ctb::tagmaster	access:public	signature:()
ctb::tagmaster::self_test	tagmaster.h	/^  void tagmaster<F>::self_test()$/;"	f	class:ctb::tagmaster	signature:()
ctb::tagmaster::tagmaster	tagmaster.h	/^        tagmaster(const std::string& r = "",const std::string& a = "",const std::string& e = "", const std::string& ne = "");$/;"	p	class:ctb::tagmaster	access:public	signature:(const std::string& r = Ó,const std::string& a = Ó,const std::string& e = Ó, const std::string& ne = Ó)
ctb::tagmaster::tagmaster	tagmaster.h	/^    tagmaster<F>::tagmaster(const std::string& r,const std::string& a,const std::string& e,const std::string& ne) : at(1), full(0), tags_used()$/;"	f	class:ctb::tagmaster	signature:(const std::string& r,const std::string& a,const std::string& e,const std::string& ne)
ctb::tagmaster::tags_used	tagmaster.h	/^        std::map<std::string,F> tags_used;$/;"	m	class:ctb::tagmaster	access:private
ctb::tagmaster::to_mask	tagmaster.h	/^        F to_mask(const std::string&);$/;"	p	class:ctb::tagmaster	access:public	signature:(const std::string&)
ctb::tagmaster::to_mask	tagmaster.h	/^    F tagmaster<F>::to_mask(const std::string& str)$/;"	f	class:ctb::tagmaster	signature:(const std::string& str)
ctb::tagmaster_default	tagmaster.h	/^  typedef tagmaster<uint32_t> tagmaster_default;$/;"	t	namespace:ctb
ctb::test_loader	loader_test.h	/^    class test_loader$/;"	c	namespace:ctb
ctb::test_loader::adddebug	loader_test.h	/^          void adddebug(G& graph, const IT&, int frame, const stringlist&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(G& graph, const IT&, int frame, const stringlist&)
ctb::test_loader::adddebug	loader_test.h	/^  void test_loader<T,G,IT>::adddebug(G& gen, const IT& it, int depth, const stringlist& v)$/;"	f	class:ctb::test_loader	signature:(G& gen, const IT& it, int depth, const stringlist& v)
ctb::test_loader::export_graph	loader_test.h	/^          void export_graph(G& instab, std::ostream&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(G& instab, std::ostream&)
ctb::test_loader::export_graph	loader_test.h	/^    void test_loader<T,G,IT>::export_graph(G& graph, std::ostream&)$/;"	f	class:ctb::test_loader	signature:(G& graph, std::ostream&)
ctb::test_loader::export_instab	loader_test.h	/^          void export_instab(IT& instab, std::ostream&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(IT& instab, std::ostream&)
ctb::test_loader::export_instab	loader_test.h	/^    void test_loader<T,G,IT>::export_instab(IT& instab, std::ostream& s)$/;"	f	class:ctb::test_loader	signature:(IT& instab, std::ostream& s)
ctb::test_loader::gendbg	loader_test.h	/^        void gendbg(G& gen, const IT& it, typename T::vid_t v);$/;"	p	class:ctb::test_loader	access:private	signature:(G& gen, const IT& it, typename T::vid_t v)
ctb::test_loader::gendbg	loader_test.h	/^  void test_loader<T,G,IT>::gendbg(G& gen, const IT& it, typename T::vid_t v)$/;"	f	class:ctb::test_loader	signature:(G& gen, const IT& it, typename T::vid_t v)
ctb::test_loader::genvert	loader_test.h	/^        void genvert(const std::string& base, int i, typename IT::operation_t* op, const cartesian_multiplier<std::vector<typename T::opid_t> >& it, G& graph);$/;"	p	class:ctb::test_loader	access:private	signature:(const std::string& base, int i, typename IT::operation_t* op, const cartesian_multiplier<std::vector<typename T::opid_t> >& it, G& graph)
ctb::test_loader::genvert	loader_test.h	/^    void test_loader<T,G,IT>::genvert(const std::string& base, int i, typename IT::operation_t* op, const cartesian_multiplier<std::vector<typename T::opid_t> >& it, G& graph)$/;"	f	class:ctb::test_loader	signature:(const std::string& base, int i, typename IT::operation_t* op, const cartesian_multiplier<std::vector<typename T::opid_t> >& it, G& graph)
ctb::test_loader::get_name	loader_test.h	/^          static std::string get_name();$/;"	p	class:ctb::test_loader	access:public	signature:()
ctb::test_loader::get_name	loader_test.h	/^    std::string test_loader<T,G,IT>::get_name()$/;"	f	class:ctb::test_loader	signature:()
ctb::test_loader::get_op_name	loader_test.h	/^        static typename T::vid_t get_op_name(typename T::opid_t, const std::string& base, int v = -1);$/;"	p	class:ctb::test_loader	access:private	signature:(typename T::opid_t, const std::string& base, int v = -1)
ctb::test_loader::get_op_name	loader_test.h	/^    typename T::vid_t test_loader<T,G,IT>::get_op_name(typename T::opid_t t, const std::string& base, int v)$/;"	f	class:ctb::test_loader	signature:(typename T::opid_t t, const std::string& base, int v)
ctb::test_loader::ins	loader_test.h	/^        std::map<typename T::tid_t, std::vector<typename T::opid_t> > ins;$/;"	m	class:ctb::test_loader	access:private
ctb::test_loader::load_graph	loader_test.h	/^          void load_graph(G& graph, const IT&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(G& graph, const IT&)
ctb::test_loader::load_graph	loader_test.h	/^    void test_loader<T,G,IT>::load_graph(G& graph, const IT& instab)$/;"	f	class:ctb::test_loader	signature:(G& graph, const IT& instab)
ctb::test_loader::load_instab	loader_test.h	/^          void load_instab(IT& instab, std::istream&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(IT& instab, std::istream&)
ctb::test_loader::load_instab	loader_test.h	/^    void test_loader<T,G,IT>::load_instab(IT& instab, std::istream& s)$/;"	f	class:ctb::test_loader	signature:(IT& instab, std::istream& s)
ctb::test_loader::oid	loader_test.h	/^        int oid;$/;"	m	class:ctb::test_loader	access:private
ctb::test_loader::outs	loader_test.h	/^        std::map<typename T::tid_t, std::vector<typename T::opid_t> > outs;$/;"	m	class:ctb::test_loader	access:private
ctb::test_loader::pid	loader_test.h	/^        int pid;$/;"	m	class:ctb::test_loader	access:private
ctb::test_loader::self_test	loader_test.h	/^          static void self_test() ;$/;"	p	class:ctb::test_loader	access:public	signature:()
ctb::test_loader::self_test	loader_test.h	/^    void test_loader<T,G,IT>::self_test()$/;"	f	class:ctb::test_loader	signature:()
ctb::testloader_default	loader_test.h	/^  typedef test_loader<traits, generator_default, instruction_table_default> testloader_default;$/;"	t	namespace:ctb
ctb::to_string	datatypes.h	/^  std::string to_string(int i)$/;"	f	namespace:ctb	signature:(int i)
ctb::to_string	datatypes.h	/^  std::string to_string(std::string str)$/;"	f	namespace:ctb	signature:(std::string str)
ctb::to_string	writer.h	/^    std::string to_string(const writer<M,I,O,P>& w)$/;"	f	namespace:ctb	signature:(const writer<M,I,O,P>& w)
ctb::traits	datatypes.h	/^  struct traits$/;"	s	namespace:ctb
ctb::traits::flag_t	datatypes.h	/^    typedef uint32_t flag_t;$/;"	t	struct:ctb::traits	access:public
ctb::traits::maxarity	datatypes.h	/^    static const int maxarity = 3;$/;"	m	struct:ctb::traits	access:public
ctb::traits::opid_t	datatypes.h	/^    typedef std::string opid_t;$/;"	t	struct:ctb::traits	access:public
ctb::traits::param_t	datatypes.h	/^    typedef int param_t;$/;"	t	struct:ctb::traits	access:public
ctb::traits::tid_t	datatypes.h	/^    typedef std::string tid_t;$/;"	t	struct:ctb::traits	access:public
ctb::traits::vid_t	datatypes.h	/^    typedef std::string vid_t;$/;"	t	struct:ctb::traits	access:public
ctb::traits_conv_test	datatypes.h	/^  struct traits_conv_test$/;"	s	namespace:ctb
ctb::traits_conv_test::flag_t	datatypes.h	/^    typedef uint32_t flag_t;$/;"	t	struct:ctb::traits_conv_test	access:public
ctb::traits_conv_test::maxarity	datatypes.h	/^    static const int maxarity = 3;$/;"	m	struct:ctb::traits_conv_test	access:public
ctb::traits_conv_test::opid_t	datatypes.h	/^    typedef int opid_t;$/;"	t	struct:ctb::traits_conv_test	access:public
ctb::traits_conv_test::param_t	datatypes.h	/^    typedef std::string param_t;$/;"	t	struct:ctb::traits_conv_test	access:public
ctb::traits_conv_test::tid_t	datatypes.h	/^    typedef int tid_t;$/;"	t	struct:ctb::traits_conv_test	access:public
ctb::traits_conv_test::vid_t	datatypes.h	/^    typedef int vid_t;$/;"	t	struct:ctb::traits_conv_test	access:public
ctb::trim	datatypes.h	/^  std::string trim(const std::string& s)$/;"	f	namespace:ctb	signature:(const std::string& s)
ctb::warn	errorhandling.h	/^  void warn(std::string e)$/;"	f	namespace:ctb	signature:(std::string e)
ctb::warning	errorhandling.h	/^  void warning(std::string e)$/;"	f	namespace:ctb	signature:(std::string e)
ctb::writer	writer.h	/^    class writer $/;"	c	namespace:ctb
ctb::writer::add	writer.h	/^        template <bool preprocess> void add(std::string&& str, bool terminal) ;$/;"	p	class:ctb::writer	access:private	signature:(std::string&& str, bool terminal)
ctb::writer::add	writer.h	/^    void writer<M,I,O,P>::add(std::string&& str, bool terminal)$/;"	f	class:ctb::writer	signature:(std::string&& str, bool terminal)
ctb::writer::append	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename Types> writer<M,I,O,P>& append(Types str) ;$/;"	p	class:ctb::writer	access:public	signature:(Types str)
ctb::writer::append	writer.h	/^    template <dolar_mode dolars , typename Type> writer<M,I,O,P>& writer<M,I,O,P>::append(Type str)$/;"	f	class:ctb::writer	signature:(Type str)
ctb::writer::basic_ignorant_exporter	writer.h	/^        \/*operators*\/typedef writer<M, dIgnore, dExpand, P> basic_ignorant_exporter;$/;"	t	class:ctb::writer	access:public
ctb::writer::basic_importer	writer.h	/^        \/*operators*\/typedef writer<M, dLet, dEat, P> basic_importer;$/;"	t	class:ctb::writer	access:public
ctb::writer::buffer	writer.h	/^        std::string buffer; \/** serves as an intermediate buffer for multiple processing phases*\/$/;"	m	class:ctb::writer	access:private
ctb::writer::cartesian_test	writer.h	/^        \/*static*\/   static void cartesian_test() ;$/;"	p	class:ctb::writer	access:public	signature:()
ctb::writer::cartesian_test	writer.h	/^    void writer<M,I,O,P>::cartesian_test()$/;"	f	class:ctb::writer	signature:()
ctb::writer::clear	writer.h	/^        \/*others*\/   void clear() ;$/;"	p	class:ctb::writer	access:public	signature:()
ctb::writer::clear	writer.h	/^    void writer<M,I,O,P>::clear()  $/;"	f	class:ctb::writer	signature:()
ctb::writer::commit	writer.h	/^        template <dolar_mode dolars> void commit();$/;"	p	class:ctb::writer	access:private	signature:()
ctb::writer::commit	writer.h	/^    void writer<M,I,O,P>::commit()$/;"	f	class:ctb::writer	signature:()
ctb::writer::data	writer.h	/^        stringlist data; \/**holds (formatted) data*\/$/;"	m	class:ctb::writer	access:private
ctb::writer::from_file	writer.h	/^        \/*static*\/   static std::string from_file(const std::string& filename);$/;"	p	class:ctb::writer	access:public	signature:(const std::string& filename)
ctb::writer::from_file	writer.h	/^    std::string writer<M,I,O,P>::from_file(const std::string& filename)$/;"	f	class:ctb::writer	signature:(const std::string& filename)
ctb::writer::get_name	writer.h	/^        std::string get_name(const std::string& format, int& pos);$/;"	p	class:ctb::writer	access:private	signature:(const std::string& format, int& pos)
ctb::writer::get_name	writer.h	/^    std::string writer<M,I,O,P>::get_name(const std::string& format, int& pos)$/;"	f	class:ctb::writer	signature:(const std::string& format, int& pos)
ctb::writer::get_string	writer.h	/^        std::string get_string() const; \/\/does handle dolars internally!$/;"	p	class:ctb::writer	access:private	signature:() const
ctb::writer::get_string	writer.h	/^    std::string writer<M,I,O,P>::get_string() const$/;"	f	class:ctb::writer	signature:() const
ctb::writer::getnth	writer.h	/^        template <typename ... Types> void getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const stringlist& a, const Types&... params);$/;"	p	class:ctb::writer	access:private	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const stringlist& a, const Types&... params)
ctb::writer::getnth	writer.h	/^        template <typename ... Types> void getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const writer<M,I,O,P>& a, const Types&... params);$/;"	p	class:ctb::writer	access:private	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const writer<M,I,O,P>& a, const Types&... params)
ctb::writer::getnth	writer.h	/^        void getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw);$/;"	p	class:ctb::writer	access:private	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw)
ctb::writer::getnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const stringlist& a, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const stringlist& a, const Types&... params)
ctb::writer::getnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const writer<M,I,O,P>& a, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const writer<M,I,O,P>& a, const Types&... params)
ctb::writer::getnth	writer.h	/^    void writer<M,I,O,P>::getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw)$/;"	f	class:ctb::writer	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw)
ctb::writer::last_terminated	writer.h	/^        bool last_terminated;$/;"	m	class:ctb::writer	access:private
ctb::writer::list_concat	writer.h	/^        \/*others*\/   writer& list_concat(const std::string& delim);$/;"	p	class:ctb::writer	access:public	signature:(const std::string& delim)
ctb::writer::list_concat	writer.h	/^    writer<M,I,O,P> &writer<M,I,O,P>::list_concat(const std::string& delim)$/;"	f	class:ctb::writer	signature:(const std::string& delim)
ctb::writer::operator !=	writer.h	/^        \/*operators*\/bool operator!=(const writer& w) ;$/;"	p	class:ctb::writer	access:public	signature:(const writer& w)
ctb::writer::operator !=	writer.h	/^    bool writer<M,I,O,P>::operator!=(const writer& w)$/;"	f	class:ctb::writer	signature:(const writer& w)
ctb::writer::operator +=	writer.h	/^        \/*operators*\/writer& operator+=(const writer& w) ;$/;"	p	class:ctb::writer	access:public	signature:(const writer& w)
ctb::writer::operator +=	writer.h	/^        \/*operators*\/writer& operator+=(writer&& w) ;$/;"	p	class:ctb::writer	access:public	signature:(writer&& w)
ctb::writer::operator +=	writer.h	/^  writer<M,I,O,P>& writer<M,I,O,P>::operator+=(const writer& w)$/;"	f	class:ctb::writer	signature:(const writer& w)
ctb::writer::operator +=	writer.h	/^  writer<M,I,O,P>& writer<M,I,O,P>::operator+=(writer&& w)$/;"	f	class:ctb::writer	signature:(writer&& w)
ctb::writer::operator =	writer.h	/^        \/*operators*\/template<typename N> writer& operator=( const writer<N>& w) ;$/;"	p	class:ctb::writer	access:public	signature:( const writer<N>& w)
ctb::writer::operator =	writer.h	/^        \/*operators*\/template<typename N> writer& operator=( writer<N>&& w) ;$/;"	p	class:ctb::writer	access:public	signature:( writer<N>&& w)
ctb::writer::operator =	writer.h	/^    writer<M,I,O,P>& writer<M,I,O,P>::operator=(const writer<N>& w)$/;"	f	class:ctb::writer	signature:(const writer<N>& w)
ctb::writer::operator =	writer.h	/^    writer<M,I,O,P>& writer<M,I,O,P>::operator=(writer<N>&& w)$/;"	f	class:ctb::writer	signature:(writer<N>&& w)
ctb::writer::operator ==	writer.h	/^        \/*operators*\/bool operator==(const writer& w) ;$/;"	p	class:ctb::writer	access:public	signature:(const writer& w)
ctb::writer::operator ==	writer.h	/^    bool writer<M,I,O,P>::operator==(const writer& w)$/;"	f	class:ctb::writer	signature:(const writer& w)
ctb::writer::postprocess_allow	writer.h	/^        \/*operators*\/typedef writer<M, I, O, static_true> postprocess_allow;$/;"	t	class:ctb::writer	access:public
ctb::writer::postprocess_deny	writer.h	/^        \/*operators*\/typedef writer<M, I, O, static_false> postprocess_deny;$/;"	t	class:ctb::writer	access:public
ctb::writer::preprocessline	writer.h	/^        static std::vector<std::string> preprocessline(std::string line);$/;"	p	class:ctb::writer	access:private	signature:(std::string line)
ctb::writer::preprocessline	writer.h	/^    std::vector<std::string> writer<M,I,O,P>::preprocessline(std::string line)$/;"	f	class:ctb::writer	signature:(std::string line)
ctb::writer::print	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename ... Types> writer& print (const Types&... params) ;$/;"	p	class:ctb::writer	access:public	signature:(const Types&.... params)
ctb::writer::print	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print(const Types&... params)$/;"	f	class:ctb::writer	signature:(const Types&.... params)
ctb::writer::print_branch	writer.h	/^        template<dolar_mode dolars = I, typename ... Types> writer& print_branch (static_false s, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(static_false s, const Types&... params)
ctb::writer::print_branch	writer.h	/^        template<dolar_mode dolars = I, typename ... Types> writer& print_branch (static_true s,  const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(static_true s, const Types&... params)
ctb::writer::print_branch	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_branch(static_false postprocess, const Types&... params)$/;"	f	class:ctb::writer	signature:(static_false postprocess, const Types&... params)
ctb::writer::print_branch	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_branch(static_true postprocess, const Types&... params)$/;"	f	class:ctb::writer	signature:(static_true postprocess, const Types&... params)
ctb::writer::print_internal	writer.h	/^        template<dolar_mode dolars, bool preprocess, typename ... Types> writer& print_internal (const std::string& format, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(const std::string& format, const Types&... params)
ctb::writer::print_internal	writer.h	/^    template<dolar_mode dolars, bool preprocess, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_internal(const std::string& format, const Types&... params)  \/\/print("a[$1] = a[$1] $ $2", i, j) -> "a[i] = a[i] $ j$/;"	f	class:ctb::writer	signature:(const std::string& format, const Types&... params)
ctb::writer::print_type	writer.h	/^        template<dolar_mode dolars = I, bool preprocess, typename ... Types> writer& print_type (const std::string& format, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(const std::string& format, const Types&... params)
ctb::writer::print_type	writer.h	/^        template<dolar_mode dolars = I, bool preprocess, typename ... Types> writer& print_type (const writer& format, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(const writer& format, const Types&... params)
ctb::writer::print_type	writer.h	/^        template<dolar_mode dolars = I, bool preprocess, typename ... Types> writer& print_type (int, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(int, const Types&... params)
ctb::writer::print_type	writer.h	/^    template<dolar_mode dolars, bool preprocess, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_type( const std::string& format, const Types&... params)$/;"	f	class:ctb::writer	signature:( const std::string& format, const Types&... params)
ctb::writer::print_type	writer.h	/^    template<dolar_mode dolars, bool preprocess, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_type(const writer& format, const Types&... params)$/;"	f	class:ctb::writer	signature:(const writer& format, const Types&... params)
ctb::writer::print_type	writer.h	/^    template<dolar_mode dolars, bool preprocess, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_type(int num, const Types&... params)$/;"	f	class:ctb::writer	signature:(int num, const Types&... params)
ctb::writer::printf	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename ... Types> writer& printf(const std::string& filename, const Types&... params) ; \/** print, but the first argument is a filename of a file which is to be loaded instead of the format string *\/$/;"	p	class:ctb::writer	access:public	signature:(const std::string& filename, const Types&... params)
ctb::writer::printf	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::printf(const std::string& filename, const Types&... params)$/;"	f	class:ctb::writer	signature:(const std::string& filename, const Types&... params)
ctb::writer::printnth	writer.h	/^        template <typename ... Types> void printnth(int i, const int& num, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(int i, const int& num, const Types&... params)
ctb::writer::printnth	writer.h	/^        template <typename ... Types> void printnth(int i, const std::string& str, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(int i, const std::string& str, const Types&... params)
ctb::writer::printnth	writer.h	/^        template <typename ... Types> void printnth(int i, const writer& wrt, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(int i, const writer& wrt, const Types&... params)
ctb::writer::printnth	writer.h	/^        void printnth(int i);$/;"	p	class:ctb::writer	access:private	signature:(int i)
ctb::writer::printnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::printnth(int i, const int& num, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const int& num, const Types&... params)
ctb::writer::printnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::printnth(int i, const std::string& str, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const std::string& str, const Types&... params)
ctb::writer::printnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::printnth(int i, const writer& wrt, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const writer& wrt, const Types&... params)
ctb::writer::printnth	writer.h	/^    void writer<M,I,O,P>::printnth(int i)$/;"	f	class:ctb::writer	signature:(int i)
ctb::writer::process	writer.h	/^        template <bool preprocess> void process(int& pos, const std::string& format) ;$/;"	p	class:ctb::writer	access:private	signature:(int& pos, const std::string& format)
ctb::writer::process	writer.h	/^    void writer<M,I,O,P>::process(int& pos, const std::string& format)$/;"	f	class:ctb::writer	signature:(int& pos, const std::string& format)
ctb::writer::push	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename ... Types, typename Type> writer& push  (const Type& format, const Types&... params) ; \/** explicit push on a new line. To be used with list_concat for simple creation of delimited lists.*\/$/;"	p	class:ctb::writer	access:public	signature:(const Type& format, const Types&... params)
ctb::writer::push	writer.h	/^    template<dolar_mode dolars , typename ... Types, typename Type> writer<M,I,O,P>& writer<M,I,O,P>::push(const Type& format, const Types&... params)$/;"	f	class:ctb::writer	signature:(const Type& format, const Types&... params)
ctb::writer::pushf	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename ... Types> writer& pushf (const std::string& filename, const Types&... params) ; \/** pushf is again a file-loaded version of push *\/$/;"	p	class:ctb::writer	access:public	signature:(const std::string& filename, const Types&... params)
ctb::writer::pushf	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::pushf(const std::string& filename, const Types&... params)$/;"	f	class:ctb::writer	signature:(const std::string& filename, const Types&... params)
ctb::writer::self_test	writer.h	/^        \/*static*\/   static void self_test() ;$/;"	p	class:ctb::writer	access:public	signature:()
ctb::writer::self_test	writer.h	/^    void writer<M,I,O,P>::self_test()$/;"	f	class:ctb::writer	signature:()
ctb::writer::shake	writer.h	/^        template <typename J, typename N> static void shake(J itr, J itre, std::string line, std::vector<std::string>& output);$/;"	p	class:ctb::writer	access:private	signature:(J itr, J itre, std::string line, std::vector<std::string>& output)
ctb::writer::shake	writer.h	/^    void writer<M,I,O,P>::shake(J itr, J itre, std::string line, std::vector<std::string>& output)$/;"	f	class:ctb::writer	signature:(J itr, J itre, std::string line, std::vector<std::string>& output)
ctb::writer::size	writer.h	/^        \/*others*\/   int size() ;$/;"	p	class:ctb::writer	access:public	signature:()
ctb::writer::size	writer.h	/^  int writer<M,I,O,P>::size()$/;"	f	class:ctb::writer	signature:()
ctb::writer::strings	writer.h	/^        \/*others*\/   const stringlist& strings();$/;"	p	class:ctb::writer	access:public	signature:()
ctb::writer::strings	writer.h	/^    const stringlist& writer<M,I,O,P>::strings()$/;"	f	class:ctb::writer	signature:()
ctb::writer::to_file	writer.h	/^        \/*static*\/   static void to_file(const std::string& filename, const std::string& contents);$/;"	p	class:ctb::writer	access:public	signature:(const std::string& filename, const std::string& contents)
ctb::writer::to_file	writer.h	/^    void writer<M,I,O,P>::to_file(const std::string& filename,const std::string& contents)$/;"	f	class:ctb::writer	signature:(const std::string& filename,const std::string& contents)
ctb::writer::to_writer	writer.h	/^        const stringlist& to_writer(const stringlist& r);$/;"	p	class:ctb::writer	access:private	signature:(const stringlist& r)
ctb::writer::to_writer	writer.h	/^        const writer<M,I,O,P>& to_writer(const writer<M,I,O,P>& r);$/;"	p	class:ctb::writer	access:private	signature:(const writer<M,I,O,P>& r)
ctb::writer::to_writer	writer.h	/^        writer<M,I,O,P> to_writer(const int& r);$/;"	p	class:ctb::writer	access:private	signature:(const int& r)
ctb::writer::to_writer	writer.h	/^        writer<M,I,O,P> to_writer(const std::string& r);$/;"	p	class:ctb::writer	access:private	signature:(const std::string& r)
ctb::writer::to_writer	writer.h	/^    const stringlist& writer<M,I,O,P>::to_writer(const stringlist& r)$/;"	f	class:ctb::writer	signature:(const stringlist& r)
ctb::writer::to_writer	writer.h	/^    const writer<M,I,O,P>& writer<M,I,O,P>::to_writer(const writer<M,I,O,P>& r)$/;"	f	class:ctb::writer	signature:(const writer<M,I,O,P>& r)
ctb::writer::to_writer	writer.h	/^    writer<M,I,O,P> writer<M,I,O,P>::to_writer(const int& r)$/;"	f	class:ctb::writer	signature:(const int& r)
ctb::writer::to_writer	writer.h	/^    writer<M,I,O,P> writer<M,I,O,P>::to_writer(const std::string& r)$/;"	f	class:ctb::writer	signature:(const std::string& r)
ctb::writer::trim	writer.h	/^        void trim() ;$/;"	p	class:ctb::writer	access:private	signature:()
ctb::writer::trim	writer.h	/^    void writer<M,I,O,P>::trim()$/;"	f	class:ctb::writer	signature:()
ctb::writer::write	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> void write(std::ostream& ss) const ;$/;"	p	class:ctb::writer	access:public	signature:(std::ostream& ss) const
ctb::writer::write	writer.h	/^    void writer<M,I,O,P>::write(std::ostream& ss)  const$/;"	f	class:ctb::writer	signature:(std::ostream& ss) const
ctb::writer::write_file	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> void write_file(std::string filename) const ;$/;"	p	class:ctb::writer	access:public	signature:(std::string filename) const
ctb::writer::write_file	writer.h	/^    void writer<M,I,O,P>::write_file(std::string filename)   const$/;"	f	class:ctb::writer	signature:(std::string filename) const
ctb::writer::write_indent	writer.h	/^        template <dolar_mode dolars> void write_indent(std::ostream& ss, const std::string& str, int indent, int nobreak) const ;$/;"	p	class:ctb::writer	access:private	signature:(std::ostream& ss, const std::string& str, int indent, int nobreak) const
ctb::writer::write_indent	writer.h	/^    void writer<M,I,O,P>::write_indent(std::ostream& ss, const std::string& str, int indent, int nobreak) const$/;"	f	class:ctb::writer	signature:(std::ostream& ss, const std::string& str, int indent, int nobreak) const
ctb::writer::write_line	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> std::string write_line(int i) const ;$/;"	p	class:ctb::writer	access:public	signature:(int i) const
ctb::writer::write_line	writer.h	/^  std::string writer<M,I,O,P>::write_line(int i) const$/;"	f	class:ctb::writer	signature:(int i) const
ctb::writer::write_std	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> void write_std() const ;$/;"	p	class:ctb::writer	access:public	signature:() const
ctb::writer::write_std	writer.h	/^    void writer<M,I,O,P>::write_std()   const$/;"	f	class:ctb::writer	signature:() const
ctb::writer::write_str	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> std::string write_str() const ;$/;"	p	class:ctb::writer	access:public	signature:() const
ctb::writer::write_str	writer.h	/^    std::string writer<M,I,O,P>::write_str() const$/;"	f	class:ctb::writer	signature:() const
ctb::writer::writer	writer.h	/^        \/*operators*\/ writer(const stringlist& writer);$/;"	p	class:ctb::writer	access:public	signature:(const stringlist& writer)
ctb::writer::writer	writer.h	/^        \/*operators*\/ writer(stringlist&& writer);$/;"	p	class:ctb::writer	access:public	signature:(stringlist&& writer)
ctb::writer::writer	writer.h	/^        \/*operators*\/template<typename N> writer(const writer<N>& writer);$/;"	p	class:ctb::writer	access:public	signature:(const writer<N>& writer)
ctb::writer::writer	writer.h	/^        \/*operators*\/template<typename N> writer(writer<N>&& writer);$/;"	p	class:ctb::writer	access:public	signature:(writer<N>&& writer)
ctb::writer::writer	writer.h	/^        \/*operators*\/writer();$/;"	p	class:ctb::writer	access:public	signature:()
ctb::writer::writer	writer.h	/^        \/*operators*\/writer(const std::initializer_list<std::string>& init);\/*this one is literal! no parsing here*\/$/;"	p	class:ctb::writer	access:public	signature:(const std::initializer_list<std::string>& init)
ctb::writer::writer	writer.h	/^    writer<M,I,O,P>::writer() : data(), last_terminated(true)$/;"	f	class:ctb::writer	signature:()
ctb::writer::writer	writer.h	/^    writer<M,I,O,P>::writer(const std::initializer_list<std::string>& init) : data(init), last_terminated(true)\/*the strings are taken literary - id est not formatted*\/$/;"	f	class:ctb::writer	signature:(const std::initializer_list<std::string>& init)
ctb::writer::writer	writer.h	/^    writer<M,I,O,P>::writer(const stringlist& s) : data(s), last_terminated(true)$/;"	f	class:ctb::writer	signature:(const stringlist& s)
ctb::writer::writer	writer.h	/^    writer<M,I,O,P>::writer(const writer<N>& w) : data(w.data), last_terminated(w.last_terminated)$/;"	f	class:ctb::writer	signature:(const writer<N>& w)
ctb::writer::writer	writer.h	/^    writer<M,I,O,P>::writer(stringlist&& s) : data(std::move(s)), last_terminated(true)$/;"	f	class:ctb::writer	signature:(stringlist&& s)
ctb::writer::writer	writer.h	/^    writer<M,I,O,P>::writer(writer<N>&& w) : data(std::move(w.data)), last_terminated(w.last_terminated)$/;"	f	class:ctb::writer	signature:(writer<N>&& w)
ctb::writer_default	writer.h	/^  typedef writer<aliasenv_empty_cpp> writer_default;$/;"	t	namespace:ctb
ctb::writer_plain	writer.h	/^  typedef writer<aliasenv_empty> writer_plain;$/;"	t	namespace:ctb
ctb::writer_tag	writer.h	/^  template <class M, dolar_mode I, dolar_mode O, class P> class writer_tag { };$/;"	c	namespace:ctb
ctb::xml_loader	loader_xml.h	/^    class xml_loader$/;"	c	namespace:ctb
ctb::xml_loader::export_graph	loader_xml.h	/^        void export_graph(G& graph, std::ostream& stream) ;$/;"	p	class:ctb::xml_loader	access:public	signature:(G& graph, std::ostream& stream)
ctb::xml_loader::export_graph	loader_xml.h	/^    void xml_loader<T,G,IT>::export_graph(G& graph, std::ostream& stream)$/;"	f	class:ctb::xml_loader	signature:(G& graph, std::ostream& stream)
ctb::xml_loader::export_instab	loader_xml.h	/^        void export_instab(IT& instab, std::ostream& stream) ;$/;"	p	class:ctb::xml_loader	access:public	signature:(IT& instab, std::ostream& stream)
ctb::xml_loader::export_instab	loader_xml.h	/^    void xml_loader<T,G,IT>::export_instab(IT& instab, std::ostream& stream)$/;"	f	class:ctb::xml_loader	signature:(IT& instab, std::ostream& stream)
ctb::xml_loader::get_name	loader_xml.h	/^        static std::string get_name();$/;"	p	class:ctb::xml_loader	access:public	signature:()
ctb::xml_loader::get_name	loader_xml.h	/^    std::string xml_loader<T,G,IT>::get_name()$/;"	f	class:ctb::xml_loader	signature:()
ctb::xml_loader::getanyint	loader_xml.h	/^        static int getanyint(tinyxml2::XMLNode * node, std::string name, int def = 0);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode * node, std::string name, int def = 0)
ctb::xml_loader::getanyint	loader_xml.h	/^    int xml_loader<T,G,IT>::getanyint(tinyxml2::XMLNode * node, std::string name, int def)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name, int def)
ctb::xml_loader::getanystr	loader_xml.h	/^        static std::string getanystr(tinyxml2::XMLNode * node, std::string name);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode * node, std::string name)
ctb::xml_loader::getanystr	loader_xml.h	/^    std::string xml_loader<T,G,IT>::getanystr(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
ctb::xml_loader::getint	loader_xml.h	/^        static int getint(tinyxml2::XMLNode * node, std::string name);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode * node, std::string name)
ctb::xml_loader::getint	loader_xml.h	/^    int xml_loader<T,G,IT>::getint(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
ctb::xml_loader::getstr	loader_xml.h	/^        static std::string getstr(tinyxml2::XMLNode * node, std::string name);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode * node, std::string name)
ctb::xml_loader::getstr	loader_xml.h	/^    std::string xml_loader<T,G,IT>::getstr(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
ctb::xml_loader::hasval	loader_xml.h	/^        static bool hasval(tinyxml2::XMLNode* node, std::string name);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode* node, std::string name)
ctb::xml_loader::hasval	loader_xml.h	/^    bool xml_loader<T,G,IT>::hasval(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
ctb::xml_loader::load_graph	loader_xml.h	/^        void load_graph(G& graph, std::istream& stream) ;$/;"	p	class:ctb::xml_loader	access:public	signature:(G& graph, std::istream& stream)
ctb::xml_loader::load_graph	loader_xml.h	/^    void xml_loader<T,G,IT>::load_graph(G& graph, std::istream& stream)$/;"	f	class:ctb::xml_loader	signature:(G& graph, std::istream& stream)
ctb::xml_loader::load_instab	loader_xml.h	/^        void load_instab(IT& instab, std::istream& stream) ;$/;"	p	class:ctb::xml_loader	access:public	signature:(IT& instab, std::istream& stream)
ctb::xml_loader::load_instab	loader_xml.h	/^    void xml_loader<T,G,IT>::load_instab(IT& instab, std::istream& stream)$/;"	f	class:ctb::xml_loader	signature:(IT& instab, std::istream& stream)
ctb::xml_loader::self_test	loader_xml.h	/^        static void self_test() ;$/;"	p	class:ctb::xml_loader	access:public	signature:()
ctb::xml_loader::self_test	loader_xml.h	/^    void xml_loader<T,G,IT>::self_test()$/;"	f	class:ctb::xml_loader	signature:()
ctb_GUARD	ctb.h	2;"	d
ctb_default	ctb.h	/^  typedef ctb<traits, instruction_table<traits> > ctb_default;$/;"	t	namespace:ctb
cvBW	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
cvCode	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
cvNote	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
cvTId	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
cvType	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
cvW	loader_csv.h	/^        enum cols_version     {cvNote,cvType,cvTId,cvBW,cvW,cvCode};$/;"	e	enum:ctb::csv_loader::cols_version
cvt	conversions.h	/^struct cvt$/;"	s	namespace:ctb
cvt	conversions.h	/^struct cvt<A,A>$/;"	s	namespace:ctb
cvt	conversions.h	/^template <> struct cvt<int,std::string> { static std::string convert(const int& a){return std::to_string(a);}; };$/;"	s	namespace:ctb
cvt	conversions.h	/^template <> struct cvt<std::string,int>$/;"	s	namespace:ctb
dEat	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	e	enum:ctb::dolar_mode
dExpand	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	e	enum:ctb::dolar_mode
dIgnore	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	e	enum:ctb::dolar_mode
dLet	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	e	enum:ctb::dolar_mode
data	proxy.h	/^      T data;$/;"	m	class:ctb::proxy_	access:private
data	writer.h	/^        stringlist data; \/**holds (formatted) data*\/$/;"	m	class:ctb::writer	access:private
data_check_$1	templates/simu_decl_cont.h	/^std::vector<$2> data_check_$1;$/;"	v
data_check_0	unit_test5/output.h	/^  std::vector<int32_t> data_check_0;$/;"	m	class:tester	access:private
data_check_1	unit_test4/output.h	/^  std::vector<double> data_check_1;$/;"	m	class:tester	access:private
data_check_10	unit_test4/output.h	/^  std::vector<uint8_t> data_check_10;$/;"	m	class:tester	access:private
data_check_100	unit_test4/output.h	/^  std::vector<bool> data_check_100;$/;"	m	class:tester	access:private
data_check_101	unit_test4/output.h	/^  std::vector<bool> data_check_101;$/;"	m	class:tester	access:private
data_check_102	unit_test4/output.h	/^  std::vector<bool> data_check_102;$/;"	m	class:tester	access:private
data_check_103	unit_test4/output.h	/^  std::vector<uint16_t> data_check_103;$/;"	m	class:tester	access:private
data_check_104	unit_test4/output.h	/^  std::vector<double> data_check_104;$/;"	m	class:tester	access:private
data_check_105	unit_test4/output.h	/^  std::vector<float> data_check_105;$/;"	m	class:tester	access:private
data_check_106	unit_test4/output.h	/^  std::vector<int16_t> data_check_106;$/;"	m	class:tester	access:private
data_check_107	unit_test4/output.h	/^  std::vector<int32_t> data_check_107;$/;"	m	class:tester	access:private
data_check_108	unit_test4/output.h	/^  std::vector<int64_t> data_check_108;$/;"	m	class:tester	access:private
data_check_109	unit_test4/output.h	/^  std::vector<int8_t> data_check_109;$/;"	m	class:tester	access:private
data_check_11	unit_test4/output.h	/^  std::vector<bool> data_check_11;$/;"	m	class:tester	access:private
data_check_110	unit_test4/output.h	/^  std::vector<uint16_t> data_check_110;$/;"	m	class:tester	access:private
data_check_111	unit_test4/output.h	/^  std::vector<uint32_t> data_check_111;$/;"	m	class:tester	access:private
data_check_112	unit_test4/output.h	/^  std::vector<uint64_t> data_check_112;$/;"	m	class:tester	access:private
data_check_113	unit_test4/output.h	/^  std::vector<uint8_t> data_check_113;$/;"	m	class:tester	access:private
data_check_114	unit_test4/output.h	/^  std::vector<uint32_t> data_check_114;$/;"	m	class:tester	access:private
data_check_115	unit_test4/output.h	/^  std::vector<double> data_check_115;$/;"	m	class:tester	access:private
data_check_116	unit_test4/output.h	/^  std::vector<float> data_check_116;$/;"	m	class:tester	access:private
data_check_117	unit_test4/output.h	/^  std::vector<int16_t> data_check_117;$/;"	m	class:tester	access:private
data_check_118	unit_test4/output.h	/^  std::vector<int32_t> data_check_118;$/;"	m	class:tester	access:private
data_check_119	unit_test4/output.h	/^  std::vector<int64_t> data_check_119;$/;"	m	class:tester	access:private
data_check_12	unit_test4/output.h	/^  std::vector<bool> data_check_12;$/;"	m	class:tester	access:private
data_check_120	unit_test4/output.h	/^  std::vector<int8_t> data_check_120;$/;"	m	class:tester	access:private
data_check_121	unit_test4/output.h	/^  std::vector<uint16_t> data_check_121;$/;"	m	class:tester	access:private
data_check_122	unit_test4/output.h	/^  std::vector<uint32_t> data_check_122;$/;"	m	class:tester	access:private
data_check_123	unit_test4/output.h	/^  std::vector<uint64_t> data_check_123;$/;"	m	class:tester	access:private
data_check_124	unit_test4/output.h	/^  std::vector<uint8_t> data_check_124;$/;"	m	class:tester	access:private
data_check_125	unit_test4/output.h	/^  std::vector<uint64_t> data_check_125;$/;"	m	class:tester	access:private
data_check_126	unit_test4/output.h	/^  std::vector<double> data_check_126;$/;"	m	class:tester	access:private
data_check_127	unit_test4/output.h	/^  std::vector<float> data_check_127;$/;"	m	class:tester	access:private
data_check_128	unit_test4/output.h	/^  std::vector<int16_t> data_check_128;$/;"	m	class:tester	access:private
data_check_129	unit_test4/output.h	/^  std::vector<int32_t> data_check_129;$/;"	m	class:tester	access:private
data_check_13	unit_test4/output.h	/^  std::vector<bool> data_check_13;$/;"	m	class:tester	access:private
data_check_130	unit_test4/output.h	/^  std::vector<int64_t> data_check_130;$/;"	m	class:tester	access:private
data_check_131	unit_test4/output.h	/^  std::vector<int8_t> data_check_131;$/;"	m	class:tester	access:private
data_check_132	unit_test4/output.h	/^  std::vector<uint16_t> data_check_132;$/;"	m	class:tester	access:private
data_check_133	unit_test4/output.h	/^  std::vector<uint32_t> data_check_133;$/;"	m	class:tester	access:private
data_check_134	unit_test4/output.h	/^  std::vector<uint64_t> data_check_134;$/;"	m	class:tester	access:private
data_check_135	unit_test4/output.h	/^  std::vector<uint8_t> data_check_135;$/;"	m	class:tester	access:private
data_check_136	unit_test4/output.h	/^  std::vector<uint8_t> data_check_136;$/;"	m	class:tester	access:private
data_check_137	unit_test4/output.h	/^  std::vector<double> data_check_137;$/;"	m	class:tester	access:private
data_check_138	unit_test4/output.h	/^  std::vector<float> data_check_138;$/;"	m	class:tester	access:private
data_check_139	unit_test4/output.h	/^  std::vector<int16_t> data_check_139;$/;"	m	class:tester	access:private
data_check_14	unit_test4/output.h	/^  std::vector<int16_t> data_check_14;$/;"	m	class:tester	access:private
data_check_140	unit_test4/output.h	/^  std::vector<int32_t> data_check_140;$/;"	m	class:tester	access:private
data_check_141	unit_test4/output.h	/^  std::vector<int64_t> data_check_141;$/;"	m	class:tester	access:private
data_check_142	unit_test4/output.h	/^  std::vector<int8_t> data_check_142;$/;"	m	class:tester	access:private
data_check_143	unit_test4/output.h	/^  std::vector<uint16_t> data_check_143;$/;"	m	class:tester	access:private
data_check_144	unit_test4/output.h	/^  std::vector<uint32_t> data_check_144;$/;"	m	class:tester	access:private
data_check_145	unit_test4/output.h	/^  std::vector<uint64_t> data_check_145;$/;"	m	class:tester	access:private
data_check_146	unit_test4/output.h	/^  std::vector<uint8_t> data_check_146;$/;"	m	class:tester	access:private
data_check_147	unit_test4/output.h	/^  std::vector<double> data_check_147;$/;"	m	class:tester	access:private
data_check_148	unit_test4/output.h	/^  std::vector<float> data_check_148;$/;"	m	class:tester	access:private
data_check_149	unit_test4/output.h	/^  std::vector<int16_t> data_check_149;$/;"	m	class:tester	access:private
data_check_15	unit_test4/output.h	/^  std::vector<int32_t> data_check_15;$/;"	m	class:tester	access:private
data_check_150	unit_test4/output.h	/^  std::vector<int32_t> data_check_150;$/;"	m	class:tester	access:private
data_check_151	unit_test4/output.h	/^  std::vector<int64_t> data_check_151;$/;"	m	class:tester	access:private
data_check_152	unit_test4/output.h	/^  std::vector<int8_t> data_check_152;$/;"	m	class:tester	access:private
data_check_153	unit_test4/output.h	/^  std::vector<uint16_t> data_check_153;$/;"	m	class:tester	access:private
data_check_154	unit_test4/output.h	/^  std::vector<uint32_t> data_check_154;$/;"	m	class:tester	access:private
data_check_155	unit_test4/output.h	/^  std::vector<uint64_t> data_check_155;$/;"	m	class:tester	access:private
data_check_156	unit_test4/output.h	/^  std::vector<uint8_t> data_check_156;$/;"	m	class:tester	access:private
data_check_157	unit_test4/output.h	/^  std::vector<bool> data_check_157;$/;"	m	class:tester	access:private
data_check_158	unit_test4/output.h	/^  std::vector<bool> data_check_158;$/;"	m	class:tester	access:private
data_check_159	unit_test4/output.h	/^  std::vector<bool> data_check_159;$/;"	m	class:tester	access:private
data_check_16	unit_test4/output.h	/^  std::vector<int64_t> data_check_16;$/;"	m	class:tester	access:private
data_check_160	unit_test4/output.h	/^  std::vector<uint8_t> data_check_160;$/;"	m	class:tester	access:private
data_check_161	unit_test4/output.h	/^  std::vector<uint8_t> data_check_161;$/;"	m	class:tester	access:private
data_check_162	unit_test4/output.h	/^  std::vector<uint8_t> data_check_162;$/;"	m	class:tester	access:private
data_check_163	unit_test4/output.h	/^  std::vector<uint8_t> data_check_163;$/;"	m	class:tester	access:private
data_check_164	unit_test4/output.h	/^  std::vector<uint8_t> data_check_164;$/;"	m	class:tester	access:private
data_check_165	unit_test4/output.h	/^  std::vector<uint8_t> data_check_165;$/;"	m	class:tester	access:private
data_check_166	unit_test4/output.h	/^  std::vector<uint8_t> data_check_166;$/;"	m	class:tester	access:private
data_check_167	unit_test4/output.h	/^  std::vector<uint8_t> data_check_167;$/;"	m	class:tester	access:private
data_check_168	unit_test4/output.h	/^  std::vector<uint8_t> data_check_168;$/;"	m	class:tester	access:private
data_check_169	unit_test4/output.h	/^  std::vector<uint8_t> data_check_169;$/;"	m	class:tester	access:private
data_check_17	unit_test4/output.h	/^  std::vector<int8_t> data_check_17;$/;"	m	class:tester	access:private
data_check_170	unit_test4/output.h	/^  std::vector<uint8_t> data_check_170;$/;"	m	class:tester	access:private
data_check_171	unit_test4/output.h	/^  std::vector<bool> data_check_171;$/;"	m	class:tester	access:private
data_check_172	unit_test4/output.h	/^  std::vector<bool> data_check_172;$/;"	m	class:tester	access:private
data_check_173	unit_test4/output.h	/^  std::vector<bool> data_check_173;$/;"	m	class:tester	access:private
data_check_174	unit_test4/output.h	/^  std::vector<uint8_t> data_check_174;$/;"	m	class:tester	access:private
data_check_175	unit_test4/output.h	/^  std::vector<uint8_t> data_check_175;$/;"	m	class:tester	access:private
data_check_176	unit_test4/output.h	/^  std::vector<uint8_t> data_check_176;$/;"	m	class:tester	access:private
data_check_177	unit_test4/output.h	/^  std::vector<uint8_t> data_check_177;$/;"	m	class:tester	access:private
data_check_178	unit_test4/output.h	/^  std::vector<uint8_t> data_check_178;$/;"	m	class:tester	access:private
data_check_179	unit_test4/output.h	/^  std::vector<uint8_t> data_check_179;$/;"	m	class:tester	access:private
data_check_18	unit_test4/output.h	/^  std::vector<uint8_t> data_check_18;$/;"	m	class:tester	access:private
data_check_180	unit_test4/output.h	/^  std::vector<uint8_t> data_check_180;$/;"	m	class:tester	access:private
data_check_181	unit_test4/output.h	/^  std::vector<uint8_t> data_check_181;$/;"	m	class:tester	access:private
data_check_182	unit_test4/output.h	/^  std::vector<uint8_t> data_check_182;$/;"	m	class:tester	access:private
data_check_183	unit_test4/output.h	/^  std::vector<uint8_t> data_check_183;$/;"	m	class:tester	access:private
data_check_184	unit_test4/output.h	/^  std::vector<uint8_t> data_check_184;$/;"	m	class:tester	access:private
data_check_185	unit_test4/output.h	/^  std::vector<bool> data_check_185;$/;"	m	class:tester	access:private
data_check_186	unit_test4/output.h	/^  std::vector<bool> data_check_186;$/;"	m	class:tester	access:private
data_check_187	unit_test4/output.h	/^  std::vector<bool> data_check_187;$/;"	m	class:tester	access:private
data_check_188	unit_test4/output.h	/^  std::vector<uint8_t> data_check_188;$/;"	m	class:tester	access:private
data_check_189	unit_test4/output.h	/^  std::vector<uint8_t> data_check_189;$/;"	m	class:tester	access:private
data_check_19	unit_test4/output.h	/^  std::vector<uint16_t> data_check_19;$/;"	m	class:tester	access:private
data_check_190	unit_test4/output.h	/^  std::vector<uint8_t> data_check_190;$/;"	m	class:tester	access:private
data_check_191	unit_test4/output.h	/^  std::vector<uint8_t> data_check_191;$/;"	m	class:tester	access:private
data_check_192	unit_test4/output.h	/^  std::vector<uint8_t> data_check_192;$/;"	m	class:tester	access:private
data_check_193	unit_test4/output.h	/^  std::vector<uint8_t> data_check_193;$/;"	m	class:tester	access:private
data_check_194	unit_test4/output.h	/^  std::vector<uint8_t> data_check_194;$/;"	m	class:tester	access:private
data_check_195	unit_test4/output.h	/^  std::vector<uint8_t> data_check_195;$/;"	m	class:tester	access:private
data_check_196	unit_test4/output.h	/^  std::vector<uint8_t> data_check_196;$/;"	m	class:tester	access:private
data_check_197	unit_test4/output.h	/^  std::vector<uint8_t> data_check_197;$/;"	m	class:tester	access:private
data_check_198	unit_test4/output.h	/^  std::vector<uint8_t> data_check_198;$/;"	m	class:tester	access:private
data_check_199	unit_test4/output.h	/^  std::vector<bool> data_check_199;$/;"	m	class:tester	access:private
data_check_2	unit_test4/output.h	/^  std::vector<float> data_check_2;$/;"	m	class:tester	access:private
data_check_20	unit_test4/output.h	/^  std::vector<uint32_t> data_check_20;$/;"	m	class:tester	access:private
data_check_200	unit_test4/output.h	/^  std::vector<bool> data_check_200;$/;"	m	class:tester	access:private
data_check_201	unit_test4/output.h	/^  std::vector<bool> data_check_201;$/;"	m	class:tester	access:private
data_check_202	unit_test4/output.h	/^  std::vector<uint8_t> data_check_202;$/;"	m	class:tester	access:private
data_check_203	unit_test4/output.h	/^  std::vector<uint8_t> data_check_203;$/;"	m	class:tester	access:private
data_check_204	unit_test4/output.h	/^  std::vector<uint8_t> data_check_204;$/;"	m	class:tester	access:private
data_check_205	unit_test4/output.h	/^  std::vector<uint8_t> data_check_205;$/;"	m	class:tester	access:private
data_check_206	unit_test4/output.h	/^  std::vector<uint8_t> data_check_206;$/;"	m	class:tester	access:private
data_check_207	unit_test4/output.h	/^  std::vector<uint8_t> data_check_207;$/;"	m	class:tester	access:private
data_check_208	unit_test4/output.h	/^  std::vector<uint8_t> data_check_208;$/;"	m	class:tester	access:private
data_check_209	unit_test4/output.h	/^  std::vector<uint8_t> data_check_209;$/;"	m	class:tester	access:private
data_check_21	unit_test4/output.h	/^  std::vector<uint64_t> data_check_21;$/;"	m	class:tester	access:private
data_check_210	unit_test4/output.h	/^  std::vector<uint8_t> data_check_210;$/;"	m	class:tester	access:private
data_check_211	unit_test4/output.h	/^  std::vector<uint8_t> data_check_211;$/;"	m	class:tester	access:private
data_check_212	unit_test4/output.h	/^  std::vector<uint8_t> data_check_212;$/;"	m	class:tester	access:private
data_check_213	unit_test4/output.h	/^  std::vector<int16_t> data_check_213;$/;"	m	class:tester	access:private
data_check_214	unit_test4/output.h	/^  std::vector<int32_t> data_check_214;$/;"	m	class:tester	access:private
data_check_215	unit_test4/output.h	/^  std::vector<int64_t> data_check_215;$/;"	m	class:tester	access:private
data_check_216	unit_test4/output.h	/^  std::vector<int8_t> data_check_216;$/;"	m	class:tester	access:private
data_check_217	unit_test4/output.h	/^  std::vector<uint16_t> data_check_217;$/;"	m	class:tester	access:private
data_check_218	unit_test4/output.h	/^  std::vector<uint32_t> data_check_218;$/;"	m	class:tester	access:private
data_check_219	unit_test4/output.h	/^  std::vector<uint64_t> data_check_219;$/;"	m	class:tester	access:private
data_check_22	unit_test4/output.h	/^  std::vector<uint8_t> data_check_22;$/;"	m	class:tester	access:private
data_check_220	unit_test4/output.h	/^  std::vector<uint8_t> data_check_220;$/;"	m	class:tester	access:private
data_check_221	unit_test4/output.h	/^  std::vector<bool> data_check_221;$/;"	m	class:tester	access:private
data_check_222	unit_test4/output.h	/^  std::vector<bool> data_check_222;$/;"	m	class:tester	access:private
data_check_223	unit_test4/output.h	/^  std::vector<bool> data_check_223;$/;"	m	class:tester	access:private
data_check_224	unit_test4/output.h	/^  std::vector<uint8_t> data_check_224;$/;"	m	class:tester	access:private
data_check_225	unit_test4/output.h	/^  std::vector<uint8_t> data_check_225;$/;"	m	class:tester	access:private
data_check_226	unit_test4/output.h	/^  std::vector<uint8_t> data_check_226;$/;"	m	class:tester	access:private
data_check_227	unit_test4/output.h	/^  std::vector<uint8_t> data_check_227;$/;"	m	class:tester	access:private
data_check_228	unit_test4/output.h	/^  std::vector<uint8_t> data_check_228;$/;"	m	class:tester	access:private
data_check_229	unit_test4/output.h	/^  std::vector<uint8_t> data_check_229;$/;"	m	class:tester	access:private
data_check_23	unit_test4/output.h	/^  std::vector<double> data_check_23;$/;"	m	class:tester	access:private
data_check_230	unit_test4/output.h	/^  std::vector<uint8_t> data_check_230;$/;"	m	class:tester	access:private
data_check_231	unit_test4/output.h	/^  std::vector<uint8_t> data_check_231;$/;"	m	class:tester	access:private
data_check_232	unit_test4/output.h	/^  std::vector<uint8_t> data_check_232;$/;"	m	class:tester	access:private
data_check_233	unit_test4/output.h	/^  std::vector<uint8_t> data_check_233;$/;"	m	class:tester	access:private
data_check_234	unit_test4/output.h	/^  std::vector<uint8_t> data_check_234;$/;"	m	class:tester	access:private
data_check_235	unit_test4/output.h	/^  std::vector<int16_t> data_check_235;$/;"	m	class:tester	access:private
data_check_236	unit_test4/output.h	/^  std::vector<int32_t> data_check_236;$/;"	m	class:tester	access:private
data_check_237	unit_test4/output.h	/^  std::vector<int64_t> data_check_237;$/;"	m	class:tester	access:private
data_check_238	unit_test4/output.h	/^  std::vector<int8_t> data_check_238;$/;"	m	class:tester	access:private
data_check_239	unit_test4/output.h	/^  std::vector<uint16_t> data_check_239;$/;"	m	class:tester	access:private
data_check_24	unit_test4/output.h	/^  std::vector<float> data_check_24;$/;"	m	class:tester	access:private
data_check_240	unit_test4/output.h	/^  std::vector<uint32_t> data_check_240;$/;"	m	class:tester	access:private
data_check_241	unit_test4/output.h	/^  std::vector<uint64_t> data_check_241;$/;"	m	class:tester	access:private
data_check_242	unit_test4/output.h	/^  std::vector<uint8_t> data_check_242;$/;"	m	class:tester	access:private
data_check_243	unit_test4/output.h	/^  std::vector<double> data_check_243;$/;"	m	class:tester	access:private
data_check_244	unit_test4/output.h	/^  std::vector<float> data_check_244;$/;"	m	class:tester	access:private
data_check_245	unit_test4/output.h	/^  std::vector<int16_t> data_check_245;$/;"	m	class:tester	access:private
data_check_246	unit_test4/output.h	/^  std::vector<int32_t> data_check_246;$/;"	m	class:tester	access:private
data_check_247	unit_test4/output.h	/^  std::vector<int64_t> data_check_247;$/;"	m	class:tester	access:private
data_check_248	unit_test4/output.h	/^  std::vector<int8_t> data_check_248;$/;"	m	class:tester	access:private
data_check_249	unit_test4/output.h	/^  std::vector<uint16_t> data_check_249;$/;"	m	class:tester	access:private
data_check_25	unit_test4/output.h	/^  std::vector<int16_t> data_check_25;$/;"	m	class:tester	access:private
data_check_250	unit_test4/output.h	/^  std::vector<uint32_t> data_check_250;$/;"	m	class:tester	access:private
data_check_251	unit_test4/output.h	/^  std::vector<uint64_t> data_check_251;$/;"	m	class:tester	access:private
data_check_252	unit_test4/output.h	/^  std::vector<uint8_t> data_check_252;$/;"	m	class:tester	access:private
data_check_253	unit_test4/output.h	/^  std::vector<bool> data_check_253;$/;"	m	class:tester	access:private
data_check_254	unit_test4/output.h	/^  std::vector<bool> data_check_254;$/;"	m	class:tester	access:private
data_check_255	unit_test4/output.h	/^  std::vector<bool> data_check_255;$/;"	m	class:tester	access:private
data_check_256	unit_test4/output.h	/^  std::vector<uint8_t> data_check_256;$/;"	m	class:tester	access:private
data_check_257	unit_test4/output.h	/^  std::vector<uint8_t> data_check_257;$/;"	m	class:tester	access:private
data_check_258	unit_test4/output.h	/^  std::vector<uint8_t> data_check_258;$/;"	m	class:tester	access:private
data_check_259	unit_test4/output.h	/^  std::vector<uint8_t> data_check_259;$/;"	m	class:tester	access:private
data_check_26	unit_test4/output.h	/^  std::vector<int32_t> data_check_26;$/;"	m	class:tester	access:private
data_check_260	unit_test4/output.h	/^  std::vector<uint8_t> data_check_260;$/;"	m	class:tester	access:private
data_check_261	unit_test4/output.h	/^  std::vector<uint8_t> data_check_261;$/;"	m	class:tester	access:private
data_check_262	unit_test4/output.h	/^  std::vector<uint8_t> data_check_262;$/;"	m	class:tester	access:private
data_check_263	unit_test4/output.h	/^  std::vector<uint8_t> data_check_263;$/;"	m	class:tester	access:private
data_check_264	unit_test4/output.h	/^  std::vector<uint8_t> data_check_264;$/;"	m	class:tester	access:private
data_check_265	unit_test4/output.h	/^  std::vector<uint8_t> data_check_265;$/;"	m	class:tester	access:private
data_check_266	unit_test4/output.h	/^  std::vector<uint8_t> data_check_266;$/;"	m	class:tester	access:private
data_check_267	unit_test4/output.h	/^  std::vector<bool> data_check_267;$/;"	m	class:tester	access:private
data_check_268	unit_test4/output.h	/^  std::vector<bool> data_check_268;$/;"	m	class:tester	access:private
data_check_269	unit_test4/output.h	/^  std::vector<bool> data_check_269;$/;"	m	class:tester	access:private
data_check_27	unit_test4/output.h	/^  std::vector<int64_t> data_check_27;$/;"	m	class:tester	access:private
data_check_270	unit_test4/output.h	/^  std::vector<int16_t> data_check_270;$/;"	m	class:tester	access:private
data_check_271	unit_test4/output.h	/^  std::vector<int32_t> data_check_271;$/;"	m	class:tester	access:private
data_check_272	unit_test4/output.h	/^  std::vector<int64_t> data_check_272;$/;"	m	class:tester	access:private
data_check_273	unit_test4/output.h	/^  std::vector<int8_t> data_check_273;$/;"	m	class:tester	access:private
data_check_274	unit_test4/output.h	/^  std::vector<uint8_t> data_check_274;$/;"	m	class:tester	access:private
data_check_275	unit_test4/output.h	/^  std::vector<uint16_t> data_check_275;$/;"	m	class:tester	access:private
data_check_276	unit_test4/output.h	/^  std::vector<uint32_t> data_check_276;$/;"	m	class:tester	access:private
data_check_277	unit_test4/output.h	/^  std::vector<uint64_t> data_check_277;$/;"	m	class:tester	access:private
data_check_278	unit_test4/output.h	/^  std::vector<uint8_t> data_check_278;$/;"	m	class:tester	access:private
data_check_279	unit_test4/output.h	/^  std::vector<bool> data_check_279;$/;"	m	class:tester	access:private
data_check_28	unit_test4/output.h	/^  std::vector<int8_t> data_check_28;$/;"	m	class:tester	access:private
data_check_280	unit_test4/output.h	/^  std::vector<bool> data_check_280;$/;"	m	class:tester	access:private
data_check_281	unit_test4/output.h	/^  std::vector<bool> data_check_281;$/;"	m	class:tester	access:private
data_check_282	unit_test4/output.h	/^  std::vector<int16_t> data_check_282;$/;"	m	class:tester	access:private
data_check_283	unit_test4/output.h	/^  std::vector<int32_t> data_check_283;$/;"	m	class:tester	access:private
data_check_284	unit_test4/output.h	/^  std::vector<int64_t> data_check_284;$/;"	m	class:tester	access:private
data_check_285	unit_test4/output.h	/^  std::vector<int8_t> data_check_285;$/;"	m	class:tester	access:private
data_check_286	unit_test4/output.h	/^  std::vector<uint8_t> data_check_286;$/;"	m	class:tester	access:private
data_check_287	unit_test4/output.h	/^  std::vector<uint16_t> data_check_287;$/;"	m	class:tester	access:private
data_check_288	unit_test4/output.h	/^  std::vector<uint32_t> data_check_288;$/;"	m	class:tester	access:private
data_check_289	unit_test4/output.h	/^  std::vector<uint64_t> data_check_289;$/;"	m	class:tester	access:private
data_check_29	unit_test4/output.h	/^  std::vector<uint8_t> data_check_29;$/;"	m	class:tester	access:private
data_check_290	unit_test4/output.h	/^  std::vector<uint8_t> data_check_290;$/;"	m	class:tester	access:private
data_check_291	unit_test4/output.h	/^  std::vector<int16_t> data_check_291;$/;"	m	class:tester	access:private
data_check_292	unit_test4/output.h	/^  std::vector<int32_t> data_check_292;$/;"	m	class:tester	access:private
data_check_293	unit_test4/output.h	/^  std::vector<int64_t> data_check_293;$/;"	m	class:tester	access:private
data_check_294	unit_test4/output.h	/^  std::vector<int8_t> data_check_294;$/;"	m	class:tester	access:private
data_check_295	unit_test4/output.h	/^  std::vector<uint16_t> data_check_295;$/;"	m	class:tester	access:private
data_check_296	unit_test4/output.h	/^  std::vector<uint32_t> data_check_296;$/;"	m	class:tester	access:private
data_check_297	unit_test4/output.h	/^  std::vector<uint64_t> data_check_297;$/;"	m	class:tester	access:private
data_check_298	unit_test4/output.h	/^  std::vector<uint8_t> data_check_298;$/;"	m	class:tester	access:private
data_check_299	unit_test4/output.h	/^  std::vector<double> data_check_299;$/;"	m	class:tester	access:private
data_check_3	unit_test4/output.h	/^  std::vector<int16_t> data_check_3;$/;"	m	class:tester	access:private
data_check_30	unit_test4/output.h	/^  std::vector<uint16_t> data_check_30;$/;"	m	class:tester	access:private
data_check_300	unit_test4/output.h	/^  std::vector<float> data_check_300;$/;"	m	class:tester	access:private
data_check_301	unit_test4/output.h	/^  std::vector<int16_t> data_check_301;$/;"	m	class:tester	access:private
data_check_302	unit_test4/output.h	/^  std::vector<int32_t> data_check_302;$/;"	m	class:tester	access:private
data_check_303	unit_test4/output.h	/^  std::vector<int64_t> data_check_303;$/;"	m	class:tester	access:private
data_check_304	unit_test4/output.h	/^  std::vector<int8_t> data_check_304;$/;"	m	class:tester	access:private
data_check_305	unit_test4/output.h	/^  std::vector<uint16_t> data_check_305;$/;"	m	class:tester	access:private
data_check_306	unit_test4/output.h	/^  std::vector<uint32_t> data_check_306;$/;"	m	class:tester	access:private
data_check_307	unit_test4/output.h	/^  std::vector<uint64_t> data_check_307;$/;"	m	class:tester	access:private
data_check_308	unit_test4/output.h	/^  std::vector<uint8_t> data_check_308;$/;"	m	class:tester	access:private
data_check_309	unit_test4/output.h	/^  std::vector<bool> data_check_309;$/;"	m	class:tester	access:private
data_check_31	unit_test4/output.h	/^  std::vector<uint32_t> data_check_31;$/;"	m	class:tester	access:private
data_check_310	unit_test4/output.h	/^  std::vector<bool> data_check_310;$/;"	m	class:tester	access:private
data_check_311	unit_test4/output.h	/^  std::vector<bool> data_check_311;$/;"	m	class:tester	access:private
data_check_312	unit_test4/output.h	/^  std::vector<int16_t> data_check_312;$/;"	m	class:tester	access:private
data_check_313	unit_test4/output.h	/^  std::vector<int32_t> data_check_313;$/;"	m	class:tester	access:private
data_check_314	unit_test4/output.h	/^  std::vector<int64_t> data_check_314;$/;"	m	class:tester	access:private
data_check_315	unit_test4/output.h	/^  std::vector<int8_t> data_check_315;$/;"	m	class:tester	access:private
data_check_316	unit_test4/output.h	/^  std::vector<uint8_t> data_check_316;$/;"	m	class:tester	access:private
data_check_317	unit_test4/output.h	/^  std::vector<uint16_t> data_check_317;$/;"	m	class:tester	access:private
data_check_318	unit_test4/output.h	/^  std::vector<uint32_t> data_check_318;$/;"	m	class:tester	access:private
data_check_319	unit_test4/output.h	/^  std::vector<uint64_t> data_check_319;$/;"	m	class:tester	access:private
data_check_32	unit_test4/output.h	/^  std::vector<uint64_t> data_check_32;$/;"	m	class:tester	access:private
data_check_320	unit_test4/output.h	/^  std::vector<uint8_t> data_check_320;$/;"	m	class:tester	access:private
data_check_33	unit_test4/output.h	/^  std::vector<uint8_t> data_check_33;$/;"	m	class:tester	access:private
data_check_34	unit_test4/output.h	/^  std::vector<double> data_check_34;$/;"	m	class:tester	access:private
data_check_35	unit_test4/output.h	/^  std::vector<double> data_check_35;$/;"	m	class:tester	access:private
data_check_36	unit_test4/output.h	/^  std::vector<float> data_check_36;$/;"	m	class:tester	access:private
data_check_37	unit_test4/output.h	/^  std::vector<int16_t> data_check_37;$/;"	m	class:tester	access:private
data_check_38	unit_test4/output.h	/^  std::vector<int32_t> data_check_38;$/;"	m	class:tester	access:private
data_check_39	unit_test4/output.h	/^  std::vector<int64_t> data_check_39;$/;"	m	class:tester	access:private
data_check_4	unit_test4/output.h	/^  std::vector<int32_t> data_check_4;$/;"	m	class:tester	access:private
data_check_40	unit_test4/output.h	/^  std::vector<int8_t> data_check_40;$/;"	m	class:tester	access:private
data_check_41	unit_test4/output.h	/^  std::vector<uint16_t> data_check_41;$/;"	m	class:tester	access:private
data_check_42	unit_test4/output.h	/^  std::vector<uint32_t> data_check_42;$/;"	m	class:tester	access:private
data_check_43	unit_test4/output.h	/^  std::vector<uint64_t> data_check_43;$/;"	m	class:tester	access:private
data_check_44	unit_test4/output.h	/^  std::vector<uint8_t> data_check_44;$/;"	m	class:tester	access:private
data_check_45	unit_test4/output.h	/^  std::vector<float> data_check_45;$/;"	m	class:tester	access:private
data_check_46	unit_test4/output.h	/^  std::vector<double> data_check_46;$/;"	m	class:tester	access:private
data_check_47	unit_test4/output.h	/^  std::vector<float> data_check_47;$/;"	m	class:tester	access:private
data_check_48	unit_test4/output.h	/^  std::vector<int16_t> data_check_48;$/;"	m	class:tester	access:private
data_check_49	unit_test4/output.h	/^  std::vector<int32_t> data_check_49;$/;"	m	class:tester	access:private
data_check_5	unit_test4/output.h	/^  std::vector<int64_t> data_check_5;$/;"	m	class:tester	access:private
data_check_50	unit_test4/output.h	/^  std::vector<int64_t> data_check_50;$/;"	m	class:tester	access:private
data_check_51	unit_test4/output.h	/^  std::vector<int8_t> data_check_51;$/;"	m	class:tester	access:private
data_check_52	unit_test4/output.h	/^  std::vector<uint16_t> data_check_52;$/;"	m	class:tester	access:private
data_check_53	unit_test4/output.h	/^  std::vector<uint32_t> data_check_53;$/;"	m	class:tester	access:private
data_check_54	unit_test4/output.h	/^  std::vector<uint64_t> data_check_54;$/;"	m	class:tester	access:private
data_check_55	unit_test4/output.h	/^  std::vector<uint8_t> data_check_55;$/;"	m	class:tester	access:private
data_check_56	unit_test4/output.h	/^  std::vector<int16_t> data_check_56;$/;"	m	class:tester	access:private
data_check_57	unit_test4/output.h	/^  std::vector<double> data_check_57;$/;"	m	class:tester	access:private
data_check_58	unit_test4/output.h	/^  std::vector<float> data_check_58;$/;"	m	class:tester	access:private
data_check_59	unit_test4/output.h	/^  std::vector<int16_t> data_check_59;$/;"	m	class:tester	access:private
data_check_6	unit_test4/output.h	/^  std::vector<int8_t> data_check_6;$/;"	m	class:tester	access:private
data_check_60	unit_test4/output.h	/^  std::vector<int32_t> data_check_60;$/;"	m	class:tester	access:private
data_check_61	unit_test4/output.h	/^  std::vector<int64_t> data_check_61;$/;"	m	class:tester	access:private
data_check_62	unit_test4/output.h	/^  std::vector<int8_t> data_check_62;$/;"	m	class:tester	access:private
data_check_63	unit_test4/output.h	/^  std::vector<uint16_t> data_check_63;$/;"	m	class:tester	access:private
data_check_64	unit_test4/output.h	/^  std::vector<uint32_t> data_check_64;$/;"	m	class:tester	access:private
data_check_65	unit_test4/output.h	/^  std::vector<uint64_t> data_check_65;$/;"	m	class:tester	access:private
data_check_66	unit_test4/output.h	/^  std::vector<uint8_t> data_check_66;$/;"	m	class:tester	access:private
data_check_67	unit_test4/output.h	/^  std::vector<int32_t> data_check_67;$/;"	m	class:tester	access:private
data_check_68	unit_test4/output.h	/^  std::vector<double> data_check_68;$/;"	m	class:tester	access:private
data_check_69	unit_test4/output.h	/^  std::vector<float> data_check_69;$/;"	m	class:tester	access:private
data_check_7	unit_test4/output.h	/^  std::vector<uint16_t> data_check_7;$/;"	m	class:tester	access:private
data_check_70	unit_test4/output.h	/^  std::vector<int16_t> data_check_70;$/;"	m	class:tester	access:private
data_check_71	unit_test4/output.h	/^  std::vector<int32_t> data_check_71;$/;"	m	class:tester	access:private
data_check_72	unit_test4/output.h	/^  std::vector<int64_t> data_check_72;$/;"	m	class:tester	access:private
data_check_73	unit_test4/output.h	/^  std::vector<int8_t> data_check_73;$/;"	m	class:tester	access:private
data_check_74	unit_test4/output.h	/^  std::vector<uint16_t> data_check_74;$/;"	m	class:tester	access:private
data_check_75	unit_test4/output.h	/^  std::vector<uint32_t> data_check_75;$/;"	m	class:tester	access:private
data_check_76	unit_test4/output.h	/^  std::vector<uint64_t> data_check_76;$/;"	m	class:tester	access:private
data_check_77	unit_test4/output.h	/^  std::vector<uint8_t> data_check_77;$/;"	m	class:tester	access:private
data_check_78	unit_test4/output.h	/^  std::vector<int64_t> data_check_78;$/;"	m	class:tester	access:private
data_check_79	unit_test4/output.h	/^  std::vector<double> data_check_79;$/;"	m	class:tester	access:private
data_check_8	unit_test4/output.h	/^  std::vector<uint32_t> data_check_8;$/;"	m	class:tester	access:private
data_check_80	unit_test4/output.h	/^  std::vector<float> data_check_80;$/;"	m	class:tester	access:private
data_check_81	unit_test4/output.h	/^  std::vector<int16_t> data_check_81;$/;"	m	class:tester	access:private
data_check_82	unit_test4/output.h	/^  std::vector<int32_t> data_check_82;$/;"	m	class:tester	access:private
data_check_83	unit_test4/output.h	/^  std::vector<int64_t> data_check_83;$/;"	m	class:tester	access:private
data_check_84	unit_test4/output.h	/^  std::vector<int8_t> data_check_84;$/;"	m	class:tester	access:private
data_check_85	unit_test4/output.h	/^  std::vector<uint16_t> data_check_85;$/;"	m	class:tester	access:private
data_check_86	unit_test4/output.h	/^  std::vector<uint32_t> data_check_86;$/;"	m	class:tester	access:private
data_check_87	unit_test4/output.h	/^  std::vector<uint64_t> data_check_87;$/;"	m	class:tester	access:private
data_check_88	unit_test4/output.h	/^  std::vector<uint8_t> data_check_88;$/;"	m	class:tester	access:private
data_check_89	unit_test4/output.h	/^  std::vector<int8_t> data_check_89;$/;"	m	class:tester	access:private
data_check_9	unit_test4/output.h	/^  std::vector<uint64_t> data_check_9;$/;"	m	class:tester	access:private
data_check_90	unit_test4/output.h	/^  std::vector<double> data_check_90;$/;"	m	class:tester	access:private
data_check_91	unit_test4/output.h	/^  std::vector<float> data_check_91;$/;"	m	class:tester	access:private
data_check_92	unit_test4/output.h	/^  std::vector<int16_t> data_check_92;$/;"	m	class:tester	access:private
data_check_93	unit_test4/output.h	/^  std::vector<int32_t> data_check_93;$/;"	m	class:tester	access:private
data_check_94	unit_test4/output.h	/^  std::vector<int64_t> data_check_94;$/;"	m	class:tester	access:private
data_check_95	unit_test4/output.h	/^  std::vector<int8_t> data_check_95;$/;"	m	class:tester	access:private
data_check_96	unit_test4/output.h	/^  std::vector<uint16_t> data_check_96;$/;"	m	class:tester	access:private
data_check_97	unit_test4/output.h	/^  std::vector<uint32_t> data_check_97;$/;"	m	class:tester	access:private
data_check_98	unit_test4/output.h	/^  std::vector<uint64_t> data_check_98;$/;"	m	class:tester	access:private
data_check_99	unit_test4/output.h	/^  std::vector<uint8_t> data_check_99;$/;"	m	class:tester	access:private
data_in_$1	templates/bobox_decl_in.h	/^const $2* data_in_$1;$/;"	v
data_in_$1	templates/simple_decl_in.h	/^$2 * data_in_$1 = NULL;$/;"	v
data_in_$1	templates/simu_decl_in.h	/^$2 * data_in_$1 = NULL;$/;"	v
data_out_$1	templates/bobox_decl_out.h	/^$2 * data_out_$1;$/;"	v
data_out_$1	templates/simple_decl_out.h	/^$2 * data_out_$1 = NULL;$/;"	v
data_out_$1	templates/simu_decl_out.h	/^$2 * data_out_$1 = NULL;$/;"	v
data_source	templates/simu_box.h	/^  random_engine data_source;$/;"	m	class:tester	access:private
data_source	unit_test4/output.h	/^  random_engine data_source;$/;"	m	class:tester	access:private
data_source	unit_test5/output.h	/^  random_engine data_source;$/;"	m	class:tester	access:private
data_t	generator.h	/^            template <typename... L> data_t( node_t* me, const typename IT::operation_t* o, id_t opi, L&&... p);$/;"	p	class:ctb::generator::data_t	access:public	signature:( node_t* me, const typename IT::operation_t* o, id_t opi, L&&... p)
data_t	generator.h	/^        class data_t$/;"	c	class:ctb::generator	access:private
data_t	generator.h	/^    generator<T,IT>::data_t::data_t( node_t* m, const typename IT::operation_t* o, id_t opi, L&&... p) : me(m), opid(opi), acces_map(), op(o)$/;"	f	class:ctb::generator::data_t	signature:( node_t* m, const typename IT::operation_t* o, id_t opi, L&&... p)
dbgframe	templates/simu_box.h	/^  int dbgframe;$/;"	m	class:tester	access:private
dbgframe	unit_test4/output.h	/^  int dbgframe;$/;"	m	class:tester	access:private
dbgframe	unit_test5/output.h	/^  int dbgframe;$/;"	m	class:tester	access:private
debug_op	instructions.h	/^            proxy<typename T::opid_t> debug_op;$/;"	m	class:ctb::instruction_table::type	access:public
dec	instructions.h	/^        \/*API*\/ const operation_t& dec(typename T::opid_t type) const ;$/;"	p	class:ctb::instruction_table	access:public	signature:(typename T::opid_t type) const
dec	instructions.h	/^    const typename instruction_table<T>::operation_t& instruction_table<T>::dec(typename T::opid_t type)   const$/;"	f	class:ctb::instruction_table	signature:(typename T::opid_t type) const
dectype	instructions.h	/^        \/*API*\/ const type_t& dectype(typename T::tid_t type) const ;$/;"	p	class:ctb::instruction_table	access:public	signature:(typename T::tid_t type) const
dectype	instructions.h	/^    const typename instruction_table<T>::type_t& instruction_table<T>::dectype(typename T::tid_t type)   const$/;"	f	class:ctb::instruction_table	signature:(typename T::tid_t type) const
delimiter	loader_csv.h	/^    struct delimiter$/;"	s	namespace:ctb
dereference	proxy.h	/^      template <typename U> U& dereference( U* t) const {return *t;};$/;"	f	class:ctb::proxy_	access:private	signature:( U* t) const
dereference	proxy.h	/^      template <typename U> const U& dereference(const U& t) const {return t;};$/;"	f	class:ctb::proxy_	access:private	signature:(const U& t) const
diagnosis	parser.h	/^      static void diagnosis(const std::string& s, const std::string& e, int pos);$/;"	p	class:ctb::parser	access:private	signature:(const std::string& s, const std::string& e, int pos)
diagnosis	parser.h	/^  void parser::diagnosis(const std::string& s, const std::string& e, int pos)$/;"	f	class:ctb::parser	signature:(const std::string& s, const std::string& e, int pos)
directory	.exrc	/^set directory=\/tmp\/\/$/;"	v
distances	instructions.h	/^            mutable graph_distance_t distances; \/\/technically taken just a cache$/;"	m	class:ctb::instruction_table::type	access:public
dolar_mode	writer.h	/^  enum dolar_mode { dEat, dLet, dExpand, dIgnore };$/;"	g	namespace:ctb
dummy	proxy.h	/^      dummy(D...t){};$/;"	f	struct:ctb::dummy	access:public	signature:(D....t)
dummy	proxy.h	/^  struct dummy$/;"	s	namespace:ctb
dummy_friend	proxy.h	/^  struct dummy_friend$/;"	s	namespace:ctb
empty	instructions.h	/^        bool empty();$/;"	p	class:ctb::instruction_table	access:public	signature:()
empty	instructions.h	/^    bool instruction_table<T>::empty()$/;"	f	class:ctb::instruction_table	signature:()
empty	loader_csv.h	/^        static bool empty(const std::string& line);$/;"	p	class:ctb::csv_loader	access:private	signature:(const std::string& line)
empty	loader_csv.h	/^    bool csv_loader<T,G,IT,D>::empty(const std::string& line)$/;"	f	class:ctb::csv_loader	signature:(const std::string& line)
empty_tag	aliasenv_maker.h	/^  struct empty_tag{};$/;"	s	namespace:ctb
end	cartesian_multiplier.h	/^      cartesian_multiplier end();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
end	cartesian_multiplier.h	/^      cartesian_multiplier::constant end() const;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:() const
end	cartesian_multiplier.h	/^    cartesian_multiplier<T> cartesian_multiplier<T>::end()$/;"	f	class:ctb::cartesian_multiplier	signature:()
end	cartesian_multiplier.h	/^    typename cartesian_multiplier<T>::constant cartesian_multiplier<T>::end() const$/;"	f	class:ctb::cartesian_multiplier	signature:() const
end_b	cartesian_multiplier.h	/^      bool end_b;$/;"	m	class:ctb::cartesian_multiplier	access:private
ends	cartesian_multiplier.h	/^      itr ends;$/;"	m	class:ctb::cartesian_multiplier	access:private
env_in_$1	templates/bobox_decl_in.h	/^bobox::envelope_ptr_type env_in_$1;$/;"	v
env_out_$1	templates/bobox_decl_out.h	/^bobox::mutable_envelope_ptr_type env_out_$1;$/;"	v
eol	.exrc	/^set backspace=indent,eol,start$/;"	v
error	errorhandling.h	/^  void error(const std::string& e, bool critical = true)$/;"	f	namespace:ctb	signature:(const std::string& e, bool critical = true)
error_struct	errorhandling.h	/^  typedef std::pair<std::string,bool> error_struct;$/;"	t	namespace:ctb
excluded	tagmaster.h	/^        F excluded;$/;"	m	class:ctb::tagmaster	access:private
exec_path	datatypes.h	/^  std::string exec_path;$/;"	m	namespace:ctb
export_graph	ctb.h	/^        template<template <typename ...> class L, typename...P> void        export_graph(P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(P....params)
export_graph	ctb.h	/^    template<template <typename ...> class L, typename...P> void ctb<T,IT>::export_graph(P...params)$/;"	f	class:ctb::ctb	signature:(P....params)
export_graph	loader_csv.h	/^        void export_graph(G& instab, std::ostream&) ;$/;"	p	class:ctb::csv_loader	access:public	signature:(G& instab, std::ostream&)
export_graph	loader_csv.h	/^    void csv_loader<T,G,IT,D>::export_graph(G& graph, std::ostream&)$/;"	f	class:ctb::csv_loader	signature:(G& graph, std::ostream&)
export_graph	loader_test.h	/^          void export_graph(G& instab, std::ostream&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(G& instab, std::ostream&)
export_graph	loader_test.h	/^    void test_loader<T,G,IT>::export_graph(G& graph, std::ostream&)$/;"	f	class:ctb::test_loader	signature:(G& graph, std::ostream&)
export_graph	loader_xml.h	/^        void export_graph(G& graph, std::ostream& stream) ;$/;"	p	class:ctb::xml_loader	access:public	signature:(G& graph, std::ostream& stream)
export_graph	loader_xml.h	/^    void xml_loader<T,G,IT>::export_graph(G& graph, std::ostream& stream)$/;"	f	class:ctb::xml_loader	signature:(G& graph, std::ostream& stream)
export_instab	ctb.h	/^        template<template <typename ...> class L, typename...P> void        export_instab(P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(P....params)
export_instab	ctb.h	/^    template<template <typename ...> class L, typename...P> void ctb<T,IT>::export_instab(P...params)$/;"	f	class:ctb::ctb	signature:(P....params)
export_instab	loader_csv.h	/^        void export_instab(IT& instab, std::ostream&) ;$/;"	p	class:ctb::csv_loader	access:public	signature:(IT& instab, std::ostream&)
export_instab	loader_csv.h	/^    void csv_loader<T,G,IT,D>::export_instab(IT& instab, std::ostream& s)$/;"	f	class:ctb::csv_loader	signature:(IT& instab, std::ostream& s)
export_instab	loader_test.h	/^          void export_instab(IT& instab, std::ostream&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(IT& instab, std::ostream&)
export_instab	loader_test.h	/^    void test_loader<T,G,IT>::export_instab(IT& instab, std::ostream& s)$/;"	f	class:ctb::test_loader	signature:(IT& instab, std::ostream& s)
export_instab	loader_xml.h	/^        void export_instab(IT& instab, std::ostream& stream) ;$/;"	p	class:ctb::xml_loader	access:public	signature:(IT& instab, std::ostream& stream)
export_instab	loader_xml.h	/^    void xml_loader<T,G,IT>::export_instab(IT& instab, std::ostream& stream)$/;"	f	class:ctb::xml_loader	signature:(IT& instab, std::ostream& stream)
f	control-flow-notes/ex1.h	/^void f(...)$/;"	f	signature:(....)
f	unit_test4/test	/^¶{ìþÿf: É¶|ìþÿf: É¶}ìþÿf: É/;"	v
fDEBUG	datatypes.h	/^    fINPUT = 1, fOUTPUT = 2, fDEBUG = 4$/;"	e	enum:ctb::flags
fINPUT	datatypes.h	/^    fINPUT = 1, fOUTPUT = 2, fDEBUG = 4$/;"	e	enum:ctb::flags
fOUTPUT	datatypes.h	/^    fINPUT = 1, fOUTPUT = 2, fDEBUG = 4$/;"	e	enum:ctb::flags
fideg	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	e	enum:ctb::functor_id
fidei	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	e	enum:ctb::functor_id
fidlg	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	e	enum:ctb::functor_id
fidli	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	e	enum:ctb::functor_id
fileexists	datatypes.h	/^  bool fileexists(const char *name)$/;"	f	namespace:ctb	signature:(const char *name)
fileexists	split.h	/^  bool fileexists(const char *name)$/;"	f	namespace:ctb	signature:(const char *name)
files	split.sh	/^our @files = @ARGV;$/;"	v
fill	ctb.h	/^        void fill();$/;"	p	class:ctb::ctb	access:private	signature:()
fill	ctb.h	/^    void ctb<T,IT>::fill()$/;"	f	class:ctb::ctb	signature:()
fill_commands	ctb.h	/^        void fill_commands();$/;"	p	class:ctb::ctb	access:private	signature:()
fill_commands	ctb.h	/^    void ctb<T,IT>::fill_commands()$/;"	f	class:ctb::ctb	signature:()
flag_t	datatypes.h	/^    typedef uint32_t flag_t;$/;"	t	struct:ctb::traits	access:public
flag_t	datatypes.h	/^    typedef uint32_t flag_t;$/;"	t	struct:ctb::traits_conv_test	access:public
flags	datatypes.h	/^  enum flags $/;"	g	namespace:ctb
flags	instructions.h	/^            \/*EAPI*\/proxy<typename T::flag_t> flags; \/*EAPI*\/proxy<typename T::opid_t> opid;$/;"	m	class:ctb::instruction_table::operation	access:public
flags	loader_csv.h	/^        static std::map<std::string, int> flags;$/;"	m	class:ctb::csv_loader	access:private
flags_to_string	datatypes.h	/^    std::string flags_to_string(F f)$/;"	f	namespace:ctb	signature:(F f)
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
friend_maker	proxy.h	/^    struct friend_maker$/;"	s	namespace:ctb
from_file	writer.h	/^        \/*static*\/   static std::string from_file(const std::string& filename);$/;"	p	class:ctb::writer	access:public	signature:(const std::string& filename)
from_file	writer.h	/^    std::string writer<M,I,O,P>::from_file(const std::string& filename)$/;"	f	class:ctb::writer	signature:(const std::string& filename)
full	tagmaster.h	/^        F full;$/;"	m	class:ctb::tagmaster	access:private
functor_id	ctb.h	/^        enum functor_id{fidli = 0, fidlg = 1, fidei = 2, fideg = 3};$/;"	g	namespace:ctb
gONCE	datatypes.h	/^  enum maskmodes { gSELECT = 1, gPRINT = 2, gONCE = 3};$/;"	e	enum:ctb::maskmodes
gPRINT	datatypes.h	/^  enum maskmodes { gSELECT = 1, gPRINT = 2, gONCE = 3};$/;"	e	enum:ctb::maskmodes
gSELECT	datatypes.h	/^  enum maskmodes { gSELECT = 1, gPRINT = 2, gONCE = 3};$/;"	e	enum:ctb::maskmodes
gendbg	loader_test.h	/^        void gendbg(G& gen, const IT& it, typename T::vid_t v);$/;"	p	class:ctb::test_loader	access:private	signature:(G& gen, const IT& it, typename T::vid_t v)
gendbg	loader_test.h	/^  void test_loader<T,G,IT>::gendbg(G& gen, const IT& it, typename T::vid_t v)$/;"	f	class:ctb::test_loader	signature:(G& gen, const IT& it, typename T::vid_t v)
generate	aliasenv_bobox.h	/^      template <class G> static writer<aliasenv_bobox> generate(int m,  G& generator, std::string name);$/;"	p	class:ctb::aliasenv_bobox	access:public	signature:(int m, G& generator, std::string name)
generate	aliasenv_bobox.h	/^    writer<aliasenv_bobox> aliasenv_bobox::generate(int granularity, G& generator, std::string name)$/;"	f	class:ctb::aliasenv_bobox	signature:(int granularity, G& generator, std::string name)
generate	aliasenv_generator.h	/^      template <class G> static writer<aliasenv_generator> generate(int m,  G& graph, std::string name) ;$/;"	p	class:ctb::aliasenv_generator	access:public	signature:(int m, G& graph, std::string name)
generate	aliasenv_generator.h	/^    writer<aliasenv_generator> aliasenv_generator::generate(int max_granularity, G& graph, std::string name)$/;"	f	class:ctb::aliasenv_generator	signature:(int max_granularity, G& graph, std::string name)
generate	aliasenv_simple.h	/^      template <class G> static writer<aliasenv_simple> generate(int m,  G& generator, std::string name);$/;"	p	class:ctb::aliasenv_simple	access:public	signature:(int m, G& generator, std::string name)
generate	aliasenv_simple.h	/^    writer<aliasenv_simple> aliasenv_simple::generate(int granularity, G& generator, std::string name)$/;"	f	class:ctb::aliasenv_simple	signature:(int granularity, G& generator, std::string name)
generate	aliasenv_simu.h	/^      template <class G> static writer<aliasenv_simu> generate(int m,  G& generator, std::string name);$/;"	p	class:ctb::aliasenv_simu	access:public	signature:(int m, G& generator, std::string name)
generate	aliasenv_simu.h	/^      writer<aliasenv_simu> aliasenv_simu::generate(int granularity, G& generator, std::string name)$/;"	f	class:ctb::aliasenv_simu	signature:(int granularity, G& generator, std::string name)
generate	ctb.h	/^        template<typename M>                             std::string generate(std::string name) ;$/;"	p	class:ctb::ctb	access:public	signature:(std::string name)
generate	ctb.h	/^    std::string ctb<T,IT>::generate(std::string name)$/;"	f	class:ctb::ctb	signature:(std::string name)
generate	generator.h	/^            template <class W> void generate(int granularity, W& w, bool c);$/;"	p	class:ctb::generator::data_t	access:public	signature:(int granularity, W& w, bool c)
generate	generator.h	/^        template <class W> void generate(int granularity, W& w, std::shared_ptr<taghandler_base> p = NULL, std::shared_ptr<taghandler_base> q = NULL, std::shared_ptr<taghandler_base> s = NULL) ;$/;"	p	class:ctb::generator	access:public	signature:(int granularity, W& w, std::shared_ptr<taghandler_base> p = NULL, std::shared_ptr<taghandler_base> q = NULL, std::shared_ptr<taghandler_base> s = NULL)
generate	generator.h	/^    void generator<T,IT>::data_t::generate(int granularity, W& w, bool c)$/;"	f	class:ctb::generator::data_t	signature:(int granularity, W& w, bool c)
generate	generator.h	/^    void generator<T,IT>::generate(int packsize, W& w, std::shared_ptr<taghandler_base> ts, std::shared_ptr<taghandler_base> tp, std::shared_ptr<taghandler_base> to)$/;"	f	class:ctb::generator	signature:(int packsize, W& w, std::shared_ptr<taghandler_base> ts, std::shared_ptr<taghandler_base> tp, std::shared_ptr<taghandler_base> to)
generate_body	aliasenv_simu.h	/^      template <class G> static writer<aliasenv_simu> generate_body(int m,  G& generator, std::string name);$/;"	p	class:ctb::aliasenv_simu	access:protected	signature:(int m, G& generator, std::string name)
generate_body	aliasenv_simu.h	/^    writer<aliasenv_simu> aliasenv_simu::generate_body(int granularity, G& generator, std::string name)$/;"	f	class:ctb::aliasenv_simu	signature:(int granularity, G& generator, std::string name)
generator	generator.h	/^        generator( IT& i);$/;"	p	class:ctb::generator	access:public	signature:( IT& i)
generator	generator.h	/^    class generator$/;"	c	namespace:ctb
generator	generator.h	/^    generator<T,IT>::generator( IT & i) : instab(i), graph(), compiletest(false)$/;"	f	class:ctb::generator	signature:( IT & i)
generator_default	generator.h	/^  typedef generator<traits, instruction_table_default> generator_default;$/;"	t	namespace:ctb
generator_t	ctb.h	/^        typedef generator<T,IT> generator_t;$/;"	t	class:ctb::ctb	access:private
genvert	loader_test.h	/^        void genvert(const std::string& base, int i, typename IT::operation_t* op, const cartesian_multiplier<std::vector<typename T::opid_t> >& it, G& graph);$/;"	p	class:ctb::test_loader	access:private	signature:(const std::string& base, int i, typename IT::operation_t* op, const cartesian_multiplier<std::vector<typename T::opid_t> >& it, G& graph)
genvert	loader_test.h	/^    void test_loader<T,G,IT>::genvert(const std::string& base, int i, typename IT::operation_t* op, const cartesian_multiplier<std::vector<typename T::opid_t> >& it, G& graph)$/;"	f	class:ctb::test_loader	signature:(const std::string& base, int i, typename IT::operation_t* op, const cartesian_multiplier<std::vector<typename T::opid_t> >& it, G& graph)
get	parser.h	/^      const token& get(int i);$/;"	p	class:ctb::parser	access:private	signature:(int i)
get	parser.h	/^  const parser::token& parser::get(int i)$/;"	f	class:ctb::parser	signature:(int i)
get	templates/random_eng.h	/^    uint32_t get()$/;"	f	class:random_engine	access:public	signature:()
get	unit_test4/random_eng.h	/^    uint32_t get()$/;"	f	class:random_engine	access:public	signature:()
get	unit_test5/random_eng.h	/^    uint32_t get()$/;"	f	class:random_engine	access:public	signature:()
get_acces	generator.h	/^            template <class W> writer<aliasenv_generator> get_acces(int width, int gran, W& w, bool c);$/;"	p	class:ctb::generator::data_t	access:private	signature:(int width, int gran, W& w, bool c)
get_acces	generator.h	/^    writer<aliasenv_generator> generator<T,IT>::data_t::get_acces(int width, int granularity, W& w, bool c)$/;"	f	class:ctb::generator::data_t	signature:(int width, int granularity, W& w, bool c)
get_broadest	generator.h	/^        int get_broadest(int upperbound = 10000000) ;$/;"	p	class:ctb::generator	access:public	signature:(int upperbound = 10000000)
get_broadest	generator.h	/^    int generator<T,IT>::get_broadest(int upperbound)$/;"	f	class:ctb::generator	signature:(int upperbound)
get_conv_string	instructions.h	/^            \/*API*\/bool get_conv_string(int from, int to, std::string& c1, std::string& c2, std::string&cc, std::string& type, std::size_t&)const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int from, int to, std::string& c1, std::string& c2, std::string&cc, std::string& type, std::size_t&) const
get_conv_string	instructions.h	/^    bool instruction_table<T>::operation::get_conv_string(int from, int to, std::string& c1, std::string& c2, std::string& cc, std::string& t, std::size_t& printability) const$/;"	f	class:ctb::instruction_table::operation	signature:(int from, int to, std::string& c1, std::string& c2, std::string& cc, std::string& t, std::size_t& printability) const
get_conversion_graph	instructions.h	/^            \/*API*\/const typename type::graph_distance_t& get_conversion_graph() const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:() const
get_conversion_graph	instructions.h	/^    const typename instruction_table<T>::type::graph_distance_t& instruction_table<T>::operation::get_conversion_graph() const$/;"	f	class:ctb::instruction_table::operation	signature:() const
get_debug_opid	instructions.h	/^            \/*API*\/typename T::opid_t get_debug_opid() const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:() const
get_debug_opid	instructions.h	/^  typename T::opid_t instruction_table<T>::operation::get_debug_opid() const$/;"	f	class:ctb::instruction_table::operation	signature:() const
get_dist	graph.h	/^        int get_dist(I a, I b, I* c = NULL) const; \/** returns distance from a to b and the next vertex on path from a to b into c (if not null)*\/$/;"	p	class:ctb::graph_generic	access:public	signature:(I a, I b, I* c = NULL) const
get_dist	graph.h	/^    int graph_generic<T,I,directed,O...>::get_dist(I a, I b, I* c) const$/;"	f	class:ctb::graph_generic	signature:(I a, I b, I* c) const
get_inner_name	ctb.h	/^        static std::string get_inner_name(std::string fname);$/;"	p	class:ctb::ctb	access:private	signature:(std::string fname)
get_inner_name	ctb.h	/^    std::string ctb<T,IT>::get_inner_name(std::string f)$/;"	f	class:ctb::ctb	signature:(std::string f)
get_inout_pos	generator.h	/^            int get_inout_pos() const;$/;"	p	class:ctb::generator::data_t	access:public	signature:() const
get_inout_pos	generator.h	/^    int generator<T,IT>::data_t::get_inout_pos() const$/;"	f	class:ctb::generator::data_t	signature:() const
get_max_width	instructions.h	/^            \/*API*\/int get_max_width(int bound = 1000000000, int* in = NULL, int* out = NULL)const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int bound = 1000000000, int* in = NULL, int* out = NULL) const
get_max_width	instructions.h	/^    int instruction_table<T>::operation::get_max_width(int bound, int* in, int* out)const$/;"	f	class:ctb::instruction_table::operation	signature:(int bound, int* in, int* out) const
get_name	aliasenv_bobox.h	/^      static std::string get_name();$/;"	p	class:ctb::aliasenv_bobox	access:public	signature:()
get_name	aliasenv_bobox.h	/^  std::string aliasenv_bobox::get_name()$/;"	f	class:ctb::aliasenv_bobox	signature:()
get_name	aliasenv_simple.h	/^      static std::string get_name();$/;"	p	class:ctb::aliasenv_simple	access:public	signature:()
get_name	aliasenv_simple.h	/^  std::string aliasenv_simple::get_name()$/;"	f	class:ctb::aliasenv_simple	signature:()
get_name	aliasenv_simu.h	/^      static std::string get_name();$/;"	p	class:ctb::aliasenv_simu	access:public	signature:()
get_name	aliasenv_simu.h	/^  std::string aliasenv_simu::get_name()$/;"	f	class:ctb::aliasenv_simu	signature:()
get_name	loader_csv.h	/^        static std::string get_name();$/;"	p	class:ctb::csv_loader	access:public	signature:()
get_name	loader_csv.h	/^    std::string csv_loader<T,G,IT,D>::get_name()$/;"	f	class:ctb::csv_loader	signature:()
get_name	loader_test.h	/^          static std::string get_name();$/;"	p	class:ctb::test_loader	access:public	signature:()
get_name	loader_test.h	/^    std::string test_loader<T,G,IT>::get_name()$/;"	f	class:ctb::test_loader	signature:()
get_name	loader_xml.h	/^        static std::string get_name();$/;"	p	class:ctb::xml_loader	access:public	signature:()
get_name	loader_xml.h	/^    std::string xml_loader<T,G,IT>::get_name()$/;"	f	class:ctb::xml_loader	signature:()
get_name	writer.h	/^        std::string get_name(const std::string& format, int& pos);$/;"	p	class:ctb::writer	access:private	signature:(const std::string& format, int& pos)
get_name	writer.h	/^    std::string writer<M,I,O,P>::get_name(const std::string& format, int& pos)$/;"	f	class:ctb::writer	signature:(const std::string& format, int& pos)
get_op_name	loader_test.h	/^        static typename T::vid_t get_op_name(typename T::opid_t, const std::string& base, int v = -1);$/;"	p	class:ctb::test_loader	access:private	signature:(typename T::opid_t, const std::string& base, int v = -1)
get_op_name	loader_test.h	/^    typename T::vid_t test_loader<T,G,IT>::get_op_name(typename T::opid_t t, const std::string& base, int v)$/;"	f	class:ctb::test_loader	signature:(typename T::opid_t t, const std::string& base, int v)
get_op_string	instructions.h	/^            \/*API*\/bool get_op_string(int w, std::string& c, std::string& cc, std::size_t&)const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int w, std::string& c, std::string& cc, std::size_t&) const
get_op_string	instructions.h	/^    bool instruction_table<T>::operation::get_op_string(int w, std::string& c, std::string& cc, std::size_t& printability)const$/;"	f	class:ctb::instruction_table::operation	signature:(int w, std::string& c, std::string& cc, std::size_t& printability) const
get_path	graph.h	/^            node * get_path(node * n);$/;"	p	class:ctb::graph_generic::node	access:private	signature:(node * n)
get_path	graph.h	/^    typename graph_generic<T,I,directed,O...>::node* graph_generic<T,I,directed,O...>::node::get_path(node * n)$/;"	f	class:ctb::graph_generic::node	signature:(node * n)
get_prefix	ctb.h	/^        static std::string get_prefix(std::string fname);$/;"	p	class:ctb::ctb	access:private	signature:(std::string fname)
get_prefix	ctb.h	/^    std::string ctb<T,IT>::get_prefix(std::string f)$/;"	f	class:ctb::ctb	signature:(std::string f)
get_string	writer.h	/^        std::string get_string() const; \/\/does handle dolars internally!$/;"	p	class:ctb::writer	access:private	signature:() const
get_string	writer.h	/^    std::string writer<M,I,O,P>::get_string() const$/;"	f	class:ctb::writer	signature:() const
get_tag_mask	instructions.h	/^        typename T::flag_t get_tag_mask(const std::string& tags);$/;"	p	class:ctb::instruction_table	access:private	signature:(const std::string& tags)
get_tag_mask	instructions.h	/^  typename T::flag_t instruction_table<T>::get_tag_mask(const std::string& tags)$/;"	f	class:ctb::instruction_table	signature:(const std::string& tags)
get_type_string	instructions.h	/^            \/*API*\/bool get_type_string(int w, std::string&)const;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(int w, std::string&) const
get_type_string	instructions.h	/^    bool instruction_table<T>::operation::get_type_string(int w, std::string& c)const$/;"	f	class:ctb::instruction_table::operation	signature:(int w, std::string& c) const
getanyint	loader_xml.h	/^        static int getanyint(tinyxml2::XMLNode * node, std::string name, int def = 0);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode * node, std::string name, int def = 0)
getanyint	loader_xml.h	/^    int xml_loader<T,G,IT>::getanyint(tinyxml2::XMLNode * node, std::string name, int def)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name, int def)
getanystr	loader_xml.h	/^        static std::string getanystr(tinyxml2::XMLNode * node, std::string name);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode * node, std::string name)
getanystr	loader_xml.h	/^    std::string xml_loader<T,G,IT>::getanystr(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
getanystr	sort	/^std::string xml_loader<T,G,IT>::getanystr(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
getint	loader_xml.h	/^        static int getint(tinyxml2::XMLNode * node, std::string name);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode * node, std::string name)
getint	loader_xml.h	/^    int xml_loader<T,G,IT>::getint(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
getnth	writer.h	/^        template <typename ... Types> void getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const stringlist& a, const Types&... params);$/;"	p	class:ctb::writer	access:private	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const stringlist& a, const Types&... params)
getnth	writer.h	/^        template <typename ... Types> void getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const writer<M,I,O,P>& a, const Types&... params);$/;"	p	class:ctb::writer	access:private	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const writer<M,I,O,P>& a, const Types&... params)
getnth	writer.h	/^        void getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw);$/;"	p	class:ctb::writer	access:private	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw)
getnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const stringlist& a, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const stringlist& a, const Types&... params)
getnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const writer<M,I,O,P>& a, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw, const writer<M,I,O,P>& a, const Types&... params)
getnth	writer.h	/^    void writer<M,I,O,P>::getnth(int i, const std::string*& rs, const writer<M,I,O,P>*& rw)$/;"	f	class:ctb::writer	signature:(int i, const std::string*& rs, const writer<M,I,O,P>*& rw)
getstr	loader_xml.h	/^        static std::string getstr(tinyxml2::XMLNode * node, std::string name);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode * node, std::string name)
getstr	loader_xml.h	/^    std::string xml_loader<T,G,IT>::getstr(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
gmCOUNT	datatypes.h	/^  const int gmCOUNT = 3;$/;"	m	namespace:ctb
graph	README.md	/^The default project accepts a xml representation of an instruction table (which describes the conversion of instructions) and of a graph, which uses opcodes defined by the instruction table, and produces a simple c++ test unit.$/;"	v
graph	generator.h	/^        proxy<graph_t> graph;$/;"	m	class:ctb::generator	access:public
graph	tags	/^table	README.md	\/^The default project accepts a xml representation of an instruction table (which describes the conversion of instructions) and of a graph, which uses opcodes defined by the instruction table, and produces a simple c++ test unit.$\/;"	v$/;"	v
graph_default	graph.h	/^  typedef graph_generic<dummy,int,true> graph_default;$/;"	t	namespace:ctb
graph_distance_t	instructions.h	/^            typedef graph_generic<dummy, int, false, type> graph_distance_t;$/;"	t	class:ctb::instruction_table::type	access:public
graph_generic	graph.h	/^        graph_generic();$/;"	p	class:ctb::graph_generic	access:public	signature:()
graph_generic	graph.h	/^    class graph_generic$/;"	c	namespace:ctb
graph_generic	graph.h	/^    graph_generic<T,I,directed,O...>::graph_generic() : in(), out(), verts(), index(0)$/;"	f	class:ctb::graph_generic	signature:()
graph_t	generator.h	/^        typedef graph_generic<data_t, typename T::vid_t, true, generator> graph_t;$/;"	t	class:ctb::generator	access:public
hH	unit_test6/test	/^/;"	v
handling	journal	/^optimize tag handling; decoding of tags should be unified and moved a few call-layers higher$/;"	v
hash_aliasenv	ctb.h	/^        std::map<std::string, aliasenv_record> hash_aliasenv;$/;"	m	class:ctb::ctb	access:private
hash_command	ctb.h	/^        std::map<std::string, command_record> hash_command;$/;"	m	class:ctb::ctb	access:private
hash_loader	ctb.h	/^        std::map<std::string, loader_record> hash_loader;$/;"	m	class:ctb::ctb	access:private
hasval	loader_xml.h	/^        static bool hasval(tinyxml2::XMLNode* node, std::string name);$/;"	p	class:ctb::xml_loader	access:private	signature:(tinyxml2::XMLNode* node, std::string name)
hasval	loader_xml.h	/^    bool xml_loader<T,G,IT>::hasval(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:ctb::xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
help_cmdline_old	ctb.h	/^        void help_cmdline_old();$/;"	p	class:ctb::ctb	access:private	signature:()
help_cmdline_old	ctb.h	/^    void ctb<T,IT>::help_cmdline_old()$/;"	f	class:ctb::ctb	signature:()
help_command_stream	ctb.h	/^        void help_command_stream();$/;"	p	class:ctb::ctb	access:private	signature:()
help_command_stream	ctb.h	/^    void ctb<T,IT>::help_command_stream()$/;"	f	class:ctb::ctb	signature:()
helplang	.exrc	/^set helplang=en$/;"	v
i	.exrc	/^snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()$/;"	v
id	graph.h	/^            proxy<I> id;$/;"	m	class:ctb::graph_generic::node	access:public
id_t	generator.h	/^        typedef typename T::opid_t id_t;$/;"	t	class:ctb::generator	access:private
imbued_width	instructions.h	/^            mutable int imbued_width;$/;"	m	class:ctb::instruction_table::operation	access:private
in	graph.h	/^            proxy<std::vector<node*> > in;$/;"	m	class:ctb::graph_generic::node	access:public
in_types	instructions.h	/^            \/*EAPI*\/proxy<typename std::vector<typename T::tid_t>> in_types;$/;"	m	class:ctb::instruction_table::operation	access:public
index	graph.h	/^            int index; \/** I believe this is used as an identifier in maps*\/$/;"	m	class:ctb::graph_generic::node	access:private
index	graph.h	/^        int index;$/;"	m	class:ctb::graph_generic	access:private
init	aliasenv_bobox.h	/^      static void init();$/;"	p	class:ctb::aliasenv_bobox	access:protected	signature:()
init	aliasenv_bobox.h	/^  void aliasenv_bobox::init()$/;"	f	class:ctb::aliasenv_bobox	signature:()
init	aliasenv_generator.h	/^      static void init();$/;"	p	class:ctb::aliasenv_generator	access:protected	signature:()
init	aliasenv_generator.h	/^  void aliasenv_generator::init()$/;"	f	class:ctb::aliasenv_generator	signature:()
init	aliasenv_maker.h	/^        static void init();$/;"	p	class:ctb::aliasenv_maker	access:protected	signature:()
init	aliasenv_maker.h	/^    void aliasenv_maker<T,L,R>::init()$/;"	f	class:ctb::aliasenv_maker	signature:()
init	aliasenv_simple.h	/^      static void init();$/;"	p	class:ctb::aliasenv_simple	access:protected	signature:()
init	aliasenv_simple.h	/^  void aliasenv_simple::init()$/;"	f	class:ctb::aliasenv_simple	signature:()
init	aliasenv_simu.h	/^      static void init();$/;"	p	class:ctb::aliasenv_simu	access:protected	signature:()
init	aliasenv_simu.h	/^  void aliasenv_simu::init()$/;"	f	class:ctb::aliasenv_simu	signature:()
init_map	graph.h	/^            bool init_map(int size);$/;"	p	class:ctb::graph_generic::node	access:private	signature:(int size)
init_map	graph.h	/^    bool graph_generic<T,I,directed,O...>::node::init_map(int size)$/;"	f	class:ctb::graph_generic::node	signature:(int size)
ins	loader_test.h	/^        std::map<typename T::tid_t, std::vector<typename T::opid_t> > ins;$/;"	m	class:ctb::test_loader	access:private
insert	loader_csv.h	/^        static void insert(IT& instab, std::string line);$/;"	p	class:ctb::csv_loader	access:private	signature:(IT& instab, std::string line)
insert	loader_csv.h	/^    void csv_loader<T,G,IT,D>::insert(IT& instab, std::string line)$/;"	f	class:ctb::csv_loader	signature:(IT& instab, std::string line)
instab	ctb.h	/^        IT instab;$/;"	m	class:ctb::ctb	access:private
instab	generator.h	/^        proxy< IT&> instab;$/;"	m	class:ctb::generator	access:public
instab	instructions.h	/^        \/*EAPI*\/proxy<instab_t> instab;$/;"	m	class:ctb::instruction_table	access:public
instab_t	instructions.h	/^        typedef std::map<typename T::opid_t, operation*> instab_t;$/;"	t	class:ctb::instruction_table	access:private
instruction	instructions.h	/^              instruction() = delete;$/;"	p	struct:ctb::instruction_table::operation::instruction	access:public	signature:()
instruction	instructions.h	/^              instruction(int wi, int wo, const std::string& c,const std::string&,const std::string&,const std::string&,int r, bool satisfactory);$/;"	p	struct:ctb::instruction_table::operation::instruction	access:public	signature:(int wi, int wo, const std::string& c,const std::string&,const std::string&,const std::string&,int r, bool satisfactory)
instruction	instructions.h	/^            struct instruction \/\/holds information for generation$/;"	s	class:ctb::instruction_table::operation	access:private
instruction	instructions.h	/^    instruction_table<T>::operation::instruction::instruction(int wi, int wo, const std::string& c,const std::string& cc,const std::string& n,const std::string& t,int r, bool s) : code(c), width_in(wi), width_out(wo), width(std::max(wi, wo)), code_custom(cc), note(n), tags(t), rating(r), satisfactory(s)$/;"	f	class:ctb::instruction_table::operation::instruction	signature:(int wi, int wo, const std::string& c,const std::string& cc,const std::string& n,const std::string& t,int r, bool s)
instruction_table	instructions.h	/^    class instruction_table \/\/provides transition from opcode to abstract operation$/;"	c	namespace:ctb
instruction_table_default	instructions.h	/^  typedef instruction_table<traits> instruction_table_default;$/;"	t	namespace:ctb
int16_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int16_t	int16_t,int16_t	ADD_int16_t		1	1	$$arg1 + $$arg2		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int16_t	int16_t,int16_t	DIV_int16_t		1	1	$$arg1 \/ $$arg2		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int16_t	int16_t,int16_t	SUB_int16_t		1	1	$$arg1 - $$arg2		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int16_t	int16_t,int16_t	AND_int16_t		1	1	$$arg1 & $$arg2		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int16_t	int16_t,int16_t	LSF_int16_t		1	1	$$arg1 << $$arg2		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int16_t	int16_t,int16_t	XOR_int16_t		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int16_t,int16_t	EQ_int16_t		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int16_t,int16_t	GE_int16_t		1	1	0xFF*($$arg1 >= $$arg2)		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int16_t,int16_t	GT_int16_t		1	1	0xFF*($$arg1 > $$arg2)		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int16_t,int16_t	LE_int16_t		1	1	0xFF*($$arg1 <= $$arg2)		C	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int16_t	int16_t,int16_t	ADD_int16_t		2	2	_mm_add_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int16_t	int16_t,int16_t	ADD_int16_t		4	4	_mm_add_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int16_t	int16_t,int16_t	ADD_int16_t		8	8	_mm_add_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int16_t	int16_t,int16_t	SUB_int16_t		2	2	_mm_sub_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int16_t	int16_t,int16_t	SUB_int16_t		4	4	_mm_sub_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int16_t	int16_t,int16_t	AND_int16_t		2	2	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int16_t	int16_t,int16_t	AND_int16_t		4	4	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int16_t	int16_t,int16_t	AND_int16_t		8	8	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int16_t	int16_t,int16_t	XOR_int16_t		2	2	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int16_t	int16_t,int16_t	XOR_int16_t		4	4	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int16_t	int16_t,int16_t	XOR_int16_t		8	8	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	EQ_int16_t		2	2	_mm_cmpeq_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	EQ_int16_t		4	4	_mm_cmpeq_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	EQ_int16_t		8	8	_mm_cmpeq_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	GE_int16_t		2	2	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	GE_int16_t		4	4	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	GE_int16_t		8	8	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	GT_int16_t		2	2	_mm_cmpgt_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	GT_int16_t		4	4	_mm_cmpgt_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	GT_int16_t		8	8	_mm_cmpgt_epi16($$arg1,$$arg2)		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	LE_int16_t		2	2	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	LE_int16_t		4	4	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	v
int16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int16_t,int16_t	LE_int16_t		8	8	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int32_t	int32_t,int32_t	ADD_int32_t		1	1	$$arg1 + $$arg2		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int32_t	int32_t,int32_t	DIV_int32_t		1	1	$$arg1 \/ $$arg2		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int32_t	int32_t,int32_t	SUB_int32_t		1	1	$$arg1 - $$arg2		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int32_t	int32_t,int32_t	AND_int32_t		1	1	$$arg1 & $$arg2		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int32_t	int32_t,int32_t	LSF_int32_t		1	1	$$arg1 << $$arg2		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int32_t	int32_t,int32_t	XOR_int32_t		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int32_t,int32_t	EQ_int32_t		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int32_t,int32_t	GE_int32_t		1	1	0xFF*($$arg1 >= $$arg2)		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int32_t,int32_t	GT_int32_t		1	1	0xFF*($$arg1 > $$arg2)		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int32_t,int32_t	LE_int32_t		1	1	0xFF*($$arg1 <= $$arg2)		C	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int32_t	int32_t,int32_t	ADD_int32_t		2	2	_mm_add_epi32($$arg1,$$arg2)		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int32_t	int32_t,int32_t	ADD_int32_t		4	4	_mm_add_epi32($$arg1,$$arg2)		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int32_t	int32_t,int32_t	SUB_int32_t		2	2	_mm_sub_epi32($$arg1,$$arg2)		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int32_t	int32_t,int32_t	AND_int32_t		2	2	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int32_t	int32_t,int32_t	AND_int32_t		4	4	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int32_t	int32_t,int32_t	XOR_int32_t		2	2	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int32_t	int32_t,int32_t	XOR_int32_t		4	4	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	EQ_int32_t		2	2	_mm_cmpeq_epi32($$arg1,$$arg2)		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	EQ_int32_t		4	4	_mm_cmpeq_epi32($$arg1,$$arg2)		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	GE_int32_t		2	2	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmpgt_epi32($$arg1,$$arg2))		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	GE_int32_t		4	4	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmpgt_epi32($$arg1,$$arg2))		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	GT_int32_t		2	2	_mm_cmpgt_epi32($$arg1,$$arg2)		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	GT_int32_t		4	4	_mm_cmpgt_epi32($$arg1,$$arg2)		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	LE_int32_t		2	2	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmplt_epi32($$arg1,$$arg2))		sse	10$/;"	v
int32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int32_t,int32_t	LE_int32_t		4	4	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmplt_epi32($$arg1,$$arg2))		sse	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int64_t	int64_t,int64_t	ADD_int64_t		1	1	$$arg1 + $$arg2		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int64_t	int64_t,int64_t	DIV_int64_t		1	1	$$arg1 \/ $$arg2		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int64_t	int64_t,int64_t	SUB_int64_t		1	1	$$arg1 - $$arg2		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int64_t	int64_t,int64_t	AND_int64_t		1	1	$$arg1 & $$arg2		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int64_t	int64_t,int64_t	LSF_int64_t		1	1	$$arg1 << $$arg2		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int64_t	int64_t,int64_t	XOR_int64_t		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int64_t,int64_t	EQ_int64_t		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int64_t,int64_t	GE_int64_t		1	1	0xFF*($$arg1 >= $$arg2)		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int64_t,int64_t	GT_int64_t		1	1	0xFF*($$arg1 > $$arg2)		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int64_t,int64_t	LE_int64_t		1	1	0xFF*($$arg1 <= $$arg2)		C	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int64_t	int64_t,int64_t	ADD_int64_t		2	2	_mm_add_epi64($$arg1,$$arg2)		sse	10$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int64_t	int64_t,int64_t	AND_int64_t		2	2	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int64_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int64_t	int64_t,int64_t	XOR_int64_t		2	2	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int8_t	int8_t,int8_t	ADD_int8_t		1	1	$$arg1 + $$arg2		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int8_t	int8_t,int8_t	DIV_int8_t		1	1	$$arg1 \/ $$arg2		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	int8_t	int8_t,int8_t	SUB_int8_t		1	1	$$arg1 - $$arg2		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int8_t	int8_t,int8_t	AND_int8_t		1	1	$$arg1 & $$arg2		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int8_t	int8_t,int8_t	LSF_int8_t		1	1	$$arg1 << $$arg2		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	int8_t	int8_t,int8_t	XOR_int8_t		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int8_t,int8_t	EQ_int8_t		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int8_t,int8_t	GE_int8_t		1	1	0xFF*($$arg1 >= $$arg2)		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int8_t,int8_t	GT_int8_t		1	1	0xFF*($$arg1 > $$arg2)		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	int8_t,int8_t	LE_int8_t		1	1	0xFF*($$arg1 <= $$arg2)		C	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int8_t	int8_t,int8_t	ADD_int8_t		16	16	_mm_add_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int8_t	int8_t,int8_t	ADD_int8_t		2	2	_mm_add_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int8_t	int8_t,int8_t	ADD_int8_t		4	4	_mm_add_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int8_t	int8_t,int8_t	ADD_int8_t		8	8	_mm_add_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int8_t	int8_t,int8_t	SUB_int8_t		2	2	_mm_sub_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int8_t	int8_t,int8_t	SUB_int8_t		4	4	_mm_sub_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	int8_t	int8_t,int8_t	SUB_int8_t		8	8	_mm_sub_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int8_t	int8_t,int8_t	AND_int8_t		16	16	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int8_t	int8_t,int8_t	AND_int8_t		2	2	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int8_t	int8_t,int8_t	AND_int8_t		4	4	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int8_t	int8_t,int8_t	AND_int8_t		8	8	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int8_t	int8_t,int8_t	XOR_int8_t		16	16	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int8_t	int8_t,int8_t	XOR_int8_t		2	2	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int8_t	int8_t,int8_t	XOR_int8_t		4	4	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	int8_t	int8_t,int8_t	XOR_int8_t		8	8	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	EQ_int8_t		16	16	_mm_cmpeq_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	EQ_int8_t		2	2	_mm_cmpeq_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	EQ_int8_t		4	4	_mm_cmpeq_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	EQ_int8_t		8	8	_mm_cmpeq_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GE_int8_t		16	16	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GE_int8_t		2	2	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GE_int8_t		4	4	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GE_int8_t		8	8	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GT_int8_t		16	16	_mm_cmpgt_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GT_int8_t		2	2	_mm_cmpgt_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GT_int8_t		4	4	_mm_cmpgt_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	GT_int8_t		8	8	_mm_cmpgt_epi8($$arg1,$$arg2)		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	LE_int8_t		16	16	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	LE_int8_t		2	2	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	LE_int8_t		4	4	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	v
int8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	int8_t,int8_t	LE_int8_t		8	8	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	v
is	instructions.h	/^            \/*API*\/bool is(typename T::flag_t f) const ;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(typename T::flag_t f) const
is	instructions.h	/^    bool instruction_table<T>::operation::is(typename T::flag_t f) const $/;"	f	class:ctb::instruction_table::operation	signature:(typename T::flag_t f) const
is_satisfactory	taghandler.h	/^      virtual bool is_satisfactory(const std::string&) = 0;$/;"	p	class:ctb::taghandler_base	access:public	signature:(const std::string&)
is_satisfactory	tagmaster.h	/^        bool is_satisfactory(const std::string&);$/;"	p	class:ctb::tagmaster	access:public	signature:(const std::string&)
is_satisfactory	tagmaster.h	/^    bool tagmaster<F>::is_satisfactory(const std::string& str)$/;"	f	class:ctb::tagmaster	signature:(const std::string& str)
is_tag_satisfactory	instructions.h	/^        \/*API*\/ bool is_tag_satisfactory(const std::string&) const;$/;"	p	class:ctb::instruction_table	access:public	signature:(const std::string&) const
is_tag_satisfactory	instructions.h	/^  bool instruction_table<T>::is_tag_satisfactory(const std::string& tags) const$/;"	f	class:ctb::instruction_table	signature:(const std::string& tags) const
iterator	cartesian_multiplier.h	/^      typedef itr iterator;$/;"	t	class:ctb::cartesian_multiplier	access:public
itr	cartesian_multiplier.h	/^      typedef std::vector<typename T::iterator> itr;$/;"	t	class:ctb::cartesian_multiplier	access:private
language	aliasenv_bobox.h	/^      typedef language_cpp language;$/;"	t	class:ctb::aliasenv_bobox	access:public
language	aliasenv_generator.h	/^      typedef language_empty language;$/;"	t	class:ctb::aliasenv_generator	access:public
language	aliasenv_maker.h	/^        typedef L language;$/;"	t	class:ctb::aliasenv_maker	access:public
language	aliasenv_simple.h	/^      typedef language_cpp language;$/;"	t	class:ctb::aliasenv_simple	access:public
language	aliasenv_simu.h	/^      typedef language_cpp language;$/;"	t	class:ctb::aliasenv_simu	access:public
language_cpp	languages.h	/^  class language_cpp$/;"	c	namespace:ctb
language_empty	languages.h	/^  class language_empty$/;"	c	namespace:ctb
last_terminated	writer.h	/^        bool last_terminated;$/;"	m	class:ctb::writer	access:private
lastpass	graph.h	/^            int lastpass; \/** is used mostly for keeping track of whether or not we've visited this node in current crawl*\/$/;"	m	class:ctb::graph_generic::node	access:private
list_concat	writer.h	/^        \/*others*\/   writer& list_concat(const std::string& delim);$/;"	p	class:ctb::writer	access:public	signature:(const std::string& delim)
list_concat	writer.h	/^    writer<M,I,O,P> &writer<M,I,O,P>::list_concat(const std::string& delim)$/;"	f	class:ctb::writer	signature:(const std::string& delim)
load_bool	templates/macros.h	18;"	d
load_bool	unit_test4/macros.h	18;"	d
load_bool	unit_test5/macros.h	18;"	d
load_graph	ctb.h	/^        template<template <typename ...> class L, typename...P> void        load_graph(P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(P....params)
load_graph	ctb.h	/^    template<template <typename ...> class L, typename...P> void ctb<T,IT>::load_graph(P...params)$/;"	f	class:ctb::ctb	signature:(P....params)
load_graph	loader_csv.h	/^        void load_graph(G& graph, std::istream&) ;$/;"	p	class:ctb::csv_loader	access:public	signature:(G& graph, std::istream&)
load_graph	loader_csv.h	/^    void csv_loader<T,G,IT,D>::load_graph(G& graph, std::istream&)$/;"	f	class:ctb::csv_loader	signature:(G& graph, std::istream&)
load_graph	loader_test.h	/^          void load_graph(G& graph, const IT&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(G& graph, const IT&)
load_graph	loader_test.h	/^    void test_loader<T,G,IT>::load_graph(G& graph, const IT& instab)$/;"	f	class:ctb::test_loader	signature:(G& graph, const IT& instab)
load_graph	loader_xml.h	/^        void load_graph(G& graph, std::istream& stream) ;$/;"	p	class:ctb::xml_loader	access:public	signature:(G& graph, std::istream& stream)
load_graph	loader_xml.h	/^    void xml_loader<T,G,IT>::load_graph(G& graph, std::istream& stream)$/;"	f	class:ctb::xml_loader	signature:(G& graph, std::istream& stream)
load_instab	ctb.h	/^        template<template <typename ...> class L, typename...P> void        load_instab(P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(P....params)
load_instab	ctb.h	/^    template<template <typename ...> class L, typename...P> void ctb<T,IT>::load_instab(P...params)$/;"	f	class:ctb::ctb	signature:(P....params)
load_instab	loader_csv.h	/^        void load_instab(IT& instab, std::istream&) ;$/;"	p	class:ctb::csv_loader	access:public	signature:(IT& instab, std::istream&)
load_instab	loader_csv.h	/^    void csv_loader<T,G,IT,D>::load_instab(IT& instab, std::istream& s)$/;"	f	class:ctb::csv_loader	signature:(IT& instab, std::istream& s)
load_instab	loader_test.h	/^          void load_instab(IT& instab, std::istream&) ;$/;"	p	class:ctb::test_loader	access:public	signature:(IT& instab, std::istream&)
load_instab	loader_test.h	/^    void test_loader<T,G,IT>::load_instab(IT& instab, std::istream& s)$/;"	f	class:ctb::test_loader	signature:(IT& instab, std::istream& s)
load_instab	loader_xml.h	/^        void load_instab(IT& instab, std::istream& stream) ;$/;"	p	class:ctb::xml_loader	access:public	signature:(IT& instab, std::istream& stream)
load_instab	loader_xml.h	/^    void xml_loader<T,G,IT>::load_instab(IT& instab, std::istream& stream)$/;"	f	class:ctb::xml_loader	signature:(IT& instab, std::istream& stream)
loader_default	loader_xml.h	/^  typedef xml_loader<traits, generator_default, instruction_table_default> loader_default;$/;"	t	namespace:ctb
loader_record	ctb.h	/^        typedef std::tuple< std::function<void(std::istream&)>, std::function<void(std::istream&)>, std::function<void(std::ostream&)>, std::function<void(std::ostream&)>> loader_record;$/;"	t	class:ctb::ctb	access:private
mONCE	datatypes.h	/^  enum maskmodes_masks { mSELECT = 1 , mPRINT = 2, mONCE = 4 };$/;"	e	enum:ctb::maskmodes_masks
mPRINT	datatypes.h	/^  enum maskmodes_masks { mSELECT = 1 , mPRINT = 2, mONCE = 4 };$/;"	e	enum:ctb::maskmodes_masks
mSELECT	datatypes.h	/^  enum maskmodes_masks { mSELECT = 1 , mPRINT = 2, mONCE = 4 };$/;"	e	enum:ctb::maskmodes_masks
main	main.cpp	/^int main(int count, char**args)$/;"	f	signature:(int count, char**args)
main	templates/simu.cpp	/^int main()$/;"	f	signature:()
main	test.cpp	/^int main(int c, char** cc)$/;"	f	signature:(int c, char** cc)
main	unit_test1/test_simple.cpp	/^int main()$/;"	f	signature:()
main	unit_test3/main.cpp	/^int main()$/;"	f	signature:()
main	unit_test4/simu.cpp	/^int main()$/;"	f	signature:()
main	unit_test5/simu.cpp	/^int main()$/;"	f	signature:()
main	unit_test6/main.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	unit_test6/model.bobolang	/^model main()->() {$/;"	f	signature:()
map	graph.h	/^            mutable std::vector<route> map;$/;"	m	class:ctb::graph_generic::node	access:private
maskmodes	datatypes.h	/^  enum maskmodes { gSELECT = 1, gPRINT = 2, gONCE = 3};$/;"	g	namespace:ctb
maskmodes_masks	datatypes.h	/^  enum maskmodes_masks { mSELECT = 1 , mPRINT = 2, mONCE = 4 };$/;"	g	namespace:ctb
maxarity	datatypes.h	/^    static const int maxarity = 3;$/;"	m	struct:ctb::traits	access:public
maxarity	datatypes.h	/^    static const int maxarity = 3;$/;"	m	struct:ctb::traits_conv_test	access:public
me	generator.h	/^            node_t* me;$/;"	m	class:ctb::generator::data_t	access:private
middles	cartesian_multiplier.h	/^      itr middles;$/;"	m	class:ctb::cartesian_multiplier	access:private
model	templates/bobox_box.h	/^  typedef generic_model<$1_box> model;$/;"	t	class:$1_box	access:public
model	unit_test1/test_bobox.h	/^  typedef generic_model<test_bobox_box> model;$/;"	t	class:test_bobox_box	access:public
model	unit_test6/main.cpp	/^	typedef generic_model<sink_box> model;$/;"	t	class:sink_box	file:	access:public
model	unit_test6/main.cpp	/^	typedef generic_model<source_box> model;$/;"	t	class:source_box	file:	access:public
model	unit_test6/output.h	/^  typedef generic_model<output_box> model;$/;"	t	class:output_box	access:public
mygenerator	ctb.h	/^        generator_t mygenerator;$/;"	m	class:ctb::ctb	access:private
mytags	ctb.h	/^        std::shared_ptr<tagmaster<uint32_t>> mytags;$/;"	m	class:ctb::ctb	access:private
mytype	instructions.h	/^            \/*EAPI*\/proxy<type*> mytype;$/;"	m	class:ctb::instruction_table::operation	access:public
newid	generator.h	/^            static int newid(bool reset);$/;"	p	class:ctb::generator::data_t	access:private	signature:(bool reset)
newid	generator.h	/^    int generator<T,IT>::data_t::newid(bool reset)$/;"	f	class:ctb::generator::data_t	signature:(bool reset)
newid	graph.h	/^            static int newid();$/;"	p	class:ctb::graph_generic::node	access:private	signature:()
newid	graph.h	/^    int graph_generic<T,I,directed,O...>::node::newid()$/;"	f	class:ctb::graph_generic::node	signature:()
newname	generator.h	/^            std::string newname(std::string tag) ;$/;"	p	class:ctb::generator::data_t	access:private	signature:(std::string tag)
newname	generator.h	/^    std::string generator<T,IT>::data_t::newname(std::string tag)$/;"	f	class:ctb::generator::data_t	signature:(std::string tag)
node	graph.h	/^            template <typename... L> node(I vid, int index, L&&... p);$/;"	p	class:ctb::graph_generic::node	access:private	signature:(I vid, int index, L&&... p)
node	graph.h	/^        class node$/;"	c	class:ctb::graph_generic	access:private
node	graph.h	/^    graph_generic<T,I,directed,O...>::node::node(I vid, int idx, L&&... p) : id(vid), out(), in(), data(this, (std::forward<L>(p))...), index(idx)$/;"	f	class:ctb::graph_generic::node	signature:(I vid, int idx, L&&... p)
node_t	generator.h	/^        typedef typename graph_t::node_t node_t;$/;"	t	class:ctb::generator	access:public
node_t	graph.h	/^        typedef node node_t;$/;"	t	class:ctb::graph_generic	access:public
nonexcluded	tagmaster.h	/^        F nonexcluded;$/;"	m	class:ctb::tagmaster	access:private
noreport	aliasenv_maker.h	/^        typedef aliasenv_maker<T,L,false> noreport;$/;"	t	class:ctb::aliasenv_maker	access:public
note	instructions.h	/^              const std::string note;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
note	instructions.h	/^              const std::string note;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
note	instructions.h	/^              const std::string note;$/;"	m	struct:ctb::instruction_table::type::type_version	access:public
oid	loader_test.h	/^        int oid;$/;"	m	class:ctb::test_loader	access:private
op_t	generator.h	/^        typedef typename IT::operation_t op_t;$/;"	t	class:ctb::generator	access:private
openstream	datatypes.h	/^    void openstream(S& stream, const std::string& name, bool check_existence = true)$/;"	f	namespace:ctb	signature:(S& stream, const std::string& name, bool check_existence = true)
openstream	split.h	/^    void openstream(S& stream, const std::string& name, bool check_existence = true)$/;"	f	namespace:ctb	signature:(S& stream, const std::string& name, bool check_existence = true)
operation	instructions.h	/^            operation() = delete;$/;"	p	class:ctb::instruction_table::operation	access:public	signature:()
operation	instructions.h	/^            operation(typename T::opid_t i, typename T::tid_t ot, const std::vector<typename T::tid_t>& it, typename T::flag_t f, type* t, instruction_table* parent);$/;"	p	class:ctb::instruction_table::operation	access:public	signature:(typename T::opid_t i, typename T::tid_t ot, const std::vector<typename T::tid_t>& it, typename T::flag_t f, type* t, instruction_table* parent)
operation	instructions.h	/^        class operation \/\/holds general operation traits$/;"	c	class:ctb::instruction_table	access:private
operation	instructions.h	/^    instruction_table<T>::operation::operation(typename T::opid_t i, typename T::tid_t ot, const std::vector<typename T::tid_t>& it, typename T::flag_t f, type* t, instruction_table<T>* p) : opid(i), mytype(t), out_type(ot), flags(f), parent(p), in_types(it)$/;"	f	class:ctb::instruction_table::operation	signature:(typename T::opid_t i, typename T::tid_t ot, const std::vector<typename T::tid_t>& it, typename T::flag_t f, type* t, instruction_table<T>* p)
operation_t	instructions.h	/^        typedef operation operation_t; $/;"	t	class:ctb::instruction_table	access:public
operator !=	cartesian_multiplier.h	/^      bool operator!=(const cartesian_multiplier&)const ;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:(const cartesian_multiplier&) const
operator !=	cartesian_multiplier.h	/^    bool cartesian_multiplier<T>::operator!=(const cartesian_multiplier& c) const$/;"	f	class:ctb::cartesian_multiplier	signature:(const cartesian_multiplier& c) const
operator !=	writer.h	/^        \/*operators*\/bool operator!=(const writer& w) ;$/;"	p	class:ctb::writer	access:public	signature:(const writer& w)
operator !=	writer.h	/^    bool writer<M,I,O,P>::operator!=(const writer& w)$/;"	f	class:ctb::writer	signature:(const writer& w)
operator *	cartesian_multiplier.h	/^      const iterator& operator*() const;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:() const
operator *	cartesian_multiplier.h	/^      iterator& operator*();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
operator *	cartesian_multiplier.h	/^   const typename cartesian_multiplier<T>::iterator& cartesian_multiplier<T>::operator*() const$/;"	f	class:ctb::cartesian_multiplier	signature:() const
operator *	cartesian_multiplier.h	/^   typename cartesian_multiplier<T>::iterator& cartesian_multiplier<T>::operator*()$/;"	f	class:ctb::cartesian_multiplier	signature:()
operator *	proxy.h	/^      const T& operator*() const { return data; }$/;"	f	class:ctb::proxy_	access:public	signature:() const
operator ++	cartesian_multiplier.h	/^    cartesian_multiplier<T>& cartesian_multiplier<T>::operator++()$/;"	f	class:ctb::cartesian_multiplier	signature:()
operator ++	cartesian_multiplier.h	/^cartesian_multiplier& operator++();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
operator +=	writer.h	/^        \/*operators*\/writer& operator+=(const writer& w) ;$/;"	p	class:ctb::writer	access:public	signature:(const writer& w)
operator +=	writer.h	/^        \/*operators*\/writer& operator+=(writer&& w) ;$/;"	p	class:ctb::writer	access:public	signature:(writer&& w)
operator +=	writer.h	/^  writer<M,I,O,P>& writer<M,I,O,P>::operator+=(const writer& w)$/;"	f	class:ctb::writer	signature:(const writer& w)
operator +=	writer.h	/^  writer<M,I,O,P>& writer<M,I,O,P>::operator+=(writer&& w)$/;"	f	class:ctb::writer	signature:(writer&& w)
operator ->	cartesian_multiplier.h	/^      const iterator* operator->() const;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:() const
operator ->	cartesian_multiplier.h	/^      iterator* operator->();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
operator ->	cartesian_multiplier.h	/^    const typename cartesian_multiplier<T>::iterator* cartesian_multiplier<T>::operator->() const$/;"	f	class:ctb::cartesian_multiplier	signature:() const
operator ->	cartesian_multiplier.h	/^    typename cartesian_multiplier<T>::iterator* cartesian_multiplier<T>::operator->()$/;"	f	class:ctb::cartesian_multiplier	signature:()
operator ->	graph.h	/^            proxy<T,O...>& operator->(); \/**provides diect access to the data member*\/$/;"	p	class:ctb::graph_generic::node	access:public	signature:()
operator ->	graph.h	/^    graph_generic<T,I,directed,O...>::node::proxy<T,O...>& graph_generic<T,I,directed,O...>::node::operator->()  $/;"	f	class:ctb::graph_generic::node	signature:()
operator ->	proxy.h	/^      const result_dereferenced_t* operator->() const { return &dereference(data); }$/;"	f	class:ctb::proxy_	access:public	signature:() const
operator =	writer.h	/^        \/*operators*\/template<typename N> writer& operator=( const writer<N>& w) ;$/;"	p	class:ctb::writer	access:public	signature:( const writer<N>& w)
operator =	writer.h	/^        \/*operators*\/template<typename N> writer& operator=( writer<N>&& w) ;$/;"	p	class:ctb::writer	access:public	signature:( writer<N>&& w)
operator =	writer.h	/^    writer<M,I,O,P>& writer<M,I,O,P>::operator=(const writer<N>& w)$/;"	f	class:ctb::writer	signature:(const writer<N>& w)
operator =	writer.h	/^    writer<M,I,O,P>& writer<M,I,O,P>::operator=(writer<N>&& w)$/;"	f	class:ctb::writer	signature:(writer<N>&& w)
operator ==	cartesian_multiplier.h	/^      bool operator==(const cartesian_multiplier&)const ;$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:(const cartesian_multiplier&) const
operator ==	cartesian_multiplier.h	/^    bool cartesian_multiplier<T>::operator==(const cartesian_multiplier& c) const$/;"	f	class:ctb::cartesian_multiplier	signature:(const cartesian_multiplier& c) const
operator ==	writer.h	/^        \/*operators*\/bool operator==(const writer& w) ;$/;"	p	class:ctb::writer	access:public	signature:(const writer& w)
operator ==	writer.h	/^    bool writer<M,I,O,P>::operator==(const writer& w)$/;"	f	class:ctb::writer	signature:(const writer& w)
operator []	proxy.h	/^      template <typename U> typename br_ct<U>::type operator [](U args) const { return data[args]; }$/;"	f	class:ctb::proxy_	access:public	signature:(U args) const
operator const T&	proxy.h	/^      operator const T&() const { return data; }$/;"	f	class:ctb::proxy_	access:public	signature:() const
opid	generator.h	/^            proxy<id_t> opid;$/;"	m	class:ctb::generator::data_t	access:public
opid	instructions.h	/^            \/*EAPI*\/proxy<typename T::flag_t> flags; \/*EAPI*\/proxy<typename T::opid_t> opid;$/;"	m	class:ctb::instruction_table::operation	access:public
opid_t	datatypes.h	/^    typedef int opid_t;$/;"	t	struct:ctb::traits_conv_test	access:public
opid_t	datatypes.h	/^    typedef std::string opid_t;$/;"	t	struct:ctb::traits	access:public
out	graph.h	/^            proxy<std::vector<node*> > out;$/;"	m	class:ctb::graph_generic::node	access:public
out	graph.h	/^        proxy<vertex_list_t> out;$/;"	m	class:ctb::graph_generic	access:public
out_type	instructions.h	/^            \/*EAPI*\/proxy<typename T::tid_t> out_type;$/;"	m	class:ctb::instruction_table::operation	access:public
output_box	unit_test6/output.h	/^class output_box :$/;"	c	inherits:bobox::basic_box
output_box	unit_test6/output.h	/^output_box(const bobox::box_parameters_pack &box_params) :$/;"	f	class:output_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
output_box::BOBOX_BOX_INPUTS_LIST	unit_test6/output.h	/^  BOBOX_BOX_INPUTS_LIST(input_list_0, 0,input_list_1, 1);$/;"	p	class:output_box	access:public	signature:(input_list_0, 0,input_list_1, 1)
output_box::BOBOX_BOX_OUTPUTS_LIST	unit_test6/output.h	/^  BOBOX_BOX_OUTPUTS_LIST(output_list_0, 0);$/;"	p	class:output_box	access:public	signature:(output_list_0, 0)
output_box::model	unit_test6/output.h	/^  typedef generic_model<output_box> model;$/;"	t	class:output_box	access:public
output_box::output_box	unit_test6/output.h	/^output_box(const bobox::box_parameters_pack &box_params) :$/;"	f	class:output_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
output_list_$1	templates/bobox_send.h	/^send_poisoned( outputs::output_list_$1());$/;"	p	signature:()
output_offset	templates/bobox_align.h	/^std::size_t output_offset = pos_out_$3 % $1;$/;"	v
outs	loader_test.h	/^        std::map<typename T::tid_t, std::vector<typename T::opid_t> > outs;$/;"	m	class:ctb::test_loader	access:private
param_t	datatypes.h	/^    typedef int param_t;$/;"	t	struct:ctb::traits	access:public
param_t	datatypes.h	/^    typedef std::string param_t;$/;"	t	struct:ctb::traits_conv_test	access:public
param_t	generator.h	/^        typedef typename T::param_t param_t;$/;"	t	class:ctb::generator	access:private
parameters	generator.h	/^            std::vector<param_t> parameters;$/;"	m	class:ctb::generator::data_t	access:private
parent	graph.h	/^            graph_generic* parent;$/;"	m	class:ctb::graph_generic::node	access:private
parent	instructions.h	/^            instruction_table* parent;$/;"	m	class:ctb::instruction_table::operation	access:private
parent	instructions.h	/^            instruction_table* parent;$/;"	m	class:ctb::instruction_table::type	access:private
parse_command	ctb.h	/^        int parse_command(std::string);$/;"	p	class:ctb::ctb	access:public	signature:(std::string)
parse_command	ctb.h	/^    int ctb<T,IT>::parse_command(std::string line)$/;"	f	class:ctb::ctb	signature:(std::string line)
parse_command_stream	ctb.h	/^        int parse_command_stream(std::istream& );$/;"	p	class:ctb::ctb	access:public	signature:(std::istream& )
parse_command_stream	ctb.h	/^    int ctb<T,IT>::parse_command_stream(std::istream& stream)$/;"	f	class:ctb::ctb	signature:(std::istream& stream)
parser	parser.h	/^  class parser$/;"	c	namespace:ctb
pass	datatypes.h	/^  template <typename ... T> void pass(T...)$/;"	f	namespace:ctb	signature:(T....)
pass	split.h	/^  template <typename ... T> void pass(T...)$/;"	f	namespace:ctb	signature:(T....)
pid	loader_test.h	/^        int pid;$/;"	m	class:ctb::test_loader	access:private
pos_in_$1	templates/bobox_decl_in.h	/^unsigned pos_in_$1 = 0;$/;"	v
pos_in_$1	templates/simple_decl_in.h	/^unsigned pos_in_$1 = 0;$/;"	v
pos_in_$1	templates/simu_decl_in.h	/^unsigned pos_in_$1 = 0;$/;"	v
pos_out_$1	templates/bobox_decl_out.h	/^unsigned pos_out_$1 = 0;$/;"	v
pos_out_$1	templates/simple_decl_out.h	/^unsigned pos_out_$1 = 0;$/;"	v
pos_out_$1	templates/simu_decl_out.h	/^unsigned pos_out_$1 = 0;$/;"	v
postprocess_allow	writer.h	/^        \/*operators*\/typedef writer<M, I, O, static_true> postprocess_allow;$/;"	t	class:ctb::writer	access:public
postprocess_deny	writer.h	/^        \/*operators*\/typedef writer<M, I, O, static_false> postprocess_deny;$/;"	t	class:ctb::writer	access:public
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	bool		LD_bool_vector	input	128	128		$$type preload_$$basename = _mm_load_si128,(const __m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	double		LD_double	input	2	2		$$type preload_$$basename = _mm_load_pd(&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	float		LD_float	input	4	4		$$type preload_$$basename = _mm_load_ps(&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	int16_t		LD_int16_t	input	8	8		$$type preload_$$basename = _mm_load_si128((__m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	int32_t		LD_int32_t	input	4	4		$$type preload_$$basename = _mm_load_si128((__m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	int64_t		LD_int64_t	input	2	2		$$type preload_$$basename = _mm_load_si128((__m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	int8_t		LD_int8_t	input	16	16		$$type preload_$$basename = _mm_load_si128((__m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	ssebool		LD_ssebool_byte	input	16	16		$$type preload_$$basename = _mm_load_si128((const __m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	uint16_t		LD_uint16_t	input	8	8		$$type preload_$$basename = _mm_load_si128((__m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	uint32_t		LD_uint32_t	input	4	4		$$type preload_$$basename = _mm_load_si128((__m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	uint64_t		LD_uint64_t	input	2	2		$$type preload_$$basename = _mm_load_si128((__m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$$basename	sse_set/C_table_expanded.csv	/^sse_IO	instruction	uint8_t		LD_uint8_t	input	16	16		$$type preload_$$basename = _mm_load_si128((__m128i*)&$$input);	sse,preloadio	10$/;"	v
preload_$basename	sse_set/C_table.csv	/^sse_IO	instruction	ssebool		LD_ssebool_byte	input	16	16		$type preload_$basename = _mm_load_si128((const __m128i*)&$$input);	sse,preloadio	10$/;"	v
preprocessline	loader_csv.h	/^        static writer_plain preprocessline(std::string line);$/;"	p	class:ctb::csv_loader	access:private	signature:(std::string line)
preprocessline	loader_csv.h	/^    writer_plain csv_loader<T,G,IT,D>::preprocessline(std::string line)$/;"	f	class:ctb::csv_loader	signature:(std::string line)
preprocessline	writer.h	/^        static std::vector<std::string> preprocessline(std::string line);$/;"	p	class:ctb::writer	access:private	signature:(std::string line)
preprocessline	writer.h	/^    std::vector<std::string> writer<M,I,O,P>::preprocessline(std::string line)$/;"	f	class:ctb::writer	signature:(std::string line)
print	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename ... Types> writer& print (const Types&... params) ;$/;"	p	class:ctb::writer	access:public	signature:(const Types&.... params)
print	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print(const Types&... params)$/;"	f	class:ctb::writer	signature:(const Types&.... params)
print	writer.h	/^  template<bool dolars = false, typename ... Types> std::string print (const Types&... params)$/;"	f	namespace:ctb	signature:(const Types&.... params)
print_branch	writer.h	/^        template<dolar_mode dolars = I, typename ... Types> writer& print_branch (static_false s, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(static_false s, const Types&... params)
print_branch	writer.h	/^        template<dolar_mode dolars = I, typename ... Types> writer& print_branch (static_true s,  const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(static_true s, const Types&... params)
print_branch	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_branch(static_false postprocess, const Types&... params)$/;"	f	class:ctb::writer	signature:(static_false postprocess, const Types&... params)
print_branch	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_branch(static_true postprocess, const Types&... params)$/;"	f	class:ctb::writer	signature:(static_true postprocess, const Types&... params)
print_internal	writer.h	/^        template<dolar_mode dolars, bool preprocess, typename ... Types> writer& print_internal (const std::string& format, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(const std::string& format, const Types&... params)
print_internal	writer.h	/^    template<dolar_mode dolars, bool preprocess, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_internal(const std::string& format, const Types&... params)  \/\/print("a[$1] = a[$1] $ $2", i, j) -> "a[i] = a[i] $ j$/;"	f	class:ctb::writer	signature:(const std::string& format, const Types&... params)
print_type	writer.h	/^        template<dolar_mode dolars = I, bool preprocess, typename ... Types> writer& print_type (const std::string& format, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(const std::string& format, const Types&... params)
print_type	writer.h	/^        template<dolar_mode dolars = I, bool preprocess, typename ... Types> writer& print_type (const writer& format, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(const writer& format, const Types&... params)
print_type	writer.h	/^        template<dolar_mode dolars = I, bool preprocess, typename ... Types> writer& print_type (int, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(int, const Types&... params)
print_type	writer.h	/^    template<dolar_mode dolars, bool preprocess, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_type( const std::string& format, const Types&... params)$/;"	f	class:ctb::writer	signature:( const std::string& format, const Types&... params)
print_type	writer.h	/^    template<dolar_mode dolars, bool preprocess, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_type(const writer& format, const Types&... params)$/;"	f	class:ctb::writer	signature:(const writer& format, const Types&... params)
print_type	writer.h	/^    template<dolar_mode dolars, bool preprocess, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::print_type(int num, const Types&... params)$/;"	f	class:ctb::writer	signature:(int num, const Types&... params)
printf	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename ... Types> writer& printf(const std::string& filename, const Types&... params) ; \/** print, but the first argument is a filename of a file which is to be loaded instead of the format string *\/$/;"	p	class:ctb::writer	access:public	signature:(const std::string& filename, const Types&... params)
printf	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::printf(const std::string& filename, const Types&... params)$/;"	f	class:ctb::writer	signature:(const std::string& filename, const Types&... params)
printnth	writer.h	/^        template <typename ... Types> void printnth(int i, const int& num, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(int i, const int& num, const Types&... params)
printnth	writer.h	/^        template <typename ... Types> void printnth(int i, const std::string& str, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(int i, const std::string& str, const Types&... params)
printnth	writer.h	/^        template <typename ... Types> void printnth(int i, const writer& wrt, const Types&... params) ;$/;"	p	class:ctb::writer	access:private	signature:(int i, const writer& wrt, const Types&... params)
printnth	writer.h	/^        void printnth(int i);$/;"	p	class:ctb::writer	access:private	signature:(int i)
printnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::printnth(int i, const int& num, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const int& num, const Types&... params)
printnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::printnth(int i, const std::string& str, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const std::string& str, const Types&... params)
printnth	writer.h	/^    template <typename ... Types> void writer<M,I,O,P>::printnth(int i, const writer& wrt, const Types&... params)$/;"	f	class:ctb::writer	signature:(int i, const writer& wrt, const Types&... params)
printnth	writer.h	/^    void writer<M,I,O,P>::printnth(int i)$/;"	f	class:ctb::writer	signature:(int i)
process	ctb.h	/^        template<template <typename ...> class L, typename M, typename...P> std::string process(std::string name, P...params) ;$/;"	p	class:ctb::ctb	access:public	signature:(std::string name, P...params)
process	ctb.h	/^    std::string ctb<T,IT>::process(std::string name, P...params)$/;"	f	class:ctb::ctb	signature:(std::string name, P...params)
process	loader_csv.h	/^        static void process(IT& instab, std::istream& s);$/;"	p	class:ctb::csv_loader	access:private	signature:(IT& instab, std::istream& s)
process	loader_csv.h	/^    void csv_loader<T,G,IT,D>::process(IT& instab, std::istream& s)$/;"	f	class:ctb::csv_loader	signature:(IT& instab, std::istream& s)
process	parser.h	/^      int process(const char*&);$/;"	p	class:ctb::parser	access:private	signature:(const char*&)
process	parser.h	/^  int parser::process(const char*& exp)$/;"	f	class:ctb::parser	signature:(const char*& exp)
process	writer.h	/^        template <bool preprocess> void process(int& pos, const std::string& format) ;$/;"	p	class:ctb::writer	access:private	signature:(int& pos, const std::string& format)
process	writer.h	/^    void writer<M,I,O,P>::process(int& pos, const std::string& format)$/;"	f	class:ctb::writer	signature:(int& pos, const std::string& format)
processed_in_$1	templates/simple_decl_in.h	/^unsigned processed_in_$1 = 0;$/;"	v
processed_out_$1	templates/simple_decl_out.h	/^unsigned processed_out_$1 = 0;$/;"	v
processed_out_$1	templates/simu_decl_out.h	/^unsigned processed_out_$1 = 0;$/;"	v
proxy_	proxy.h	/^      template <typename...L> proxy_(L&&... args) : data((std::forward<L>(args))...){}$/;"	f	class:ctb::proxy_	access:public	signature:(L&&.... args)
proxy_	proxy.h	/^    class proxy_ {$/;"	c	namespace:ctb
pull	templates/simu_box.h	/^  uint32_t pull()$/;"	f	class:tester	access:private	signature:()
pull	unit_test4/output.h	/^  uint32_t pull()$/;"	f	class:tester	access:private	signature:()
pull	unit_test5/output.h	/^  uint32_t pull()$/;"	f	class:tester	access:private	signature:()
push	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename ... Types, typename Type> writer& push  (const Type& format, const Types&... params) ; \/** explicit push on a new line. To be used with list_concat for simple creation of delimited lists.*\/$/;"	p	class:ctb::writer	access:public	signature:(const Type& format, const Types&... params)
push	writer.h	/^    template<dolar_mode dolars , typename ... Types, typename Type> writer<M,I,O,P>& writer<M,I,O,P>::push(const Type& format, const Types&... params)$/;"	f	class:ctb::writer	signature:(const Type& format, const Types&... params)
push_params	generator.h	/^            template<typename P, typename...Ps> void push_params(P&&, Ps&&... params);$/;"	p	class:ctb::generator::data_t	access:private	signature:(P&&, Ps&&... params)
push_params	generator.h	/^            void push_params();$/;"	p	class:ctb::generator::data_t	access:private	signature:()
push_params	generator.h	/^    void generator<T,IT>::data_t::push_params()$/;"	f	class:ctb::generator::data_t	signature:()
push_params	generator.h	/^    void generator<T,IT>::data_t::push_params(P&& p, Ps&&...params)$/;"	f	class:ctb::generator::data_t	signature:(P&& p, Ps&&...params)
pushf	writer.h	/^        \/*printing*\/ template<dolar_mode dolars = I, typename ... Types> writer& pushf (const std::string& filename, const Types&... params) ; \/** pushf is again a file-loaded version of push *\/$/;"	p	class:ctb::writer	access:public	signature:(const std::string& filename, const Types&... params)
pushf	writer.h	/^    template<dolar_mode dolars, typename ... Types> writer<M,I,O,P>& writer<M,I,O,P>::pushf(const std::string& filename, const Types&... params)$/;"	f	class:ctb::writer	signature:(const std::string& filename, const Types&... params)
r	control-flow-notes/ex1.h	/^void r(...)$/;"	f	signature:(....)
r	proxy.h	/^      const result_t& r() const { return data; }$/;"	f	class:ctb::proxy_	access:public	signature:() const
random_engine	templates/random_eng.h	/^class random_engine$/;"	c
random_engine	unit_test4/random_eng.h	/^class random_engine$/;"	c
random_engine	unit_test5/random_eng.h	/^class random_engine$/;"	c
random_engine::get	templates/random_eng.h	/^    uint32_t get()$/;"	f	class:random_engine	access:public	signature:()
random_engine::get	unit_test4/random_eng.h	/^    uint32_t get()$/;"	f	class:random_engine	access:public	signature:()
random_engine::get	unit_test5/random_eng.h	/^    uint32_t get()$/;"	f	class:random_engine	access:public	signature:()
random_engine::reset	templates/random_eng.h	/^    void reset(int s = 0) {seed = 5323; for(int i = 0; i < s; i++) get();};$/;"	f	class:random_engine	access:public	signature:(int s = 0)
random_engine::reset	unit_test4/random_eng.h	/^    void reset(int s = 0) {seed = 5323; for(int i = 0; i < s; i++) get();};$/;"	f	class:random_engine	access:public	signature:(int s = 0)
random_engine::reset	unit_test5/random_eng.h	/^    void reset(int s = 0) {seed = 5323; for(int i = 0; i < s; i++) get();};$/;"	f	class:random_engine	access:public	signature:(int s = 0)
random_engine::seed	templates/random_eng.h	/^    uint32_t seed;$/;"	m	class:random_engine	access:private
random_engine::seed	unit_test4/random_eng.h	/^    uint32_t seed;$/;"	m	class:random_engine	access:private
random_engine::seed	unit_test5/random_eng.h	/^    uint32_t seed;$/;"	m	class:random_engine	access:private
rating	instructions.h	/^              const int rating;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
rating	instructions.h	/^              const int rating;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
register_aliasenv	ctb.h	/^        template<class M> void register_aliasenv() ;$/;"	p	class:ctb::ctb	access:public	signature:()
register_aliasenv	ctb.h	/^    template<class M> void ctb<T,IT>::register_aliasenv()$/;"	f	class:ctb::ctb	signature:()
register_command	ctb.h	/^        void register_command(const std::string& cmd, std::function<void(stringlist&&)> f, const std::string& description);$/;"	p	class:ctb::ctb	access:public	signature:(const std::string& cmd, std::function<void(stringlist&&)> f, const std::string& description)
register_command	ctb.h	/^  void ctb<T,IT>::register_command(const std::string& cmd, std::function<void(stringlist&&)> f, const std::string& description)$/;"	f	class:ctb::ctb	signature:(const std::string& cmd, std::function<void(stringlist&&)> f, const std::string& description)
register_loader	ctb.h	/^        template<template <typename ... > class L> void register_loader() ;$/;"	p	class:ctb::ctb	access:public	signature:()
register_loader	ctb.h	/^    template<template <typename...> class L> void ctb<T,IT>::register_loader()$/;"	f	class:ctb::ctb	signature:()
required	tagmaster.h	/^        F required;$/;"	m	class:ctb::tagmaster	access:private
reset	cartesian_multiplier.h	/^      void reset();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
reset	cartesian_multiplier.h	/^  void cartesian_multiplier<T>::reset()$/;"	f	class:ctb::cartesian_multiplier	signature:()
reset	generator.h	/^        void reset();$/;"	p	class:ctb::generator	access:public	signature:()
reset	generator.h	/^    void generator<T,IT>::reset()$/;"	f	class:ctb::generator	signature:()
reset	templates/random_eng.h	/^    void reset(int s = 0) {seed = 5323; for(int i = 0; i < s; i++) get();};$/;"	f	class:random_engine	access:public	signature:(int s = 0)
reset	templates/simu_box.h	/^  void reset()$/;"	f	class:tester	access:private	signature:()
reset	unit_test4/output.h	/^  void reset()$/;"	f	class:tester	access:private	signature:()
reset	unit_test4/random_eng.h	/^    void reset(int s = 0) {seed = 5323; for(int i = 0; i < s; i++) get();};$/;"	f	class:random_engine	access:public	signature:(int s = 0)
reset	unit_test5/output.h	/^  void reset()$/;"	f	class:tester	access:private	signature:()
reset	unit_test5/random_eng.h	/^    void reset(int s = 0) {seed = 5323; for(int i = 0; i < s; i++) get();};$/;"	f	class:random_engine	access:public	signature:(int s = 0)
result_dereferenced_t	proxy.h	/^      typedef typename std::remove_reference<typename std::remove_pointer<T>::type>::type result_dereferenced_t;$/;"	t	class:ctb::proxy_	access:private
result_t	proxy.h	/^      typedef typename std::remove_reference<T>::type result_t;$/;"	t	class:ctb::proxy_	access:private
rm_tags	instructions.h	/^        \/*API*\/ void rm_tags(std::shared_ptr<taghandler_base>,std::size_t layer = gSELECT);$/;"	p	class:ctb::instruction_table	access:public	signature:(std::shared_ptr<taghandler_base>,std::size_t layer = gSELECT)
rm_tags	instructions.h	/^    void instruction_table<T>::rm_tags(std::shared_ptr<taghandler_base> ptr, std::size_t l)$/;"	f	class:ctb::instruction_table	signature:(std::shared_ptr<taghandler_base> ptr, std::size_t l)
route	graph.h	/^            typedef std::pair<node*, int> route;$/;"	t	class:ctb::graph_generic::node	access:private
runtime	unit_test6/main.cpp	/^class runtime : public bobox::runtime, public bobox::basic_object_factory {$/;"	c	file:	inherits:bobox::runtime,bobox::basic_object_factory
rw	proxy.h	/^      result_t& rw() { return data; }$/;"	f	class:ctb::proxy_	access:private	signature:()
satisfactory	instructions.h	/^              mutable typename T::flag_t satisfactory;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
satisfactory	instructions.h	/^              mutable typename T::flag_t satisfactory;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
seed	templates/random_eng.h	/^    uint32_t seed;$/;"	m	class:random_engine	access:private
seed	unit_test4/random_eng.h	/^    uint32_t seed;$/;"	m	class:random_engine	access:private
seed	unit_test5/random_eng.h	/^    uint32_t seed;$/;"	m	class:random_engine	access:private
self_test	cartesian_multiplier.h	/^      static void self_test();$/;"	p	class:ctb::cartesian_multiplier	access:public	signature:()
self_test	cartesian_multiplier.h	/^      void cartesian_multiplier<T>::self_test()$/;"	f	class:ctb::cartesian_multiplier	signature:()
self_test	ctb.h	/^        static void self_test() ;$/;"	p	class:ctb::ctb	access:public	signature:()
self_test	ctb.h	/^    void ctb<T,IT>::self_test()$/;"	f	class:ctb::ctb	signature:()
self_test	graph.h	/^        static void self_test();$/;"	p	class:ctb::graph_generic	access:public	signature:()
self_test	graph.h	/^    void graph_generic<T,I,directed,O...>::self_test()$/;"	f	class:ctb::graph_generic	signature:()
self_test	loader_csv.h	/^        static void self_test() ;$/;"	p	class:ctb::csv_loader	access:public	signature:()
self_test	loader_csv.h	/^    void csv_loader<T,G,IT,D>::self_test()$/;"	f	class:ctb::csv_loader	signature:()
self_test	loader_test.h	/^          static void self_test() ;$/;"	p	class:ctb::test_loader	access:public	signature:()
self_test	loader_test.h	/^    void test_loader<T,G,IT>::self_test()$/;"	f	class:ctb::test_loader	signature:()
self_test	loader_xml.h	/^        static void self_test() ;$/;"	p	class:ctb::xml_loader	access:public	signature:()
self_test	loader_xml.h	/^    void xml_loader<T,G,IT>::self_test()$/;"	f	class:ctb::xml_loader	signature:()
self_test	parser.h	/^      static void self_test();$/;"	p	class:ctb::parser	access:public	signature:()
self_test	parser.h	/^  void parser::self_test()$/;"	f	class:ctb::parser	signature:()
self_test	tagmaster.h	/^        static void self_test();$/;"	p	class:ctb::tagmaster	access:public	signature:()
self_test	tagmaster.h	/^  void tagmaster<F>::self_test()$/;"	f	class:ctb::tagmaster	signature:()
self_test	writer.h	/^        \/*static*\/   static void self_test() ;$/;"	p	class:ctb::writer	access:public	signature:()
self_test	writer.h	/^    void writer<M,I,O,P>::self_test()$/;"	f	class:ctb::writer	signature:()
set_compiletest	generator.h	/^        void set_compiletest(bool);$/;"	p	class:ctb::generator	access:public	signature:(bool)
set_compiletest	generator.h	/^    void generator<T,IT>::set_compiletest(bool c)$/;"	f	class:ctb::generator	signature:(bool c)
set_instab	generator.h	/^        void set_instab( IT& i);$/;"	p	class:ctb::generator	access:public	signature:( IT& i)
set_instab	generator.h	/^    void generator<T,IT>::set_instab( IT& i)$/;"	f	class:ctb::generator	signature:( IT& i)
shake	writer.h	/^        template <typename J, typename N> static void shake(J itr, J itre, std::string line, std::vector<std::string>& output);$/;"	p	class:ctb::writer	access:private	signature:(J itr, J itre, std::string line, std::vector<std::string>& output)
shake	writer.h	/^    void writer<M,I,O,P>::shake(J itr, J itre, std::string line, std::vector<std::string>& output)$/;"	f	class:ctb::writer	signature:(J itr, J itre, std::string line, std::vector<std::string>& output)
shouldbreak	languages.h	/^      static void shouldbreak(const int& pos, const std::string& format, bool& brbf, bool& braf)$/;"	f	class:ctb::language_cpp	access:public	signature:(const int& pos, const std::string& format, bool& brbf, bool& braf)
shouldbreak	languages.h	/^      static void shouldbreak(const int& pos, const std::string& format, bool& brbf, bool& braf)$/;"	f	class:ctb::language_empty	access:public	signature:(const int& pos, const std::string& format, bool& brbf, bool& braf)
shouldindent	languages.h	/^      static void shouldindent( const std::string& line, int& outindent, int& indent, int& nobreak)$/;"	f	class:ctb::language_cpp	access:public	signature:( const std::string& line, int& outindent, int& indent, int& nobreak)
shouldindent	languages.h	/^      static void shouldindent( const std::string&, int& outindent, int& indent, int& nobreak)$/;"	f	class:ctb::language_empty	access:public	signature:( const std::string&, int& outindent, int& indent, int& nobreak)
sink_box	unit_test6/main.cpp	/^	sink_box(const bobox::box_parameters_pack &box_params) : bobox::basic_box(box_params) {}$/;"	f	class:sink_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
sink_box	unit_test6/main.cpp	/^class sink_box : public bobox::basic_box {$/;"	c	file:	inherits:bobox::basic_box
sink_box::BOBOX_BOX_INPUTS_LIST	unit_test6/main.cpp	/^	BOBOX_BOX_INPUTS_LIST(data_in, 0);$/;"	p	class:sink_box	file:	access:public	signature:(data_in, 0)
sink_box::BOBOX_BOX_OUTPUTS_LIST	unit_test6/main.cpp	/^	BOBOX_BOX_OUTPUTS_LIST(poison_out, 0);$/;"	p	class:sink_box	file:	access:public	signature:(poison_out, 0)
sink_box::model	unit_test6/main.cpp	/^	typedef generic_model<sink_box> model;$/;"	t	class:sink_box	file:	access:public
sink_box::sink_box	unit_test6/main.cpp	/^	sink_box(const bobox::box_parameters_pack &box_params) : bobox::basic_box(box_params) {}$/;"	f	class:sink_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
size	writer.h	/^        \/*others*\/   int size() ;$/;"	p	class:ctb::writer	access:public	signature:()
size	writer.h	/^  int writer<M,I,O,P>::size()$/;"	f	class:ctb::writer	signature:()
size_in_$1	templates/bobox_decl_in.h	/^unsigned size_in_$1 = 0;$/;"	v
size_in_$1	templates/simple_decl_in.h	/^unsigned size_in_$1 = 0;$/;"	v
size_in_$1	templates/simu_decl_in.h	/^unsigned size_in_$1 = 0;$/;"	v
size_out_$1	templates/bobox_decl_out.h	/^unsigned size_out_$1 = 0;$/;"	v
size_out_$1	templates/simple_decl_out.h	/^unsigned size_out_$1 = 0;$/;"	v
size_out_$1	templates/simu_decl_out.h	/^unsigned size_out_$1 = 0;$/;"	v
source_box	unit_test6/main.cpp	/^	source_box(const bobox::box_parameters_pack &box_params) : bobox::basic_box(box_params) {}$/;"	f	class:source_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
source_box	unit_test6/main.cpp	/^class source_box : public bobox::basic_box {$/;"	c	file:	inherits:bobox::basic_box
source_box::BOBOX_BOX_INPUTS_LIST	unit_test6/main.cpp	/^	BOBOX_BOX_INPUTS_LIST(poison_in, 0);$/;"	p	class:source_box	file:	access:public	signature:(poison_in, 0)
source_box::BOBOX_BOX_OUTPUTS_LIST	unit_test6/main.cpp	/^	BOBOX_BOX_OUTPUTS_LIST(data_out, 0);$/;"	p	class:source_box	file:	access:public	signature:(data_out, 0)
source_box::model	unit_test6/main.cpp	/^	typedef generic_model<source_box> model;$/;"	t	class:source_box	file:	access:public
source_box::source_box	unit_test6/main.cpp	/^	source_box(const bobox::box_parameters_pack &box_params) : bobox::basic_box(box_params) {}$/;"	f	class:source_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
split	datatypes.h	/^  std::vector<std::string> split(std::string str, char d, bool squash = false)$/;"	f	namespace:ctb	signature:(std::string str, char d, bool squash = false)
split	split.h	/^  std::vector<std::string> split(std::string str, char d, bool squash = false)$/;"	f	namespace:ctb	signature:(std::string str, char d, bool squash = false)
squash_add_sub	parser.h	/^      void squash_add_sub();$/;"	p	class:ctb::parser	access:private	signature:()
squash_add_sub	parser.h	/^  void parser::squash_add_sub()$/;"	f	class:ctb::parser	signature:()
squash_mul_div	parser.h	/^      void squash_mul_div();$/;"	p	class:ctb::parser	access:private	signature:()
squash_mul_div	parser.h	/^  void parser::squash_mul_div()$/;"	f	class:ctb::parser	signature:()
sse	sse_set/C_table_expanded.csv	/^sse_IO	instruction	double		LD_double	input	2	2	_mm_load_pd(&$$input)		sse,alignedio	10$/;"	v
sse	sse_set/C_table_expanded.csv	/^sse_IO	instruction	double		LD_double	input	2	2	_mm_loadu_pd(&$$input)		sse,unalignedio	11$/;"	v
sse	sse_set/C_table_expanded.csv	/^sse_IO	instruction	double	double	ST_double	output	2	2	_mm_store_pd(&$$output,(__m128d)$$arg1)		sse,alignedio	10$/;"	v
sse	sse_set/C_table_expanded.csv	/^sse_IO	instruction	float		LD_float	input	4	4	_mm_load_ps(&$$input)		sse,alignedio	10$/;"	v
sse	sse_set/C_table_expanded.csv	/^sse_IO	instruction	float		LD_float	input	4	4	_mm_loadu_ps(&$$input)		sse,unalignedio	11$/;"	v
sse	sse_set/C_table_expanded.csv	/^sse_IO	instruction	float	float	ST_float	output	4	4	_mm_store_ps(&$$output,(__m128)$$arg1)		sse,alignedio	10$/;"	v
ssebool	sse_set/C_table.csv	/^logical	instruction	ssebool	ssebool,ssebool	${op,c->GE,>=,LE,<=,GT,>,LT,<}_ssebool		1	1	0xFF*($$arg1 $c $$arg2) 		C	10$/;"	v
ssebool	sse_set/C_table.csv	/^logical	instruction	ssebool	ssebool,ssebool	AND_ssebool		1	1	$$arg1 & $$arg2		C	10$/;"	v
ssebool	sse_set/C_table.csv	/^logical	instruction	ssebool	ssebool,ssebool	EQ_ssebool		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
ssebool	sse_set/C_table.csv	/^logical	instruction	ssebool	ssebool,ssebool	NE_ssebool		1	1	0xFF*($$arg1 != $$arg2)		C	10$/;"	v
ssebool	sse_set/C_table.csv	/^logical	instruction	ssebool	ssebool,ssebool	OR_ssebool		1	1	$$arg1 | $$arg1		C	10$/;"	v
ssebool	sse_set/C_table.csv	/^logical	instruction	ssebool	ssebool,ssebool	XOR_ssebool		1	1	$$arg1 ^ $$arg2 		C	10$/;"	v
ssebool	sse_set/C_table.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	${name,op->AND,and,OR,or,XOR,xor}_ssebool		${w->2,4,8,16}	$w	_mm_$op_si128($$arg1,$$arg2)		sse	5$/;"	v
ssebool	sse_set/C_table.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	EQ_ssebool		${w->2,4,8,16}	$w	_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GE_ssebool		${w->2,4,8,16}	$w	_mm_or_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GT_ssebool		${w->2,4,8,16}	$w	_mm_and_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	LE_ssebool		${w->2,4,8,16}	$w	_mm_or_si128($$arg2,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	LT_ssebool		${w->2,4,8,16}	$w	_mm_and_si128($$arg2,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg1))		sse	5$/;"	v
ssebool	sse_set/C_table.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	NE_ssebool		${w->2,4,8,16}	$w	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^logical	instruction	ssebool	ssebool,ssebool	AND_ssebool		1	1	$$arg1 & $$arg2		C	10$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^logical	instruction	ssebool	ssebool,ssebool	EQ_ssebool		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^logical	instruction	ssebool	ssebool,ssebool	GE_ssebool		1	1	0xFF*($$arg1 >= $$arg2)		C	10$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^logical	instruction	ssebool	ssebool,ssebool	GT_ssebool		1	1	0xFF*($$arg1 > $$arg2)		C	10$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^logical	instruction	ssebool	ssebool,ssebool	LE_ssebool		1	1	0xFF*($$arg1 <= $$arg2)		C	10$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^logical	instruction	ssebool	ssebool,ssebool	XOR_ssebool		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	AND_ssebool		16	16	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	AND_ssebool		2	2	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	AND_ssebool		4	4	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	AND_ssebool		8	8	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	EQ_ssebool		16	16	_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	EQ_ssebool		2	2	_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	EQ_ssebool		4	4	_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	EQ_ssebool		8	8	_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GE_ssebool		16	16	_mm_or_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GE_ssebool		2	2	_mm_or_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GE_ssebool		4	4	_mm_or_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GE_ssebool		8	8	_mm_or_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GT_ssebool		16	16	_mm_and_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GT_ssebool		2	2	_mm_and_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GT_ssebool		4	4	_mm_and_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	GT_ssebool		8	8	_mm_and_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg2))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	LE_ssebool		16	16	_mm_or_si128($$arg2,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	LE_ssebool		2	2	_mm_or_si128($$arg2,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	LE_ssebool		4	4	_mm_or_si128($$arg2,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	LE_ssebool		8	8	_mm_or_si128($$arg2,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)))		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	XOR_ssebool		16	16	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	XOR_ssebool		2	2	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	XOR_ssebool		4	4	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
ssebool	sse_set/C_table_expanded.csv	/^sse_logical	instruction	ssebool	ssebool,ssebool	XOR_ssebool		8	8	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
stack	parser.h	/^      std::vector<token> stack;$/;"	m	class:ctb::parser	access:private
static_false	writer.h	/^  struct static_false{ const static bool value = false;};$/;"	s	namespace:ctb
static_true	writer.h	/^  struct static_true{ const static bool value = true;};$/;"	s	namespace:ctb
stoi	datatypes.h	/^  int stoi(std::string str)$/;"	f	namespace:ctb	signature:(std::string str)
store_bool	templates/macros.h	21;"	d
store_bool	unit_test4/macros.h	21;"	d
store_bool	unit_test5/macros.h	21;"	d
string_to_flags	datatypes.h	/^    F string_to_flags(std::string str)$/;"	f	namespace:ctb	signature:(std::string str)
stringlist	datatypes.h	/^  typedef std::vector<std::string> stringlist;$/;"	t	namespace:ctb
stringlist	split.h	/^  typedef std::vector<std::string> stringlist;$/;"	t	namespace:ctb
strings	writer.h	/^        \/*others*\/   const stringlist& strings();$/;"	p	class:ctb::writer	access:public	signature:()
strings	writer.h	/^    const stringlist& writer<M,I,O,P>::strings()$/;"	f	class:ctb::writer	signature:()
tAdd	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
tDiv	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
tEof	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
tMul	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
tNum	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
tPB	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
tPE	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
tSub	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	e	enum:ctb::parser::ttype
table	README.md	/^The default project accepts a xml representation of an instruction table (which describes the conversion of instructions) and of a graph, which uses opcodes defined by the instruction table, and produces a simple c++ test unit.$/;"	v
table	tags	/^table	README.md	\/^The default project accepts a xml representation of an instruction table (which describes the conversion of instructions) and of a graph, which uses opcodes defined by the instruction table, and produces a simple c++ test unit.$\/;"	v$/;"	v
taghandler_base	taghandler.h	/^  class taghandler_base$/;"	c	namespace:ctb
taghandlerrec_t	instructions.h	/^        typedef std::set<std::shared_ptr<taghandler_base>> taghandlerrec_t;$/;"	t	class:ctb::instruction_table	access:private
taghandlertab_t	instructions.h	/^        typedef std::vector<taghandlerrec_t> taghandlertab_t;$/;"	t	class:ctb::instruction_table	access:private
taglists	instructions.h	/^        taghandlertab_t taglists;$/;"	m	class:ctb::instruction_table	access:private
tagmaster	tagmaster.h	/^        tagmaster(const std::string& r = "",const std::string& a = "",const std::string& e = "", const std::string& ne = "");$/;"	p	class:ctb::tagmaster	access:public	signature:(const std::string& r = Ó,const std::string& a = Ó,const std::string& e = Ó, const std::string& ne = Ó)
tagmaster	tagmaster.h	/^    class tagmaster : public taghandler_base$/;"	c	namespace:ctb	inherits:taghandler_base
tagmaster	tagmaster.h	/^    tagmaster<F>::tagmaster(const std::string& r,const std::string& a,const std::string& e,const std::string& ne) : at(1), full(0), tags_used()$/;"	f	class:ctb::tagmaster	signature:(const std::string& r,const std::string& a,const std::string& e,const std::string& ne)
tagmaster_default	tagmaster.h	/^  typedef tagmaster<uint32_t> tagmaster_default;$/;"	t	namespace:ctb
tags	instructions.h	/^              const std::string tags;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
tags	instructions.h	/^              const std::string tags;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
tags_used	tagmaster.h	/^        std::map<std::string,F> tags_used;$/;"	m	class:ctb::tagmaster	access:private
test	templates/simu_box.h	/^  void test(int frame = -1)$/;"	f	class:tester	access:public	signature:(int frame = -1)
test	unit_test4/output.h	/^  void test(int frame = -1)$/;"	f	class:tester	access:public	signature:(int frame = -1)
test	unit_test5/output.h	/^  void test(int frame = -1)$/;"	f	class:tester	access:public	signature:(int frame = -1)
test_bobox_box	unit_test1/test_bobox.h	/^class test_bobox_box :$/;"	c	inherits:bobox::basic_box
test_bobox_box	unit_test1/test_bobox.h	/^test_bobox_box(const bobox::box_parameters_pack &box_params) :$/;"	f	class:test_bobox_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
test_bobox_box::BOBOX_BOX_INPUTS_LIST	unit_test1/test_bobox.h	/^  BOBOX_BOX_INPUTS_LIST(input_list_2, 2,input_list_1, 1);$/;"	p	class:test_bobox_box	access:public	signature:(input_list_2, 2,input_list_1, 1)
test_bobox_box::BOBOX_BOX_OUTPUTS_LIST	unit_test1/test_bobox.h	/^  BOBOX_BOX_OUTPUTS_LIST(output_list_0, 0);$/;"	p	class:test_bobox_box	access:public	signature:(output_list_0, 0)
test_bobox_box::model	unit_test1/test_bobox.h	/^  typedef generic_model<test_bobox_box> model;$/;"	t	class:test_bobox_box	access:public
test_bobox_box::test_bobox_box	unit_test1/test_bobox.h	/^test_bobox_box(const bobox::box_parameters_pack &box_params) :$/;"	f	class:test_bobox_box	access:public	signature:(const bobox::box_parameters_pack &box_params)
test_body	templates/simple_box.h	/^void test_body() $/;"	f	signature:()
test_body	unit_test1/test_simple.h	/^void test_body()$/;"	f	signature:()
test_body	unit_test1/test_simple.h.reference	/^void test_body()$/;"	f	signature:()
test_body	unit_test3/output_csv.h	/^void test_body()$/;"	f	signature:()
test_body	unit_test3/output_xml.h	/^void test_body()$/;"	f	signature:()
test_body$10	templates/simu_body.h	/^void test_body$10()$/;"	f	signature:()
test_body1	unit_test4/output.h	/^  void test_body1()$/;"	f	class:tester	access:private	signature:()
test_body1	unit_test5/output.h	/^  void test_body1()$/;"	f	class:tester	access:private	signature:()
test_body16	unit_test4/output.h	/^  void test_body16()$/;"	f	class:tester	access:private	signature:()
test_body16	unit_test5/output.h	/^  void test_body16()$/;"	f	class:tester	access:private	signature:()
test_body2	unit_test4/output.h	/^  void test_body2()$/;"	f	class:tester	access:private	signature:()
test_body2	unit_test5/output.h	/^  void test_body2()$/;"	f	class:tester	access:private	signature:()
test_body4	unit_test4/output.h	/^  void test_body4()$/;"	f	class:tester	access:private	signature:()
test_body4	unit_test5/output.h	/^  void test_body4()$/;"	f	class:tester	access:private	signature:()
test_body8	unit_test4/output.h	/^  void test_body8()$/;"	f	class:tester	access:private	signature:()
test_body8	unit_test5/output.h	/^  void test_body8()$/;"	f	class:tester	access:private	signature:()
test_loader	loader_test.h	/^    class test_loader$/;"	c	namespace:ctb
tester	templates/simu_box.h	/^class tester$/;"	c
tester	unit_test4/output.h	/^class tester$/;"	c
tester	unit_test5/output.h	/^class tester$/;"	c
tester::data_check_0	unit_test5/output.h	/^  std::vector<int32_t> data_check_0;$/;"	m	class:tester	access:private
tester::data_check_1	unit_test4/output.h	/^  std::vector<double> data_check_1;$/;"	m	class:tester	access:private
tester::data_check_10	unit_test4/output.h	/^  std::vector<uint8_t> data_check_10;$/;"	m	class:tester	access:private
tester::data_check_100	unit_test4/output.h	/^  std::vector<bool> data_check_100;$/;"	m	class:tester	access:private
tester::data_check_101	unit_test4/output.h	/^  std::vector<bool> data_check_101;$/;"	m	class:tester	access:private
tester::data_check_102	unit_test4/output.h	/^  std::vector<bool> data_check_102;$/;"	m	class:tester	access:private
tester::data_check_103	unit_test4/output.h	/^  std::vector<uint16_t> data_check_103;$/;"	m	class:tester	access:private
tester::data_check_104	unit_test4/output.h	/^  std::vector<double> data_check_104;$/;"	m	class:tester	access:private
tester::data_check_105	unit_test4/output.h	/^  std::vector<float> data_check_105;$/;"	m	class:tester	access:private
tester::data_check_106	unit_test4/output.h	/^  std::vector<int16_t> data_check_106;$/;"	m	class:tester	access:private
tester::data_check_107	unit_test4/output.h	/^  std::vector<int32_t> data_check_107;$/;"	m	class:tester	access:private
tester::data_check_108	unit_test4/output.h	/^  std::vector<int64_t> data_check_108;$/;"	m	class:tester	access:private
tester::data_check_109	unit_test4/output.h	/^  std::vector<int8_t> data_check_109;$/;"	m	class:tester	access:private
tester::data_check_11	unit_test4/output.h	/^  std::vector<bool> data_check_11;$/;"	m	class:tester	access:private
tester::data_check_110	unit_test4/output.h	/^  std::vector<uint16_t> data_check_110;$/;"	m	class:tester	access:private
tester::data_check_111	unit_test4/output.h	/^  std::vector<uint32_t> data_check_111;$/;"	m	class:tester	access:private
tester::data_check_112	unit_test4/output.h	/^  std::vector<uint64_t> data_check_112;$/;"	m	class:tester	access:private
tester::data_check_113	unit_test4/output.h	/^  std::vector<uint8_t> data_check_113;$/;"	m	class:tester	access:private
tester::data_check_114	unit_test4/output.h	/^  std::vector<uint32_t> data_check_114;$/;"	m	class:tester	access:private
tester::data_check_115	unit_test4/output.h	/^  std::vector<double> data_check_115;$/;"	m	class:tester	access:private
tester::data_check_116	unit_test4/output.h	/^  std::vector<float> data_check_116;$/;"	m	class:tester	access:private
tester::data_check_117	unit_test4/output.h	/^  std::vector<int16_t> data_check_117;$/;"	m	class:tester	access:private
tester::data_check_118	unit_test4/output.h	/^  std::vector<int32_t> data_check_118;$/;"	m	class:tester	access:private
tester::data_check_119	unit_test4/output.h	/^  std::vector<int64_t> data_check_119;$/;"	m	class:tester	access:private
tester::data_check_12	unit_test4/output.h	/^  std::vector<bool> data_check_12;$/;"	m	class:tester	access:private
tester::data_check_120	unit_test4/output.h	/^  std::vector<int8_t> data_check_120;$/;"	m	class:tester	access:private
tester::data_check_121	unit_test4/output.h	/^  std::vector<uint16_t> data_check_121;$/;"	m	class:tester	access:private
tester::data_check_122	unit_test4/output.h	/^  std::vector<uint32_t> data_check_122;$/;"	m	class:tester	access:private
tester::data_check_123	unit_test4/output.h	/^  std::vector<uint64_t> data_check_123;$/;"	m	class:tester	access:private
tester::data_check_124	unit_test4/output.h	/^  std::vector<uint8_t> data_check_124;$/;"	m	class:tester	access:private
tester::data_check_125	unit_test4/output.h	/^  std::vector<uint64_t> data_check_125;$/;"	m	class:tester	access:private
tester::data_check_126	unit_test4/output.h	/^  std::vector<double> data_check_126;$/;"	m	class:tester	access:private
tester::data_check_127	unit_test4/output.h	/^  std::vector<float> data_check_127;$/;"	m	class:tester	access:private
tester::data_check_128	unit_test4/output.h	/^  std::vector<int16_t> data_check_128;$/;"	m	class:tester	access:private
tester::data_check_129	unit_test4/output.h	/^  std::vector<int32_t> data_check_129;$/;"	m	class:tester	access:private
tester::data_check_13	unit_test4/output.h	/^  std::vector<bool> data_check_13;$/;"	m	class:tester	access:private
tester::data_check_130	unit_test4/output.h	/^  std::vector<int64_t> data_check_130;$/;"	m	class:tester	access:private
tester::data_check_131	unit_test4/output.h	/^  std::vector<int8_t> data_check_131;$/;"	m	class:tester	access:private
tester::data_check_132	unit_test4/output.h	/^  std::vector<uint16_t> data_check_132;$/;"	m	class:tester	access:private
tester::data_check_133	unit_test4/output.h	/^  std::vector<uint32_t> data_check_133;$/;"	m	class:tester	access:private
tester::data_check_134	unit_test4/output.h	/^  std::vector<uint64_t> data_check_134;$/;"	m	class:tester	access:private
tester::data_check_135	unit_test4/output.h	/^  std::vector<uint8_t> data_check_135;$/;"	m	class:tester	access:private
tester::data_check_136	unit_test4/output.h	/^  std::vector<uint8_t> data_check_136;$/;"	m	class:tester	access:private
tester::data_check_137	unit_test4/output.h	/^  std::vector<double> data_check_137;$/;"	m	class:tester	access:private
tester::data_check_138	unit_test4/output.h	/^  std::vector<float> data_check_138;$/;"	m	class:tester	access:private
tester::data_check_139	unit_test4/output.h	/^  std::vector<int16_t> data_check_139;$/;"	m	class:tester	access:private
tester::data_check_14	unit_test4/output.h	/^  std::vector<int16_t> data_check_14;$/;"	m	class:tester	access:private
tester::data_check_140	unit_test4/output.h	/^  std::vector<int32_t> data_check_140;$/;"	m	class:tester	access:private
tester::data_check_141	unit_test4/output.h	/^  std::vector<int64_t> data_check_141;$/;"	m	class:tester	access:private
tester::data_check_142	unit_test4/output.h	/^  std::vector<int8_t> data_check_142;$/;"	m	class:tester	access:private
tester::data_check_143	unit_test4/output.h	/^  std::vector<uint16_t> data_check_143;$/;"	m	class:tester	access:private
tester::data_check_144	unit_test4/output.h	/^  std::vector<uint32_t> data_check_144;$/;"	m	class:tester	access:private
tester::data_check_145	unit_test4/output.h	/^  std::vector<uint64_t> data_check_145;$/;"	m	class:tester	access:private
tester::data_check_146	unit_test4/output.h	/^  std::vector<uint8_t> data_check_146;$/;"	m	class:tester	access:private
tester::data_check_147	unit_test4/output.h	/^  std::vector<double> data_check_147;$/;"	m	class:tester	access:private
tester::data_check_148	unit_test4/output.h	/^  std::vector<float> data_check_148;$/;"	m	class:tester	access:private
tester::data_check_149	unit_test4/output.h	/^  std::vector<int16_t> data_check_149;$/;"	m	class:tester	access:private
tester::data_check_15	unit_test4/output.h	/^  std::vector<int32_t> data_check_15;$/;"	m	class:tester	access:private
tester::data_check_150	unit_test4/output.h	/^  std::vector<int32_t> data_check_150;$/;"	m	class:tester	access:private
tester::data_check_151	unit_test4/output.h	/^  std::vector<int64_t> data_check_151;$/;"	m	class:tester	access:private
tester::data_check_152	unit_test4/output.h	/^  std::vector<int8_t> data_check_152;$/;"	m	class:tester	access:private
tester::data_check_153	unit_test4/output.h	/^  std::vector<uint16_t> data_check_153;$/;"	m	class:tester	access:private
tester::data_check_154	unit_test4/output.h	/^  std::vector<uint32_t> data_check_154;$/;"	m	class:tester	access:private
tester::data_check_155	unit_test4/output.h	/^  std::vector<uint64_t> data_check_155;$/;"	m	class:tester	access:private
tester::data_check_156	unit_test4/output.h	/^  std::vector<uint8_t> data_check_156;$/;"	m	class:tester	access:private
tester::data_check_157	unit_test4/output.h	/^  std::vector<bool> data_check_157;$/;"	m	class:tester	access:private
tester::data_check_158	unit_test4/output.h	/^  std::vector<bool> data_check_158;$/;"	m	class:tester	access:private
tester::data_check_159	unit_test4/output.h	/^  std::vector<bool> data_check_159;$/;"	m	class:tester	access:private
tester::data_check_16	unit_test4/output.h	/^  std::vector<int64_t> data_check_16;$/;"	m	class:tester	access:private
tester::data_check_160	unit_test4/output.h	/^  std::vector<uint8_t> data_check_160;$/;"	m	class:tester	access:private
tester::data_check_161	unit_test4/output.h	/^  std::vector<uint8_t> data_check_161;$/;"	m	class:tester	access:private
tester::data_check_162	unit_test4/output.h	/^  std::vector<uint8_t> data_check_162;$/;"	m	class:tester	access:private
tester::data_check_163	unit_test4/output.h	/^  std::vector<uint8_t> data_check_163;$/;"	m	class:tester	access:private
tester::data_check_164	unit_test4/output.h	/^  std::vector<uint8_t> data_check_164;$/;"	m	class:tester	access:private
tester::data_check_165	unit_test4/output.h	/^  std::vector<uint8_t> data_check_165;$/;"	m	class:tester	access:private
tester::data_check_166	unit_test4/output.h	/^  std::vector<uint8_t> data_check_166;$/;"	m	class:tester	access:private
tester::data_check_167	unit_test4/output.h	/^  std::vector<uint8_t> data_check_167;$/;"	m	class:tester	access:private
tester::data_check_168	unit_test4/output.h	/^  std::vector<uint8_t> data_check_168;$/;"	m	class:tester	access:private
tester::data_check_169	unit_test4/output.h	/^  std::vector<uint8_t> data_check_169;$/;"	m	class:tester	access:private
tester::data_check_17	unit_test4/output.h	/^  std::vector<int8_t> data_check_17;$/;"	m	class:tester	access:private
tester::data_check_170	unit_test4/output.h	/^  std::vector<uint8_t> data_check_170;$/;"	m	class:tester	access:private
tester::data_check_171	unit_test4/output.h	/^  std::vector<bool> data_check_171;$/;"	m	class:tester	access:private
tester::data_check_172	unit_test4/output.h	/^  std::vector<bool> data_check_172;$/;"	m	class:tester	access:private
tester::data_check_173	unit_test4/output.h	/^  std::vector<bool> data_check_173;$/;"	m	class:tester	access:private
tester::data_check_174	unit_test4/output.h	/^  std::vector<uint8_t> data_check_174;$/;"	m	class:tester	access:private
tester::data_check_175	unit_test4/output.h	/^  std::vector<uint8_t> data_check_175;$/;"	m	class:tester	access:private
tester::data_check_176	unit_test4/output.h	/^  std::vector<uint8_t> data_check_176;$/;"	m	class:tester	access:private
tester::data_check_177	unit_test4/output.h	/^  std::vector<uint8_t> data_check_177;$/;"	m	class:tester	access:private
tester::data_check_178	unit_test4/output.h	/^  std::vector<uint8_t> data_check_178;$/;"	m	class:tester	access:private
tester::data_check_179	unit_test4/output.h	/^  std::vector<uint8_t> data_check_179;$/;"	m	class:tester	access:private
tester::data_check_18	unit_test4/output.h	/^  std::vector<uint8_t> data_check_18;$/;"	m	class:tester	access:private
tester::data_check_180	unit_test4/output.h	/^  std::vector<uint8_t> data_check_180;$/;"	m	class:tester	access:private
tester::data_check_181	unit_test4/output.h	/^  std::vector<uint8_t> data_check_181;$/;"	m	class:tester	access:private
tester::data_check_182	unit_test4/output.h	/^  std::vector<uint8_t> data_check_182;$/;"	m	class:tester	access:private
tester::data_check_183	unit_test4/output.h	/^  std::vector<uint8_t> data_check_183;$/;"	m	class:tester	access:private
tester::data_check_184	unit_test4/output.h	/^  std::vector<uint8_t> data_check_184;$/;"	m	class:tester	access:private
tester::data_check_185	unit_test4/output.h	/^  std::vector<bool> data_check_185;$/;"	m	class:tester	access:private
tester::data_check_186	unit_test4/output.h	/^  std::vector<bool> data_check_186;$/;"	m	class:tester	access:private
tester::data_check_187	unit_test4/output.h	/^  std::vector<bool> data_check_187;$/;"	m	class:tester	access:private
tester::data_check_188	unit_test4/output.h	/^  std::vector<uint8_t> data_check_188;$/;"	m	class:tester	access:private
tester::data_check_189	unit_test4/output.h	/^  std::vector<uint8_t> data_check_189;$/;"	m	class:tester	access:private
tester::data_check_19	unit_test4/output.h	/^  std::vector<uint16_t> data_check_19;$/;"	m	class:tester	access:private
tester::data_check_190	unit_test4/output.h	/^  std::vector<uint8_t> data_check_190;$/;"	m	class:tester	access:private
tester::data_check_191	unit_test4/output.h	/^  std::vector<uint8_t> data_check_191;$/;"	m	class:tester	access:private
tester::data_check_192	unit_test4/output.h	/^  std::vector<uint8_t> data_check_192;$/;"	m	class:tester	access:private
tester::data_check_193	unit_test4/output.h	/^  std::vector<uint8_t> data_check_193;$/;"	m	class:tester	access:private
tester::data_check_194	unit_test4/output.h	/^  std::vector<uint8_t> data_check_194;$/;"	m	class:tester	access:private
tester::data_check_195	unit_test4/output.h	/^  std::vector<uint8_t> data_check_195;$/;"	m	class:tester	access:private
tester::data_check_196	unit_test4/output.h	/^  std::vector<uint8_t> data_check_196;$/;"	m	class:tester	access:private
tester::data_check_197	unit_test4/output.h	/^  std::vector<uint8_t> data_check_197;$/;"	m	class:tester	access:private
tester::data_check_198	unit_test4/output.h	/^  std::vector<uint8_t> data_check_198;$/;"	m	class:tester	access:private
tester::data_check_199	unit_test4/output.h	/^  std::vector<bool> data_check_199;$/;"	m	class:tester	access:private
tester::data_check_2	unit_test4/output.h	/^  std::vector<float> data_check_2;$/;"	m	class:tester	access:private
tester::data_check_20	unit_test4/output.h	/^  std::vector<uint32_t> data_check_20;$/;"	m	class:tester	access:private
tester::data_check_200	unit_test4/output.h	/^  std::vector<bool> data_check_200;$/;"	m	class:tester	access:private
tester::data_check_201	unit_test4/output.h	/^  std::vector<bool> data_check_201;$/;"	m	class:tester	access:private
tester::data_check_202	unit_test4/output.h	/^  std::vector<uint8_t> data_check_202;$/;"	m	class:tester	access:private
tester::data_check_203	unit_test4/output.h	/^  std::vector<uint8_t> data_check_203;$/;"	m	class:tester	access:private
tester::data_check_204	unit_test4/output.h	/^  std::vector<uint8_t> data_check_204;$/;"	m	class:tester	access:private
tester::data_check_205	unit_test4/output.h	/^  std::vector<uint8_t> data_check_205;$/;"	m	class:tester	access:private
tester::data_check_206	unit_test4/output.h	/^  std::vector<uint8_t> data_check_206;$/;"	m	class:tester	access:private
tester::data_check_207	unit_test4/output.h	/^  std::vector<uint8_t> data_check_207;$/;"	m	class:tester	access:private
tester::data_check_208	unit_test4/output.h	/^  std::vector<uint8_t> data_check_208;$/;"	m	class:tester	access:private
tester::data_check_209	unit_test4/output.h	/^  std::vector<uint8_t> data_check_209;$/;"	m	class:tester	access:private
tester::data_check_21	unit_test4/output.h	/^  std::vector<uint64_t> data_check_21;$/;"	m	class:tester	access:private
tester::data_check_210	unit_test4/output.h	/^  std::vector<uint8_t> data_check_210;$/;"	m	class:tester	access:private
tester::data_check_211	unit_test4/output.h	/^  std::vector<uint8_t> data_check_211;$/;"	m	class:tester	access:private
tester::data_check_212	unit_test4/output.h	/^  std::vector<uint8_t> data_check_212;$/;"	m	class:tester	access:private
tester::data_check_213	unit_test4/output.h	/^  std::vector<int16_t> data_check_213;$/;"	m	class:tester	access:private
tester::data_check_214	unit_test4/output.h	/^  std::vector<int32_t> data_check_214;$/;"	m	class:tester	access:private
tester::data_check_215	unit_test4/output.h	/^  std::vector<int64_t> data_check_215;$/;"	m	class:tester	access:private
tester::data_check_216	unit_test4/output.h	/^  std::vector<int8_t> data_check_216;$/;"	m	class:tester	access:private
tester::data_check_217	unit_test4/output.h	/^  std::vector<uint16_t> data_check_217;$/;"	m	class:tester	access:private
tester::data_check_218	unit_test4/output.h	/^  std::vector<uint32_t> data_check_218;$/;"	m	class:tester	access:private
tester::data_check_219	unit_test4/output.h	/^  std::vector<uint64_t> data_check_219;$/;"	m	class:tester	access:private
tester::data_check_22	unit_test4/output.h	/^  std::vector<uint8_t> data_check_22;$/;"	m	class:tester	access:private
tester::data_check_220	unit_test4/output.h	/^  std::vector<uint8_t> data_check_220;$/;"	m	class:tester	access:private
tester::data_check_221	unit_test4/output.h	/^  std::vector<bool> data_check_221;$/;"	m	class:tester	access:private
tester::data_check_222	unit_test4/output.h	/^  std::vector<bool> data_check_222;$/;"	m	class:tester	access:private
tester::data_check_223	unit_test4/output.h	/^  std::vector<bool> data_check_223;$/;"	m	class:tester	access:private
tester::data_check_224	unit_test4/output.h	/^  std::vector<uint8_t> data_check_224;$/;"	m	class:tester	access:private
tester::data_check_225	unit_test4/output.h	/^  std::vector<uint8_t> data_check_225;$/;"	m	class:tester	access:private
tester::data_check_226	unit_test4/output.h	/^  std::vector<uint8_t> data_check_226;$/;"	m	class:tester	access:private
tester::data_check_227	unit_test4/output.h	/^  std::vector<uint8_t> data_check_227;$/;"	m	class:tester	access:private
tester::data_check_228	unit_test4/output.h	/^  std::vector<uint8_t> data_check_228;$/;"	m	class:tester	access:private
tester::data_check_229	unit_test4/output.h	/^  std::vector<uint8_t> data_check_229;$/;"	m	class:tester	access:private
tester::data_check_23	unit_test4/output.h	/^  std::vector<double> data_check_23;$/;"	m	class:tester	access:private
tester::data_check_230	unit_test4/output.h	/^  std::vector<uint8_t> data_check_230;$/;"	m	class:tester	access:private
tester::data_check_231	unit_test4/output.h	/^  std::vector<uint8_t> data_check_231;$/;"	m	class:tester	access:private
tester::data_check_232	unit_test4/output.h	/^  std::vector<uint8_t> data_check_232;$/;"	m	class:tester	access:private
tester::data_check_233	unit_test4/output.h	/^  std::vector<uint8_t> data_check_233;$/;"	m	class:tester	access:private
tester::data_check_234	unit_test4/output.h	/^  std::vector<uint8_t> data_check_234;$/;"	m	class:tester	access:private
tester::data_check_235	unit_test4/output.h	/^  std::vector<int16_t> data_check_235;$/;"	m	class:tester	access:private
tester::data_check_236	unit_test4/output.h	/^  std::vector<int32_t> data_check_236;$/;"	m	class:tester	access:private
tester::data_check_237	unit_test4/output.h	/^  std::vector<int64_t> data_check_237;$/;"	m	class:tester	access:private
tester::data_check_238	unit_test4/output.h	/^  std::vector<int8_t> data_check_238;$/;"	m	class:tester	access:private
tester::data_check_239	unit_test4/output.h	/^  std::vector<uint16_t> data_check_239;$/;"	m	class:tester	access:private
tester::data_check_24	unit_test4/output.h	/^  std::vector<float> data_check_24;$/;"	m	class:tester	access:private
tester::data_check_240	unit_test4/output.h	/^  std::vector<uint32_t> data_check_240;$/;"	m	class:tester	access:private
tester::data_check_241	unit_test4/output.h	/^  std::vector<uint64_t> data_check_241;$/;"	m	class:tester	access:private
tester::data_check_242	unit_test4/output.h	/^  std::vector<uint8_t> data_check_242;$/;"	m	class:tester	access:private
tester::data_check_243	unit_test4/output.h	/^  std::vector<double> data_check_243;$/;"	m	class:tester	access:private
tester::data_check_244	unit_test4/output.h	/^  std::vector<float> data_check_244;$/;"	m	class:tester	access:private
tester::data_check_245	unit_test4/output.h	/^  std::vector<int16_t> data_check_245;$/;"	m	class:tester	access:private
tester::data_check_246	unit_test4/output.h	/^  std::vector<int32_t> data_check_246;$/;"	m	class:tester	access:private
tester::data_check_247	unit_test4/output.h	/^  std::vector<int64_t> data_check_247;$/;"	m	class:tester	access:private
tester::data_check_248	unit_test4/output.h	/^  std::vector<int8_t> data_check_248;$/;"	m	class:tester	access:private
tester::data_check_249	unit_test4/output.h	/^  std::vector<uint16_t> data_check_249;$/;"	m	class:tester	access:private
tester::data_check_25	unit_test4/output.h	/^  std::vector<int16_t> data_check_25;$/;"	m	class:tester	access:private
tester::data_check_250	unit_test4/output.h	/^  std::vector<uint32_t> data_check_250;$/;"	m	class:tester	access:private
tester::data_check_251	unit_test4/output.h	/^  std::vector<uint64_t> data_check_251;$/;"	m	class:tester	access:private
tester::data_check_252	unit_test4/output.h	/^  std::vector<uint8_t> data_check_252;$/;"	m	class:tester	access:private
tester::data_check_253	unit_test4/output.h	/^  std::vector<bool> data_check_253;$/;"	m	class:tester	access:private
tester::data_check_254	unit_test4/output.h	/^  std::vector<bool> data_check_254;$/;"	m	class:tester	access:private
tester::data_check_255	unit_test4/output.h	/^  std::vector<bool> data_check_255;$/;"	m	class:tester	access:private
tester::data_check_256	unit_test4/output.h	/^  std::vector<uint8_t> data_check_256;$/;"	m	class:tester	access:private
tester::data_check_257	unit_test4/output.h	/^  std::vector<uint8_t> data_check_257;$/;"	m	class:tester	access:private
tester::data_check_258	unit_test4/output.h	/^  std::vector<uint8_t> data_check_258;$/;"	m	class:tester	access:private
tester::data_check_259	unit_test4/output.h	/^  std::vector<uint8_t> data_check_259;$/;"	m	class:tester	access:private
tester::data_check_26	unit_test4/output.h	/^  std::vector<int32_t> data_check_26;$/;"	m	class:tester	access:private
tester::data_check_260	unit_test4/output.h	/^  std::vector<uint8_t> data_check_260;$/;"	m	class:tester	access:private
tester::data_check_261	unit_test4/output.h	/^  std::vector<uint8_t> data_check_261;$/;"	m	class:tester	access:private
tester::data_check_262	unit_test4/output.h	/^  std::vector<uint8_t> data_check_262;$/;"	m	class:tester	access:private
tester::data_check_263	unit_test4/output.h	/^  std::vector<uint8_t> data_check_263;$/;"	m	class:tester	access:private
tester::data_check_264	unit_test4/output.h	/^  std::vector<uint8_t> data_check_264;$/;"	m	class:tester	access:private
tester::data_check_265	unit_test4/output.h	/^  std::vector<uint8_t> data_check_265;$/;"	m	class:tester	access:private
tester::data_check_266	unit_test4/output.h	/^  std::vector<uint8_t> data_check_266;$/;"	m	class:tester	access:private
tester::data_check_267	unit_test4/output.h	/^  std::vector<bool> data_check_267;$/;"	m	class:tester	access:private
tester::data_check_268	unit_test4/output.h	/^  std::vector<bool> data_check_268;$/;"	m	class:tester	access:private
tester::data_check_269	unit_test4/output.h	/^  std::vector<bool> data_check_269;$/;"	m	class:tester	access:private
tester::data_check_27	unit_test4/output.h	/^  std::vector<int64_t> data_check_27;$/;"	m	class:tester	access:private
tester::data_check_270	unit_test4/output.h	/^  std::vector<int16_t> data_check_270;$/;"	m	class:tester	access:private
tester::data_check_271	unit_test4/output.h	/^  std::vector<int32_t> data_check_271;$/;"	m	class:tester	access:private
tester::data_check_272	unit_test4/output.h	/^  std::vector<int64_t> data_check_272;$/;"	m	class:tester	access:private
tester::data_check_273	unit_test4/output.h	/^  std::vector<int8_t> data_check_273;$/;"	m	class:tester	access:private
tester::data_check_274	unit_test4/output.h	/^  std::vector<uint8_t> data_check_274;$/;"	m	class:tester	access:private
tester::data_check_275	unit_test4/output.h	/^  std::vector<uint16_t> data_check_275;$/;"	m	class:tester	access:private
tester::data_check_276	unit_test4/output.h	/^  std::vector<uint32_t> data_check_276;$/;"	m	class:tester	access:private
tester::data_check_277	unit_test4/output.h	/^  std::vector<uint64_t> data_check_277;$/;"	m	class:tester	access:private
tester::data_check_278	unit_test4/output.h	/^  std::vector<uint8_t> data_check_278;$/;"	m	class:tester	access:private
tester::data_check_279	unit_test4/output.h	/^  std::vector<bool> data_check_279;$/;"	m	class:tester	access:private
tester::data_check_28	unit_test4/output.h	/^  std::vector<int8_t> data_check_28;$/;"	m	class:tester	access:private
tester::data_check_280	unit_test4/output.h	/^  std::vector<bool> data_check_280;$/;"	m	class:tester	access:private
tester::data_check_281	unit_test4/output.h	/^  std::vector<bool> data_check_281;$/;"	m	class:tester	access:private
tester::data_check_282	unit_test4/output.h	/^  std::vector<int16_t> data_check_282;$/;"	m	class:tester	access:private
tester::data_check_283	unit_test4/output.h	/^  std::vector<int32_t> data_check_283;$/;"	m	class:tester	access:private
tester::data_check_284	unit_test4/output.h	/^  std::vector<int64_t> data_check_284;$/;"	m	class:tester	access:private
tester::data_check_285	unit_test4/output.h	/^  std::vector<int8_t> data_check_285;$/;"	m	class:tester	access:private
tester::data_check_286	unit_test4/output.h	/^  std::vector<uint8_t> data_check_286;$/;"	m	class:tester	access:private
tester::data_check_287	unit_test4/output.h	/^  std::vector<uint16_t> data_check_287;$/;"	m	class:tester	access:private
tester::data_check_288	unit_test4/output.h	/^  std::vector<uint32_t> data_check_288;$/;"	m	class:tester	access:private
tester::data_check_289	unit_test4/output.h	/^  std::vector<uint64_t> data_check_289;$/;"	m	class:tester	access:private
tester::data_check_29	unit_test4/output.h	/^  std::vector<uint8_t> data_check_29;$/;"	m	class:tester	access:private
tester::data_check_290	unit_test4/output.h	/^  std::vector<uint8_t> data_check_290;$/;"	m	class:tester	access:private
tester::data_check_291	unit_test4/output.h	/^  std::vector<int16_t> data_check_291;$/;"	m	class:tester	access:private
tester::data_check_292	unit_test4/output.h	/^  std::vector<int32_t> data_check_292;$/;"	m	class:tester	access:private
tester::data_check_293	unit_test4/output.h	/^  std::vector<int64_t> data_check_293;$/;"	m	class:tester	access:private
tester::data_check_294	unit_test4/output.h	/^  std::vector<int8_t> data_check_294;$/;"	m	class:tester	access:private
tester::data_check_295	unit_test4/output.h	/^  std::vector<uint16_t> data_check_295;$/;"	m	class:tester	access:private
tester::data_check_296	unit_test4/output.h	/^  std::vector<uint32_t> data_check_296;$/;"	m	class:tester	access:private
tester::data_check_297	unit_test4/output.h	/^  std::vector<uint64_t> data_check_297;$/;"	m	class:tester	access:private
tester::data_check_298	unit_test4/output.h	/^  std::vector<uint8_t> data_check_298;$/;"	m	class:tester	access:private
tester::data_check_299	unit_test4/output.h	/^  std::vector<double> data_check_299;$/;"	m	class:tester	access:private
tester::data_check_3	unit_test4/output.h	/^  std::vector<int16_t> data_check_3;$/;"	m	class:tester	access:private
tester::data_check_30	unit_test4/output.h	/^  std::vector<uint16_t> data_check_30;$/;"	m	class:tester	access:private
tester::data_check_300	unit_test4/output.h	/^  std::vector<float> data_check_300;$/;"	m	class:tester	access:private
tester::data_check_301	unit_test4/output.h	/^  std::vector<int16_t> data_check_301;$/;"	m	class:tester	access:private
tester::data_check_302	unit_test4/output.h	/^  std::vector<int32_t> data_check_302;$/;"	m	class:tester	access:private
tester::data_check_303	unit_test4/output.h	/^  std::vector<int64_t> data_check_303;$/;"	m	class:tester	access:private
tester::data_check_304	unit_test4/output.h	/^  std::vector<int8_t> data_check_304;$/;"	m	class:tester	access:private
tester::data_check_305	unit_test4/output.h	/^  std::vector<uint16_t> data_check_305;$/;"	m	class:tester	access:private
tester::data_check_306	unit_test4/output.h	/^  std::vector<uint32_t> data_check_306;$/;"	m	class:tester	access:private
tester::data_check_307	unit_test4/output.h	/^  std::vector<uint64_t> data_check_307;$/;"	m	class:tester	access:private
tester::data_check_308	unit_test4/output.h	/^  std::vector<uint8_t> data_check_308;$/;"	m	class:tester	access:private
tester::data_check_309	unit_test4/output.h	/^  std::vector<bool> data_check_309;$/;"	m	class:tester	access:private
tester::data_check_31	unit_test4/output.h	/^  std::vector<uint32_t> data_check_31;$/;"	m	class:tester	access:private
tester::data_check_310	unit_test4/output.h	/^  std::vector<bool> data_check_310;$/;"	m	class:tester	access:private
tester::data_check_311	unit_test4/output.h	/^  std::vector<bool> data_check_311;$/;"	m	class:tester	access:private
tester::data_check_312	unit_test4/output.h	/^  std::vector<int16_t> data_check_312;$/;"	m	class:tester	access:private
tester::data_check_313	unit_test4/output.h	/^  std::vector<int32_t> data_check_313;$/;"	m	class:tester	access:private
tester::data_check_314	unit_test4/output.h	/^  std::vector<int64_t> data_check_314;$/;"	m	class:tester	access:private
tester::data_check_315	unit_test4/output.h	/^  std::vector<int8_t> data_check_315;$/;"	m	class:tester	access:private
tester::data_check_316	unit_test4/output.h	/^  std::vector<uint8_t> data_check_316;$/;"	m	class:tester	access:private
tester::data_check_317	unit_test4/output.h	/^  std::vector<uint16_t> data_check_317;$/;"	m	class:tester	access:private
tester::data_check_318	unit_test4/output.h	/^  std::vector<uint32_t> data_check_318;$/;"	m	class:tester	access:private
tester::data_check_319	unit_test4/output.h	/^  std::vector<uint64_t> data_check_319;$/;"	m	class:tester	access:private
tester::data_check_32	unit_test4/output.h	/^  std::vector<uint64_t> data_check_32;$/;"	m	class:tester	access:private
tester::data_check_320	unit_test4/output.h	/^  std::vector<uint8_t> data_check_320;$/;"	m	class:tester	access:private
tester::data_check_33	unit_test4/output.h	/^  std::vector<uint8_t> data_check_33;$/;"	m	class:tester	access:private
tester::data_check_34	unit_test4/output.h	/^  std::vector<double> data_check_34;$/;"	m	class:tester	access:private
tester::data_check_35	unit_test4/output.h	/^  std::vector<double> data_check_35;$/;"	m	class:tester	access:private
tester::data_check_36	unit_test4/output.h	/^  std::vector<float> data_check_36;$/;"	m	class:tester	access:private
tester::data_check_37	unit_test4/output.h	/^  std::vector<int16_t> data_check_37;$/;"	m	class:tester	access:private
tester::data_check_38	unit_test4/output.h	/^  std::vector<int32_t> data_check_38;$/;"	m	class:tester	access:private
tester::data_check_39	unit_test4/output.h	/^  std::vector<int64_t> data_check_39;$/;"	m	class:tester	access:private
tester::data_check_4	unit_test4/output.h	/^  std::vector<int32_t> data_check_4;$/;"	m	class:tester	access:private
tester::data_check_40	unit_test4/output.h	/^  std::vector<int8_t> data_check_40;$/;"	m	class:tester	access:private
tester::data_check_41	unit_test4/output.h	/^  std::vector<uint16_t> data_check_41;$/;"	m	class:tester	access:private
tester::data_check_42	unit_test4/output.h	/^  std::vector<uint32_t> data_check_42;$/;"	m	class:tester	access:private
tester::data_check_43	unit_test4/output.h	/^  std::vector<uint64_t> data_check_43;$/;"	m	class:tester	access:private
tester::data_check_44	unit_test4/output.h	/^  std::vector<uint8_t> data_check_44;$/;"	m	class:tester	access:private
tester::data_check_45	unit_test4/output.h	/^  std::vector<float> data_check_45;$/;"	m	class:tester	access:private
tester::data_check_46	unit_test4/output.h	/^  std::vector<double> data_check_46;$/;"	m	class:tester	access:private
tester::data_check_47	unit_test4/output.h	/^  std::vector<float> data_check_47;$/;"	m	class:tester	access:private
tester::data_check_48	unit_test4/output.h	/^  std::vector<int16_t> data_check_48;$/;"	m	class:tester	access:private
tester::data_check_49	unit_test4/output.h	/^  std::vector<int32_t> data_check_49;$/;"	m	class:tester	access:private
tester::data_check_5	unit_test4/output.h	/^  std::vector<int64_t> data_check_5;$/;"	m	class:tester	access:private
tester::data_check_50	unit_test4/output.h	/^  std::vector<int64_t> data_check_50;$/;"	m	class:tester	access:private
tester::data_check_51	unit_test4/output.h	/^  std::vector<int8_t> data_check_51;$/;"	m	class:tester	access:private
tester::data_check_52	unit_test4/output.h	/^  std::vector<uint16_t> data_check_52;$/;"	m	class:tester	access:private
tester::data_check_53	unit_test4/output.h	/^  std::vector<uint32_t> data_check_53;$/;"	m	class:tester	access:private
tester::data_check_54	unit_test4/output.h	/^  std::vector<uint64_t> data_check_54;$/;"	m	class:tester	access:private
tester::data_check_55	unit_test4/output.h	/^  std::vector<uint8_t> data_check_55;$/;"	m	class:tester	access:private
tester::data_check_56	unit_test4/output.h	/^  std::vector<int16_t> data_check_56;$/;"	m	class:tester	access:private
tester::data_check_57	unit_test4/output.h	/^  std::vector<double> data_check_57;$/;"	m	class:tester	access:private
tester::data_check_58	unit_test4/output.h	/^  std::vector<float> data_check_58;$/;"	m	class:tester	access:private
tester::data_check_59	unit_test4/output.h	/^  std::vector<int16_t> data_check_59;$/;"	m	class:tester	access:private
tester::data_check_6	unit_test4/output.h	/^  std::vector<int8_t> data_check_6;$/;"	m	class:tester	access:private
tester::data_check_60	unit_test4/output.h	/^  std::vector<int32_t> data_check_60;$/;"	m	class:tester	access:private
tester::data_check_61	unit_test4/output.h	/^  std::vector<int64_t> data_check_61;$/;"	m	class:tester	access:private
tester::data_check_62	unit_test4/output.h	/^  std::vector<int8_t> data_check_62;$/;"	m	class:tester	access:private
tester::data_check_63	unit_test4/output.h	/^  std::vector<uint16_t> data_check_63;$/;"	m	class:tester	access:private
tester::data_check_64	unit_test4/output.h	/^  std::vector<uint32_t> data_check_64;$/;"	m	class:tester	access:private
tester::data_check_65	unit_test4/output.h	/^  std::vector<uint64_t> data_check_65;$/;"	m	class:tester	access:private
tester::data_check_66	unit_test4/output.h	/^  std::vector<uint8_t> data_check_66;$/;"	m	class:tester	access:private
tester::data_check_67	unit_test4/output.h	/^  std::vector<int32_t> data_check_67;$/;"	m	class:tester	access:private
tester::data_check_68	unit_test4/output.h	/^  std::vector<double> data_check_68;$/;"	m	class:tester	access:private
tester::data_check_69	unit_test4/output.h	/^  std::vector<float> data_check_69;$/;"	m	class:tester	access:private
tester::data_check_7	unit_test4/output.h	/^  std::vector<uint16_t> data_check_7;$/;"	m	class:tester	access:private
tester::data_check_70	unit_test4/output.h	/^  std::vector<int16_t> data_check_70;$/;"	m	class:tester	access:private
tester::data_check_71	unit_test4/output.h	/^  std::vector<int32_t> data_check_71;$/;"	m	class:tester	access:private
tester::data_check_72	unit_test4/output.h	/^  std::vector<int64_t> data_check_72;$/;"	m	class:tester	access:private
tester::data_check_73	unit_test4/output.h	/^  std::vector<int8_t> data_check_73;$/;"	m	class:tester	access:private
tester::data_check_74	unit_test4/output.h	/^  std::vector<uint16_t> data_check_74;$/;"	m	class:tester	access:private
tester::data_check_75	unit_test4/output.h	/^  std::vector<uint32_t> data_check_75;$/;"	m	class:tester	access:private
tester::data_check_76	unit_test4/output.h	/^  std::vector<uint64_t> data_check_76;$/;"	m	class:tester	access:private
tester::data_check_77	unit_test4/output.h	/^  std::vector<uint8_t> data_check_77;$/;"	m	class:tester	access:private
tester::data_check_78	unit_test4/output.h	/^  std::vector<int64_t> data_check_78;$/;"	m	class:tester	access:private
tester::data_check_79	unit_test4/output.h	/^  std::vector<double> data_check_79;$/;"	m	class:tester	access:private
tester::data_check_8	unit_test4/output.h	/^  std::vector<uint32_t> data_check_8;$/;"	m	class:tester	access:private
tester::data_check_80	unit_test4/output.h	/^  std::vector<float> data_check_80;$/;"	m	class:tester	access:private
tester::data_check_81	unit_test4/output.h	/^  std::vector<int16_t> data_check_81;$/;"	m	class:tester	access:private
tester::data_check_82	unit_test4/output.h	/^  std::vector<int32_t> data_check_82;$/;"	m	class:tester	access:private
tester::data_check_83	unit_test4/output.h	/^  std::vector<int64_t> data_check_83;$/;"	m	class:tester	access:private
tester::data_check_84	unit_test4/output.h	/^  std::vector<int8_t> data_check_84;$/;"	m	class:tester	access:private
tester::data_check_85	unit_test4/output.h	/^  std::vector<uint16_t> data_check_85;$/;"	m	class:tester	access:private
tester::data_check_86	unit_test4/output.h	/^  std::vector<uint32_t> data_check_86;$/;"	m	class:tester	access:private
tester::data_check_87	unit_test4/output.h	/^  std::vector<uint64_t> data_check_87;$/;"	m	class:tester	access:private
tester::data_check_88	unit_test4/output.h	/^  std::vector<uint8_t> data_check_88;$/;"	m	class:tester	access:private
tester::data_check_89	unit_test4/output.h	/^  std::vector<int8_t> data_check_89;$/;"	m	class:tester	access:private
tester::data_check_9	unit_test4/output.h	/^  std::vector<uint64_t> data_check_9;$/;"	m	class:tester	access:private
tester::data_check_90	unit_test4/output.h	/^  std::vector<double> data_check_90;$/;"	m	class:tester	access:private
tester::data_check_91	unit_test4/output.h	/^  std::vector<float> data_check_91;$/;"	m	class:tester	access:private
tester::data_check_92	unit_test4/output.h	/^  std::vector<int16_t> data_check_92;$/;"	m	class:tester	access:private
tester::data_check_93	unit_test4/output.h	/^  std::vector<int32_t> data_check_93;$/;"	m	class:tester	access:private
tester::data_check_94	unit_test4/output.h	/^  std::vector<int64_t> data_check_94;$/;"	m	class:tester	access:private
tester::data_check_95	unit_test4/output.h	/^  std::vector<int8_t> data_check_95;$/;"	m	class:tester	access:private
tester::data_check_96	unit_test4/output.h	/^  std::vector<uint16_t> data_check_96;$/;"	m	class:tester	access:private
tester::data_check_97	unit_test4/output.h	/^  std::vector<uint32_t> data_check_97;$/;"	m	class:tester	access:private
tester::data_check_98	unit_test4/output.h	/^  std::vector<uint64_t> data_check_98;$/;"	m	class:tester	access:private
tester::data_check_99	unit_test4/output.h	/^  std::vector<uint8_t> data_check_99;$/;"	m	class:tester	access:private
tester::data_source	templates/simu_box.h	/^  random_engine data_source;$/;"	m	class:tester	access:private
tester::data_source	unit_test4/output.h	/^  random_engine data_source;$/;"	m	class:tester	access:private
tester::data_source	unit_test5/output.h	/^  random_engine data_source;$/;"	m	class:tester	access:private
tester::dbgframe	templates/simu_box.h	/^  int dbgframe;$/;"	m	class:tester	access:private
tester::dbgframe	unit_test4/output.h	/^  int dbgframe;$/;"	m	class:tester	access:private
tester::dbgframe	unit_test5/output.h	/^  int dbgframe;$/;"	m	class:tester	access:private
tester::pull	templates/simu_box.h	/^  uint32_t pull()$/;"	f	class:tester	access:private	signature:()
tester::pull	unit_test4/output.h	/^  uint32_t pull()$/;"	f	class:tester	access:private	signature:()
tester::pull	unit_test5/output.h	/^  uint32_t pull()$/;"	f	class:tester	access:private	signature:()
tester::reset	templates/simu_box.h	/^  void reset()$/;"	f	class:tester	access:private	signature:()
tester::reset	unit_test4/output.h	/^  void reset()$/;"	f	class:tester	access:private	signature:()
tester::reset	unit_test5/output.h	/^  void reset()$/;"	f	class:tester	access:private	signature:()
tester::test	templates/simu_box.h	/^  void test(int frame = -1)$/;"	f	class:tester	access:public	signature:(int frame = -1)
tester::test	unit_test4/output.h	/^  void test(int frame = -1)$/;"	f	class:tester	access:public	signature:(int frame = -1)
tester::test	unit_test5/output.h	/^  void test(int frame = -1)$/;"	f	class:tester	access:public	signature:(int frame = -1)
tester::test_body1	unit_test4/output.h	/^  void test_body1()$/;"	f	class:tester	access:private	signature:()
tester::test_body1	unit_test5/output.h	/^  void test_body1()$/;"	f	class:tester	access:private	signature:()
tester::test_body16	unit_test4/output.h	/^  void test_body16()$/;"	f	class:tester	access:private	signature:()
tester::test_body16	unit_test5/output.h	/^  void test_body16()$/;"	f	class:tester	access:private	signature:()
tester::test_body2	unit_test4/output.h	/^  void test_body2()$/;"	f	class:tester	access:private	signature:()
tester::test_body2	unit_test5/output.h	/^  void test_body2()$/;"	f	class:tester	access:private	signature:()
tester::test_body4	unit_test4/output.h	/^  void test_body4()$/;"	f	class:tester	access:private	signature:()
tester::test_body4	unit_test5/output.h	/^  void test_body4()$/;"	f	class:tester	access:private	signature:()
tester::test_body8	unit_test4/output.h	/^  void test_body8()$/;"	f	class:tester	access:private	signature:()
tester::test_body8	unit_test5/output.h	/^  void test_body8()$/;"	f	class:tester	access:private	signature:()
testloader_default	loader_test.h	/^  typedef test_loader<traits, generator_default, instruction_table_default> testloader_default;$/;"	t	namespace:ctb
tid	instructions.h	/^            \/*EAPI*\/proxy<typename T::tid_t> tid;$/;"	m	class:ctb::instruction_table::type	access:public
tid_t	datatypes.h	/^    typedef int tid_t;$/;"	t	struct:ctb::traits_conv_test	access:public
tid_t	datatypes.h	/^    typedef std::string tid_t;$/;"	t	struct:ctb::traits	access:public
to_file	writer.h	/^        \/*static*\/   static void to_file(const std::string& filename, const std::string& contents);$/;"	p	class:ctb::writer	access:public	signature:(const std::string& filename, const std::string& contents)
to_file	writer.h	/^    void writer<M,I,O,P>::to_file(const std::string& filename,const std::string& contents)$/;"	f	class:ctb::writer	signature:(const std::string& filename,const std::string& contents)
to_mask	tagmaster.h	/^        F to_mask(const std::string&);$/;"	p	class:ctb::tagmaster	access:public	signature:(const std::string&)
to_mask	tagmaster.h	/^    F tagmaster<F>::to_mask(const std::string& str)$/;"	f	class:ctb::tagmaster	signature:(const std::string& str)
to_string	datatypes.h	/^  std::string to_string(int i)$/;"	f	namespace:ctb	signature:(int i)
to_string	datatypes.h	/^  std::string to_string(std::string str)$/;"	f	namespace:ctb	signature:(std::string str)
to_string	writer.h	/^    std::string to_string(const writer<M,I,O,P>& w)$/;"	f	namespace:ctb	signature:(const writer<M,I,O,P>& w)
to_writer	writer.h	/^        const stringlist& to_writer(const stringlist& r);$/;"	p	class:ctb::writer	access:private	signature:(const stringlist& r)
to_writer	writer.h	/^        const writer<M,I,O,P>& to_writer(const writer<M,I,O,P>& r);$/;"	p	class:ctb::writer	access:private	signature:(const writer<M,I,O,P>& r)
to_writer	writer.h	/^        writer<M,I,O,P> to_writer(const int& r);$/;"	p	class:ctb::writer	access:private	signature:(const int& r)
to_writer	writer.h	/^        writer<M,I,O,P> to_writer(const std::string& r);$/;"	p	class:ctb::writer	access:private	signature:(const std::string& r)
to_writer	writer.h	/^    const stringlist& writer<M,I,O,P>::to_writer(const stringlist& r)$/;"	f	class:ctb::writer	signature:(const stringlist& r)
to_writer	writer.h	/^    const writer<M,I,O,P>& writer<M,I,O,P>::to_writer(const writer<M,I,O,P>& r)$/;"	f	class:ctb::writer	signature:(const writer<M,I,O,P>& r)
to_writer	writer.h	/^    writer<M,I,O,P> writer<M,I,O,P>::to_writer(const int& r)$/;"	f	class:ctb::writer	signature:(const int& r)
to_writer	writer.h	/^    writer<M,I,O,P> writer<M,I,O,P>::to_writer(const std::string& r)$/;"	f	class:ctb::writer	signature:(const std::string& r)
token	parser.h	/^      typedef std::pair<ttype, int> token;$/;"	t	class:ctb::parser	access:public
tokenize	parser.h	/^      token tokenize(const char *&);$/;"	p	class:ctb::parser	access:private	signature:(const char *&)
tokenize	parser.h	/^  parser::token parser::tokenize(const char *& ptr)$/;"	f	class:ctb::parser	signature:(const char *& ptr)
traits	datatypes.h	/^  struct traits$/;"	s	namespace:ctb
traits_conv_test	datatypes.h	/^  struct traits_conv_test$/;"	s	namespace:ctb
trim	datatypes.h	/^  std::string trim(const std::string& s)$/;"	f	namespace:ctb	signature:(const std::string& s)
trim	writer.h	/^        void trim() ;$/;"	p	class:ctb::writer	access:private	signature:()
trim	writer.h	/^    void writer<M,I,O,P>::trim()$/;"	f	class:ctb::writer	signature:()
ttype	parser.h	/^      enum ttype{tNum,tMul,tDiv,tAdd,tSub,tPB,tPE,tEof};$/;"	g	class:ctb::parser	access:public
type	instructions.h	/^            type() = delete;$/;"	p	class:ctb::instruction_table::type	access:public	signature:()
type	instructions.h	/^            type(instruction_table*, int bitwidth);$/;"	p	class:ctb::instruction_table::type	access:public	signature:(instruction_table*, int bitwidth)
type	instructions.h	/^        class type$/;"	c	class:ctb::instruction_table	access:private
type	instructions.h	/^    instruction_table<T>::type::type(instruction_table<T>* p, int bw) : parent(p), bitwidth(bw)$/;"	f	class:ctb::instruction_table::type	signature:(instruction_table<T>* p, int bw)
type	parser.h	/^      ttype type(const token&);$/;"	p	class:ctb::parser	access:private	signature:(const token&)
type	parser.h	/^  parser::ttype parser::type(const token& t)$/;"	f	class:ctb::parser	signature:(const token& t)
type	proxy.h	/^      template <typename U> struct br_ct  { typedef decltype(std::declval<T const>()[std::declval<U>()]) type; };$/;"	t	struct:ctb::proxy_::br_ct	access:public
type	proxy.h	/^      template <typename U> struct br_t { typedef decltype(std::declval<T      >()[std::declval<U>()]) type; };$/;"	t	struct:ctb::proxy_::br_t	access:public
type	proxy.h	/^      typedef T type;$/;"	t	struct:ctb::friend_maker	access:public
type_t	instructions.h	/^        typedef type type_t;$/;"	t	class:ctb::instruction_table	access:public
type_version	instructions.h	/^              type_version() = delete;$/;"	p	struct:ctb::instruction_table::type::type_version	access:public	signature:()
type_version	instructions.h	/^              type_version(int w, const std::string& c,const std::string&);$/;"	p	struct:ctb::instruction_table::type::type_version	access:public	signature:(int w, const std::string& c,const std::string&)
type_version	instructions.h	/^            struct type_version$/;"	s	class:ctb::instruction_table::type	access:private
type_version	instructions.h	/^    instruction_table<T>::type::type_version::type_version(int w, const std::string& c,const std::string& n) : width(w), code(c), note(n)$/;"	f	class:ctb::instruction_table::type::type_version	signature:(int w, const std::string& c,const std::string& n)
typetab	instructions.h	/^        \/*EAPI*\/proxy<typetab_t> typetab;$/;"	m	class:ctb::instruction_table	access:public
typetab_t	instructions.h	/^        typedef std::map<typename T::tid_t, type*> typetab_t;$/;"	t	class:ctb::instruction_table	access:private
uint16_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint16_t	uint16_t,uint16_t	ADD_uint16_t		1	1	$$arg1 + $$arg2		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint16_t	uint16_t,uint16_t	DIV_uint16_t		1	1	$$arg1 \/ $$arg2		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint16_t	uint16_t,uint16_t	SUB_uint16_t		1	1	$$arg1 - $$arg2		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint16_t	uint16_t,uint16_t	AND_uint16_t		1	1	$$arg1 & $$arg2		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint16_t	uint16_t,uint16_t	LSF_uint16_t		1	1	$$arg1 << $$arg2		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint16_t	uint16_t,uint16_t	XOR_uint16_t		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint16_t,uint16_t	EQ_uint16_t		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint16_t,uint16_t	GE_uint16_t		1	1	0xFF*($$arg1 >= $$arg2)		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint16_t,uint16_t	GT_uint16_t		1	1	0xFF*($$arg1 > $$arg2)		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint16_t,uint16_t	LE_uint16_t		1	1	0xFF*($$arg1 <= $$arg2)		C	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint16_t	uint16_t,uint16_t	ADD_uint16_t		2	2	_mm_add_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint16_t	uint16_t,uint16_t	ADD_uint16_t		4	4	_mm_add_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint16_t	uint16_t,uint16_t	ADD_uint16_t		8	8	_mm_add_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint16_t	uint16_t,uint16_t	SUB_uint16_t		2	2	_mm_sub_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint16_t	uint16_t,uint16_t	SUB_uint16_t		4	4	_mm_sub_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint16_t	uint16_t,uint16_t	AND_uint16_t		2	2	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint16_t	uint16_t,uint16_t	AND_uint16_t		4	4	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint16_t	uint16_t,uint16_t	AND_uint16_t		8	8	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint16_t	uint16_t,uint16_t	XOR_uint16_t		2	2	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint16_t	uint16_t,uint16_t	XOR_uint16_t		4	4	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint16_t	uint16_t,uint16_t	XOR_uint16_t		8	8	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	EQ_uint16_t		2	2	_mm_cmpeq_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	EQ_uint16_t		4	4	_mm_cmpeq_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	EQ_uint16_t		8	8	_mm_cmpeq_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	GE_uint16_t		2	2	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	GE_uint16_t		4	4	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	GE_uint16_t		8	8	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmpgt_epi16($$arg1,$$arg2))		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	GT_uint16_t		2	2	_mm_cmpgt_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	GT_uint16_t		4	4	_mm_cmpgt_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	GT_uint16_t		8	8	_mm_cmpgt_epi16($$arg1,$$arg2)		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	LE_uint16_t		2	2	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	LE_uint16_t		4	4	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	v
uint16_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint16_t,uint16_t	LE_uint16_t		8	8	_mm_or_si128(_mm_cmpeq_epi16($$arg1,$$arg2),_mm_cmplt_epi16($$arg1,$$arg2))		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint32_t	uint32_t,uint32_t	ADD_uint32_t		1	1	$$arg1 + $$arg2		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint32_t	uint32_t,uint32_t	DIV_uint32_t		1	1	$$arg1 \/ $$arg2		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint32_t	uint32_t,uint32_t	SUB_uint32_t		1	1	$$arg1 - $$arg2		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint32_t	uint32_t,uint32_t	AND_uint32_t		1	1	$$arg1 & $$arg2		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint32_t	uint32_t,uint32_t	LSF_uint32_t		1	1	$$arg1 << $$arg2		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint32_t	uint32_t,uint32_t	XOR_uint32_t		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint32_t,uint32_t	EQ_uint32_t		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint32_t,uint32_t	GE_uint32_t		1	1	0xFF*($$arg1 >= $$arg2)		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint32_t,uint32_t	GT_uint32_t		1	1	0xFF*($$arg1 > $$arg2)		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint32_t,uint32_t	LE_uint32_t		1	1	0xFF*($$arg1 <= $$arg2)		C	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint32_t	uint32_t,uint32_t	ADD_uint32_t		2	2	_mm_add_epi32($$arg1,$$arg2)		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint32_t	uint32_t,uint32_t	ADD_uint32_t		4	4	_mm_add_epi32($$arg1,$$arg2)		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint32_t	uint32_t,uint32_t	SUB_uint32_t		2	2	_mm_sub_epi32($$arg1,$$arg2)		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint32_t	uint32_t,uint32_t	AND_uint32_t		2	2	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint32_t	uint32_t,uint32_t	AND_uint32_t		4	4	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint32_t	uint32_t,uint32_t	XOR_uint32_t		2	2	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint32_t	uint32_t,uint32_t	XOR_uint32_t		4	4	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	EQ_uint32_t		2	2	_mm_cmpeq_epi32($$arg1,$$arg2)		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	EQ_uint32_t		4	4	_mm_cmpeq_epi32($$arg1,$$arg2)		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	GE_uint32_t		2	2	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmpgt_epi32($$arg1,$$arg2))		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	GE_uint32_t		4	4	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmpgt_epi32($$arg1,$$arg2))		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	GT_uint32_t		2	2	_mm_cmpgt_epi32($$arg1,$$arg2)		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	GT_uint32_t		4	4	_mm_cmpgt_epi32($$arg1,$$arg2)		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	LE_uint32_t		2	2	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmplt_epi32($$arg1,$$arg2))		sse	10$/;"	v
uint32_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint32_t,uint32_t	LE_uint32_t		4	4	_mm_or_si128(_mm_cmpeq_epi32($$arg1,$$arg2),_mm_cmplt_epi32($$arg1,$$arg2))		sse	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint64_t	uint64_t,uint64_t	ADD_uint64_t		1	1	$$arg1 + $$arg2		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint64_t	uint64_t,uint64_t	DIV_uint64_t		1	1	$$arg1 \/ $$arg2		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint64_t	uint64_t,uint64_t	SUB_uint64_t		1	1	$$arg1 - $$arg2		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint64_t	uint64_t,uint64_t	AND_uint64_t		1	1	$$arg1 & $$arg2		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint64_t	uint64_t,uint64_t	LSF_uint64_t		1	1	$$arg1 << $$arg2		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint64_t	uint64_t,uint64_t	RSF_uint64_t		1	1	$$arg1 >> $$arg2		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint64_t	uint64_t,uint64_t	XOR_uint64_t		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint64_t,uint64_t	EQ_uint64_t		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint64_t,uint64_t	GE_uint64_t		1	1	0xFF*($$arg1 >= $$arg2)		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint64_t,uint64_t	GT_uint64_t		1	1	0xFF*($$arg1 > $$arg2)		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint64_t,uint64_t	LE_uint64_t		1	1	0xFF*($$arg1 <= $$arg2)		C	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint64_t	uint64_t,uint64_t	ADD_uint64_t		2	2	_mm_add_epi64($$arg1,$$arg2)		sse	10$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint64_t	uint64_t,uint64_t	AND_uint64_t		2	2	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint64_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint64_t	uint64_t,uint64_t	XOR_uint64_t		2	2	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint8_t	uint8_t,uint8_t	ADD_uint8_t		1	1	$$arg1 + $$arg2		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint8_t	uint8_t,uint8_t	DIV_uint8_t		1	1	$$arg1 \/ $$arg2		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^arithetic_std	instruction	uint8_t	uint8_t,uint8_t	SUB_uint8_t		1	1	$$arg1 - $$arg2		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	AND_uint8_t		1	1	$$arg1 & $$arg2		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	LSF_uint8_t		1	1	$$arg1 << $$arg2		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	RSF_uint8_t		1	1	$$arg1 >> $$arg2		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	XOR_uint8_t		1	1	$$arg1 ^ $$arg2		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint8_t,uint8_t	EQ_uint8_t		1	1	0xFF*($$arg1 == $$arg2)		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint8_t,uint8_t	GE_uint8_t		1	1	0xFF*($$arg1 >= $$arg2)		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint8_t,uint8_t	GT_uint8_t		1	1	0xFF*($$arg1 > $$arg2)		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^relational	instruction	ssebool	uint8_t,uint8_t	LE_uint8_t		1	1	0xFF*($$arg1 <= $$arg2)		C	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint8_t	uint8_t,uint8_t	ADD_uint8_t		16	16	_mm_add_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint8_t	uint8_t,uint8_t	ADD_uint8_t		2	2	_mm_add_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint8_t	uint8_t,uint8_t	ADD_uint8_t		4	4	_mm_add_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint8_t	uint8_t,uint8_t	ADD_uint8_t		8	8	_mm_add_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint8_t	uint8_t,uint8_t	SUB_uint8_t		2	2	_mm_sub_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint8_t	uint8_t,uint8_t	SUB_uint8_t		4	4	_mm_sub_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithetic_std	instruction	uint8_t	uint8_t,uint8_t	SUB_uint8_t		8	8	_mm_sub_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	AND_uint8_t		16	16	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	AND_uint8_t		2	2	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	AND_uint8_t		4	4	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	AND_uint8_t		8	8	_mm_and_si128($$arg1,$$arg2)		sse	5$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	XOR_uint8_t		16	16	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	XOR_uint8_t		2	2	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	XOR_uint8_t		4	4	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_arithmetic_bin	instruction	uint8_t	uint8_t,uint8_t	XOR_uint8_t		8	8	_mm_xor_si128($$arg1,$$arg2)		sse	5$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	EQ_uint8_t		16	16	_mm_cmpeq_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	EQ_uint8_t		2	2	_mm_cmpeq_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	EQ_uint8_t		4	4	_mm_cmpeq_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	EQ_uint8_t		8	8	_mm_cmpeq_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GE_uint8_t		16	16	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GE_uint8_t		2	2	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GE_uint8_t		4	4	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GE_uint8_t		8	8	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmpgt_epi8($$arg1,$$arg2))		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GT_uint8_t		16	16	_mm_cmpgt_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GT_uint8_t		2	2	_mm_cmpgt_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GT_uint8_t		4	4	_mm_cmpgt_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	GT_uint8_t		8	8	_mm_cmpgt_epi8($$arg1,$$arg2)		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	LE_uint8_t		16	16	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	LE_uint8_t		2	2	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	LE_uint8_t		4	4	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	v
uint8_t	sse_set/C_table_expanded.csv	/^sse_relational	instruction	ssebool	uint8_t,uint8_t	LE_uint8_t		8	8	_mm_or_si128(_mm_cmpeq_epi8($$arg1,$$arg2),_mm_cmplt_epi8($$arg1,$$arg2))		sse	10$/;"	v
update	generator.h	/^        void update(); \/** In case instruction table is reloaded the operation pointers are no longer valid. This function updates them.*\/$/;"	p	class:ctb::generator	access:public	signature:()
update	generator.h	/^    void generator<T,IT>::update()$/;"	f	class:ctb::generator	signature:()
update_distances	graph.h	/^            bool update_distances();$/;"	p	class:ctb::graph_generic::node	access:private	signature:()
update_distances	graph.h	/^    bool graph_generic<T,I,directed,O...>::node::update_distances()$/;"	f	class:ctb::graph_generic::node	signature:()
update_tags	instructions.h	/^            void update_tags() const;$/;"	p	class:ctb::instruction_table::operation	access:private	signature:() const
update_tags	instructions.h	/^            void update_tags() const;$/;"	p	class:ctb::instruction_table::type	access:private	signature:() const
update_tags	instructions.h	/^        \/*API*\/ void update_tags() const;$/;"	p	class:ctb::instruction_table	access:public	signature:() const
update_tags	instructions.h	/^    void instruction_table<T>::update_tags() const$/;"	f	class:ctb::instruction_table	signature:() const
update_tags	instructions.h	/^  void instruction_table<T>::operation::update_tags() const$/;"	f	class:ctb::instruction_table::operation	signature:() const
update_tags	instructions.h	/^  void instruction_table<T>::type::update_tags() const$/;"	f	class:ctb::instruction_table::type	signature:() const
val	parser.h	/^      int val(const token&);$/;"	p	class:ctb::parser	access:private	signature:(const token&)
val	parser.h	/^  int parser::val(const parser::token& t)$/;"	f	class:ctb::parser	signature:(const parser::token& t)
value	loader_csv.h	/^      static const char value = D;$/;"	m	struct:ctb::delimiter	access:public
value	writer.h	/^  struct static_false{ const static bool value = false;};$/;"	m	struct:ctb::static_false	access:public
value	writer.h	/^  struct static_true{ const static bool value = true;};$/;"	m	struct:ctb::static_true	access:public
versions	instructions.h	/^            \/*EAPI*\/proxy<std::vector<instruction>> versions;$/;"	m	class:ctb::instruction_table::operation	access:public
versions	instructions.h	/^            \/*EAPI*\/proxy<std::vector<type_version>> versions;$/;"	m	class:ctb::instruction_table::type	access:public
vertex_container_t	graph.h	/^        typedef std::map<I, node*> vertex_container_t;$/;"	t	class:ctb::graph_generic	access:private
vertex_list_t	graph.h	/^        typedef std::vector<node*> vertex_list_t;$/;"	t	class:ctb::graph_generic	access:private
verts	graph.h	/^        proxy<vertex_container_t> verts;$/;"	m	class:ctb::graph_generic	access:public
vid_t	datatypes.h	/^    typedef int vid_t;$/;"	t	struct:ctb::traits_conv_test	access:public
vid_t	datatypes.h	/^    typedef std::string vid_t;$/;"	t	struct:ctb::traits	access:public
vid_t	generator.h	/^        typedef typename T::vid_t vid_t;$/;"	t	class:ctb::generator	access:private
vim73	.exrc	/^set runtimepath=~\/.vim,\/var\/lib\/vim\/addons,\/usr\/share\/vim\/vimfiles,\/usr\/share\/vim\/vim73,\/usr\/share\/vim\/vimfiles\/after,\/var\/lib\/vim\/addons\/after,~\/.vim\/after$/;"	v
vim73	tags	/^addons	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
vim73	tags	/^after	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
vim73	tags	/^vim73	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
vimfiles	.exrc	/^set runtimepath=~\/.vim,\/var\/lib\/vim\/addons,\/usr\/share\/vim\/vimfiles,\/usr\/share\/vim\/vim73,\/usr\/share\/vim\/vimfiles\/after,\/var\/lib\/vim\/addons\/after,~\/.vim\/after$/;"	v
vimfiles	tags	/^addons	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
vimfiles	tags	/^after	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
vimfiles	tags	/^vim73	.exrc	\/^set runtimepath=~\\\/.vim,\\\/var\\\/lib\\\/vim\\\/addons,\\\/usr\\\/share\\\/vim\\\/vimfiles,\\\/usr\\\/share\\\/vim\\\/vim73,\\\/usr\\\/share\\\/vim\\\/vimfiles\\\/after,\\\/var\\\/lib\\\/vim\\\/addons\\\/after,~\\\/.vim\\\/after$\/;"	v$/;"	v
warn	errorhandling.h	/^  void warn(std::string e)$/;"	f	namespace:ctb	signature:(std::string e)
warning	errorhandling.h	/^  void warning(std::string e)$/;"	f	namespace:ctb	signature:(std::string e)
width	instructions.h	/^              const int width;$/;"	m	struct:ctb::instruction_table::type::type_version	access:public
width	instructions.h	/^              int width;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
width_in	instructions.h	/^              const int width_in;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
width_in	instructions.h	/^              int width_in;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
width_out	instructions.h	/^              const int width_out;$/;"	m	struct:ctb::instruction_table::type::conversion	access:public
width_out	instructions.h	/^              int width_out;$/;"	m	struct:ctb::instruction_table::operation::instruction	access:public
write	templates/macros.h	/^void write(uint32_t i)$/;"	f	signature:(uint32_t i)
write	unit_test4/macros.h	/^void write(uint32_t i)$/;"	f	signature:(uint32_t i)
write	unit_test5/macros.h	/^void write(uint32_t i)$/;"	f	signature:(uint32_t i)
write	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> void write(std::ostream& ss) const ;$/;"	p	class:ctb::writer	access:public	signature:(std::ostream& ss) const
write	writer.h	/^    void writer<M,I,O,P>::write(std::ostream& ss)  const$/;"	f	class:ctb::writer	signature:(std::ostream& ss) const
write_file	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> void write_file(std::string filename) const ;$/;"	p	class:ctb::writer	access:public	signature:(std::string filename) const
write_file	writer.h	/^    void writer<M,I,O,P>::write_file(std::string filename)   const$/;"	f	class:ctb::writer	signature:(std::string filename) const
write_indent	writer.h	/^        template <dolar_mode dolars> void write_indent(std::ostream& ss, const std::string& str, int indent, int nobreak) const ;$/;"	p	class:ctb::writer	access:private	signature:(std::ostream& ss, const std::string& str, int indent, int nobreak) const
write_indent	writer.h	/^    void writer<M,I,O,P>::write_indent(std::ostream& ss, const std::string& str, int indent, int nobreak) const$/;"	f	class:ctb::writer	signature:(std::ostream& ss, const std::string& str, int indent, int nobreak) const
write_line	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> std::string write_line(int i) const ;$/;"	p	class:ctb::writer	access:public	signature:(int i) const
write_line	writer.h	/^  std::string writer<M,I,O,P>::write_line(int i) const$/;"	f	class:ctb::writer	signature:(int i) const
write_std	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> void write_std() const ;$/;"	p	class:ctb::writer	access:public	signature:() const
write_std	writer.h	/^    void writer<M,I,O,P>::write_std()   const$/;"	f	class:ctb::writer	signature:() const
write_str	writer.h	/^        \/*output*\/   template<dolar_mode dolars = O> std::string write_str() const ;$/;"	p	class:ctb::writer	access:public	signature:() const
write_str	writer.h	/^    std::string writer<M,I,O,P>::write_str() const$/;"	f	class:ctb::writer	signature:() const
writer	writer.h	/^        \/*operators*\/ writer(const stringlist& writer);$/;"	p	class:ctb::writer	access:public	signature:(const stringlist& writer)
writer	writer.h	/^        \/*operators*\/ writer(stringlist&& writer);$/;"	p	class:ctb::writer	access:public	signature:(stringlist&& writer)
writer	writer.h	/^        \/*operators*\/template<typename N> writer(const writer<N>& writer);$/;"	p	class:ctb::writer	access:public	signature:(const writer<N>& writer)
writer	writer.h	/^        \/*operators*\/template<typename N> writer(writer<N>&& writer);$/;"	p	class:ctb::writer	access:public	signature:(writer<N>&& writer)
writer	writer.h	/^        \/*operators*\/writer();$/;"	p	class:ctb::writer	access:public	signature:()
writer	writer.h	/^        \/*operators*\/writer(const std::initializer_list<std::string>& init);\/*this one is literal! no parsing here*\/$/;"	p	class:ctb::writer	access:public	signature:(const std::initializer_list<std::string>& init)
writer	writer.h	/^    class writer $/;"	c	namespace:ctb
writer	writer.h	/^    writer<M,I,O,P>::writer() : data(), last_terminated(true)$/;"	f	class:ctb::writer	signature:()
writer	writer.h	/^    writer<M,I,O,P>::writer(const std::initializer_list<std::string>& init) : data(init), last_terminated(true)\/*the strings are taken literary - id est not formatted*\/$/;"	f	class:ctb::writer	signature:(const std::initializer_list<std::string>& init)
writer	writer.h	/^    writer<M,I,O,P>::writer(const stringlist& s) : data(s), last_terminated(true)$/;"	f	class:ctb::writer	signature:(const stringlist& s)
writer	writer.h	/^    writer<M,I,O,P>::writer(const writer<N>& w) : data(w.data), last_terminated(w.last_terminated)$/;"	f	class:ctb::writer	signature:(const writer<N>& w)
writer	writer.h	/^    writer<M,I,O,P>::writer(stringlist&& s) : data(std::move(s)), last_terminated(true)$/;"	f	class:ctb::writer	signature:(stringlist&& s)
writer	writer.h	/^    writer<M,I,O,P>::writer(writer<N>&& w) : data(std::move(w.data)), last_terminated(w.last_terminated)$/;"	f	class:ctb::writer	signature:(writer<N>&& w)
writer_default	writer.h	/^  typedef writer<aliasenv_empty_cpp> writer_default;$/;"	t	namespace:ctb
writer_plain	writer.h	/^  typedef writer<aliasenv_empty> writer_plain;$/;"	t	namespace:ctb
writer_tag	writer.h	/^  template <class M, dolar_mode I, dolar_mode O, class P> class writer_tag { };$/;"	c	namespace:ctb
xFF	sse_set/C_table.csv	/^relational	instruction	ssebool	${num->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t},$num	LT_$num		1	1	0xFF*($$arg1 < $$arg2)		C	10$/;"	p	file:	signature:($$arg1 < $$arg2) C 10 relational instruction ssebool ${num->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t},$num NE_$num 1 1 0xFF*($$arg1 != $$arg2) C 10 arithetic_std instruction ${num->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num ADD_$num 1 1 $$arg1 + $$arg2 C 10 arithetic_std instruction ${num->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num DIV_$num 1 1 $$arg1 / $$arg2 C 10 arithetic_std instruction ${num->int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num MOD_$num 1 1 $$arg1 % $$arg2 C 10 arithetic_std instruction ${num->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num MUL_$num 1 1 $$arg1 * $$arg2 C 10 arithetic_std instruction ${num->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num SUB_$num 1 1 $$arg1 - $$arg2 C 10 arithmetic_bin instruction ${num->int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num XOR_$num 1 1 $$arg1 ^ $$arg2 C 10 arithmetic_bin instruction ${num->int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num NOT_$num 1 1 ~ $$arg1 C 10 arithmetic_bin instruction ${num->int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num LSF_$num 1 1 $$arg1 << $$arg2 C 10 arithmetic_bin instruction ${num->int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num AND_$num 1 1 $$arg1 & $$arg2 C 10 arithmetic_bin instruction ${num->int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num OR_$num 1 1 $$arg1 | $$arg2 C 10 arithmetic_bin instruction ${num->int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} $num,$num RSF_$num 1 1 $$arg1 >> $$arg2 C 10 conversions instruction ${t->double,float,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} ${u->bool} CVRT_$t_$u 1 1 ($t)($$arg1 > 0) C 10 conversions instruction ${t->double,float,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} ${u->bool} CVRT_$u_$t 1 1 ($t)($$arg1 ? 1 : 0) C 10 conversions instruction ${t->double,float,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} ${u->double,float,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t} CVRT_$u_$t 1 1 ($t)$$arg1 C 10 IO instruction ${t->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t,bool} LD_$t input 1 1 $$input C 10 IO instruction ${t->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t,bool} $t ST_$t output 1 1 $$output = $$arg1 C 10 debug instruction ${t->int16_t,uint16_t,int32_t,uint32_t,int64_t,uint64_t,float,double} $t DEBUG_$t debug 1 1 DEBUG_STD($$arg1,Ó) C 10 debug instruction ${t->int8_t,uint8_t,bool,ssebool} $t DEBUG_$t debug 1 1 DEBUG_STD((int)$$arg1,Ó) C 10 debug instruction ${t->bool} $t DEBUG_$t debug ${w->2,4,8,16,32} $w DEBUG_STD($$arg1,Ó) C 10 debug_sse instruction ${t->int8_t,uint8_t,int16_t,uint16_t,int32_t,uint32_t,int64_t,uint64_t,ssebool,float,double} $t DEBUG_$t debug ${w->2,4,8,16} 1 DEBUG_SSE($$arg1,Ó) sse 10 debug_sse instruction ${t->bool} $t DEBUG_$t debug ${w->64,128} 1 DEBUG_SSE($$arg1,Ó) sse 10 types type_version void 32 32 void types type_version bool 1 1 bool types type_version ssebool 8 1 uint8_t types type_version double 64 1 double types type_version float 32 1 float types type_version int16_t 16 1 int16_t types type_version int32_t 32 1 int32_t types type_version int64_t 64 1 int64_t types type_version int8_t 8 1 int8_t types type_version uint16_t 16 1 uint16_t types type_version uint32_t 32 1 uint32_t types type_version uint64_t 64 1 uint64_t types type_version uint8_t 8 1 uint8_t sse_types type_version ${type -> int,uint}${w,n->64,2,32,4,32,2,16,8,16,4,16,2,8,16,8,8,8,4,8,2}_t $w $n __m128i sse_types type_version float 32 $[128/32/${w->2,1}] __m128 sse_types type_version double 64 $[128/64/${w->1}] __m128d sse_types type_version bool 1 ${ w->2,4,8,16,32} uint32_t sse_types type_version bool 1 ${ w->64,128} __m128i sse_types type_version ssebool 8 ${w->2,4,8,16} __m128i sse_logical instruction bool bool,bool ${name,op->AND,&,OR,|,XOR,^}_bool ${w->1,2,4,8,16,32} $w $$arg1 $op $$arg2 C 5 sse_logical instruction bool bool NOT_bool ${w->2,4,8,16,32} $w ~$$arg1 C 5 sse_logical instruction bool bool,bool EQ_bool ${w->2,4,8,16,32} $w ~($$arg1 ^ $$arg2) C 5 sse_logical instruction bool bool,bool NE_bool ${w->2,4,8,16,32} $w $$arg1 ^ $$arg2 C 5 sse_logical instruction bool bool,bool GT_bool ${w->2,4,8,16,32} $w $$arg1 & (~$$arg2) C 5 sse_logical instruction bool bool,bool LT_bool ${w->2,4,8,16,32} $w (~$$arg1) & $$arg2 C 5 sse_logical instruction bool bool,bool GE_bool ${w->2,4,8,16,32} $w $$arg1 | (~($$arg1 ^ $$arg2)) C 5 sse_logical instruction bool bool,bool LE_bool ${w->2,4,8,16,32} $w $$arg2 | (~($$arg1 ^ $$arg2)) C 5 sse_logical instruction bool bool,bool ${name,op->AND,and,OR,or,XOR,xor}_bool ${w->64,128} $w _mm_$op_si128($$arg1,$$arg2) sse 5 sse_logical instruction bool bool NOT_bool ${w->64,128} $w _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg1) sse 5 sse_logical instruction bool bool,bool EQ_bool ${w->64,128} $w _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2)) sse 5 sse_logical instruction bool bool,bool NE_bool ${w->64,128} $w _mm_xor_si128($$arg1,$$arg2) sse 5 sse_logical instruction bool bool,bool GT_bool ${w->64,128} $w _mm_and_si128($$arg1,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg2)) sse 5 sse_logical instruction bool bool,bool LT_bool ${w->64,128} $w _mm_and_si128($$arg2,_mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg1)) sse 5 sse_logical instruction bool bool,bool GE_bool ${w->64,128} $w _mm_or_si128($$arg1, _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2))) sse 5 sse_logical instruction bool bool,bool LE_bool ${w->64,128} $w _mm_or_si128($$arg2, _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_xor_si128($$arg1,$$arg2))) sse 5 sse_relational instruction ssebool ${t,c->int,epi,uint,epi}${w,n,tag->32,4,sse,32,2,sse,16,8,sse,16,4,sse,16,2,sse,8,16,sse,8,8,sse,8,4,sse,8,2,sse}_t,$t$w_t ${name,op->EQ,eq,GT,gt,LT,lt}_$t$w_t $n $n _mm_cmp$op_$c$w($$arg1,$$arg2) $tag 10 sse_relational instruction ssebool ${t,c->int,epi,uint,epi}${w,n,tag->64,2,sse,32,4,sse,32,2,sse,16,8,sse,16,4,sse,16,2,sse,8,16,sse,8,8,sse,8,4,sse,8,2,sse}_t,$t$w_t NE_$t$w_t $n $n _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),_mm_cmpeq_$c$w($$arg1,$$arg2)) $tag 10 sse_relational instruction ssebool ${t,c->int,epi,uint,epi}${w,n,tag->32,4,sse,32,2,sse,16,8,sse,16,4,sse,16,2,sse,8,16,sse,8,8,sse,8,4,sse,8,2,sse}_t,$t$w_t ${name,op->GE,gt,LE,lt}_$t$w_t $n $n _mm_or_si128(_mm_cmpeq_$c$w($$arg1,$$arg2),_mm_cmp$op_$c$w($$arg1,$$arg2)) $tag 10 sse_relational instruction ssebool ${t,c,n->double,pd,2,float,ps,4,float,ps,2},$t ${name,op->EQ,eq,GT,gt,LT,lt,LE,le,GE,ge,NE,neq}_$t $n $n (__m128i)_mm_cmp$op_$c($$arg1,$$arg2) sse 10 sse_arithetic_std instruction ${t,c->int,epi,uint,epi}${w,n->64,2,32,4,32,2,16,8,16,4,16,2,8,16,8,8,8,4,8,2}_t $t$w_t,$t$w_t ${name,op->ADD,add,SUB,sub}_$t$w_t $n $n _mm_$op_$c$w($$arg1,$$arg2) sse 10 sse_arithetic_std instruction ${t,c,tag->uint,epu,sse,int,epi,sse}${w,n->32,2,16,2,8,2}_t $t$w_t,$t$w_t ${name,op->MUL,mul}_$t$w_t $n $n _mm_$op_$c${ww->32}($$arg1,$$arg2) $tag 10 sse_arithetic_std instruction ${t,c,tag->int,epi,sse}${w,n->32,2,16,2,8,2}_t $t$w_t,$t$w_t ${name,op->MUL,mul}_$t$w_t $n $n _mm_shuffle_epi32(_mm_$op_$c$w($$arg1, $$arg2), _MM_SHUFFLE (0,0,2,0)) $tag 5 sse_arithetic_std instruction ${t,c,tag->int,epi,sse}${w,n->16,4}_t $t$w_t,$t$w_t ${name,op->MUL,mullo}_$t$w_t $n $n _mm_$op_$c$w($$arg1,$$arg2) $tag 5 sse_arithetic_std instruction ${t,c,n->float,ps,4,float,ps,2,double,pd,2} $t,$t ${name,op->ADD,add,SUB,sub,MUL,mul,DIV,div}_$t $n $n _mm_$op_$c($$arg1,$$arg2) sse 10 sse_arithmetic_bin instruction ${t,c->int,epi,uint,epi}${w,n->64,2,32,4,32,2,16,8,16,4,16,2,8,16,8,8,8,4,8,2}_t $t$w_t,$t$w_t ${name,op->AND,and,OR,or,XOR,xor}_$t$w_t $n $n _mm_$op_si128($$arg1,$$arg2) sse 5 sse_arithmetic_bin instruction ${t,c->int,epi,uint,epi}${w,n->64,2,32,4,32,2,16,8,16,4,16,2,8,16,8,8,8,4,8,2}_t $t$w_t,$t$w_t NOT_$t$w_t $n $n _mm_xor_si128(_mm_set1_epi32(0xFFFFFFFF),$$arg1) sse 5 sse_conversions instruction ${t,c->int32_t,epi32,uint32_t,epi32} ${u,d->float,ps} CVRT_$u_$t ${w->2,4} $w _mm_cvt$d_$c($$arg1) sse 10 sse_conversions instruction ${t,c->float,ps} ${u,d->uint32_t,epi32,int32_t,epi32} CVRT_$u_$t ${w->2,4} $w _mm_cvt$d_$c($$arg1) sse 10 sse_conversions instruction ${t,c->int32_t,epi32,uint32_t,epi32} ${u,d->double,pd} CVRT_$u_$t 2 2 _mm_shuffle_epi32(_mm_cvt$d_$c($$arg1),0x58) sse 10 sse_conversions instruction ${t,c->double,pd} ${u,d->uint32_t,epi32,int32_t,epi32} CVRT_$u_$t 2 2 _mm_cvt$d_$c(_mm_shuffle_epi32($$arg1,0x58)) sse 10 sse_IO instruction ${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t LD_$t$w_t input $n $n _mm_loadu_si128((__m128i*)&$$input) sse,unalignedio 11 sse_IO instruction ${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t $t$w_t ST_$t$w_t output $n $n _mm_storeu_si128((__m128i*)&$$output,$$arg1) sse,unalignedio 11 sse_IO instruction ${t,n,c,l->float,4,ps,,double,2,pd,d} LD_$t input $n $n _mm_loadu_$c(&$$input) sse,unalignedio 11 sse_IO instruction ${t,n,c,l->float,4,ps,,double,2,pd,d} $t ST_$t output $n $n _mm_storeu_$c(&$$output,(__m128$l)$$arg1) sse,unalignedio 11 sse_IO instruction ${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t LD_$t$w_t input $n $n _mm_load_si128((__m128i*)&$$input) sse,alignedio 10 sse_IO instruction ${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t $t$w_t ST_$t$w_t output $n $n _mm_store_si128((__m128i*)&$$output,$$arg1) sse,alignedio 10 sse_IO instruction ${t,n,c,l->float,4,ps,,double,2,pd,d} LD_$t input $n $n _mm_load_$c(&$$input) sse,alignedio 10 sse_IO instruction ${t,n,c,l->float,4,ps,,double,2,pd,d} $t ST_$t output $n $n _mm_store_$c(&$$output,(__m128$l)$$arg1) sse,alignedio 10 sse_IO instruction ${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t LD_$t$w_t input $n $n LDS(_mm_load_si128,(__m128i*)&$$input,$n) sse,shiftedio 10 sse_IO instruction ${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t $t$w_t ST_$t$w_t output $n $n STS(_mm_store_si128,(__m128i*)&$$output,$$arg1,$n) sse,shiftedio 10 sse_IO instruction ${t,n,c,l->float,4,ps,,double,2,pd,d} LD_$t input $n $n LDS(_mm_load_$c,&$$input,$n) sse,shiftedio 10 sse_IO instruction ${t,n,c,l->float,4,ps,,double,2,pd,d} $t ST_$t output $n $n STS(_mm_store_$c,&$$output,(__m128$l)$$arg1,$n) sse,shiftedio 10 sse_IO instruction ${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t LD_$t$w_t input $n $n $type preload_$basename = _mm_load_si128((__m128i*)&$$input); sse,preloadio 10 sse_IO instruction ${t,n,c,l->float,4,ps,,double,2,pd,d} LD_$t input $n $n $type preload_$basename = _mm_load_$c(&$$input); sse,preloadio 10 sse_IO instruction bool LD_bool_byte input 1 1 $$input C 10 sse_IO instruction bool LD_bool_vector input 1 1 load_bool($$inputg) C 10 sse_IO instruction bool LD_bool_vector input 32 32 $$input C 10 sse_IO instruction bool LD_bool_vector input 128 128 _mm_loadu_si128((const __m128i*)&$$input) sse,unalignedio 11 sse_IO instruction bool LD_bool_vector input 128 128 _mm_load_si128((const __m128i*)&$$input) sse,alignedio 10 sse_IO instruction bool LD_bool_vector input 128 128 LDS(_mm_load_si128,(const __m128i*)&$$input,128) sse,shiftedio 10 sse_IO instruction bool LD_bool_vector input 128 128 $type preload_$basename = _mm_load_si128,(const __m128i*)&$$input)
xml_loader	loader_xml.h	/^    class xml_loader$/;"	c	namespace:ctb
xml_loader::getanystr	sort	/^std::string xml_loader<T,G,IT>::getanystr(tinyxml2::XMLNode * node, std::string name)$/;"	f	class:xml_loader	signature:(tinyxml2::XMLNode * node, std::string name)
~graph_generic	graph.h	/^        ~graph_generic();$/;"	p	class:ctb::graph_generic	access:public	signature:()
~graph_generic	graph.h	/^    graph_generic<T,I,directed,O...>::~graph_generic()$/;"	f	class:ctb::graph_generic	signature:()
~instruction_table	instructions.h	/^        ~instruction_table();$/;"	p	class:ctb::instruction_table	access:public	signature:()
~instruction_table	instructions.h	/^    instruction_table<T>::~instruction_table()  $/;"	f	class:ctb::instruction_table	signature:()
