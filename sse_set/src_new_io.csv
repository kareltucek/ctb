#note	type	output type	input types	op id	flags	width in	width out	code	tags	rating	code custom	

IO	instruction	${t->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t,bool}		LD_$t	input		1	$$input	C,universal	10		increments:$$inputinc
IO	instruction		${t->float,double,int8_t,int16_t,int32_t,int64_t,uint8_t,uint16_t,uint32_t,uint64_t,bool}	ST_$t	output	1		$$output = $$arg1	C,universal	10		increments:$$outputinc

sse_IO	instruction	${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t		LD_$t$w_t	input		$n	_mm_loadu_si128((__m128i*)&$$input)	sse,unalignedio	11		increments:$$inputinc
sse_IO	instruction	${t,n,c,l->float,4,ps,,double,2,pd,d}		LD_$t	input		$n	_mm_loadu_$c(&$$input)	sse,unalignedio	11		increments:$$inputinc
sse_IO	instruction	${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t		LD_$t$w_t	input		$n	_mm_load_si128((__m128i*)&$$input)	sse,alignedio	10		increments:$$inputinc
sse_IO	instruction	${t,n,c,l->float,4,ps,,double,2,pd,d}		LD_$t	input		$n	_mm_load_$c(&$$input)	sse,alignedio	10		increments:$$inputinc

sse_IO	instruction		${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t	ST_$t$w_t	output	$n		_mm_store_si128((__m128i*)&$$output,$$arg1)	sse,alignedio,shiftedio	10		increments:$$outputinc
sse_IO	instruction		${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t	ST_$t$w_t	output	$n		_mm_storeu_si128((__m128i*)&$$output,$$arg1)	sse,unalignedio	11		increments:$$outputinc
sse_IO	instruction		${t,n,c,l->float,4,ps,,double,2,pd,d}	ST_$t	output	$n		_mm_storeu_$c(&$$output,(__m128$l)$$arg1)	sse,unalignedio	11		increments:$$outputinc
sse_IO	instruction		${t,n,c,l->float,4,ps,,double,2,pd,d}	ST_$t	output	$n		_mm_store_$c(&$$output,(__m128$l)$$arg1)	sse,alignedio,shiftedio	10		increments:$$outputinc


sse_IO	instruction	bool		LD_bool_byte	input		1	$$input	C,universal	10		increments:$$inputinc
sse_IO	instruction	bool		LD_bool_vector	input		1	load_bool($$inputg)/*do some magic here now*/	C,universal	10		increments:$$inputinc
sse_IO	instruction	bool		LD_bool_vector	input		32	$$input	C,universal	10		increments:$$inputinc
sse_IO	instruction	bool		LD_bool_vector	input		128	_mm_loadu_si128((const __m128i*)&$$input)	sse,unalignedio	11		increments:$$inputinc
sse_IO	instruction	bool		LD_bool_vector	input		128	_mm_load_si128((const __m128i*)&$$input)	sse,alignedio	10		increments:$$inputinc

sse_IO	instruction		bool	ST_bool_byte	output	1		$$output = $$arg1	C,universal	10		increments:$$outputinc
sse_IO	instruction		bool	ST_bool_vector	output	1		store_bool($$outputg,$$arg1)	C,universal	10		increments:$$outputinc
sse_IO	instruction		bool	ST_bool_vector	output	32		$$output = $$arg1	C,universal	10		increments:$$outputinc
sse_IO	instruction		bool	ST_bool_vector	output	128		_mm_storeu_si128((__m128i*)&$$output,$$arg1)	sse,alignedio,shiftedio	11		increments:$$outputinc
sse_IO	instruction		bool	ST_bool_vector	output	128		_mm_store_si128((__m128i*)&$$output,$$arg1)	sse,alignedio	10		increments:$$outputinc

sse_IO	instruction	ssebool		LD_ssebool_byte	input		1	$$input	sse,universal	10		increments:$$inputinc
sse_IO	instruction	ssebool		LD_ssebool_byte	input		16	_mm_loadu_si128((const __m128i*)&$$input)	sse,unalignedio	11		increments:$$inputinc
sse_IO	instruction	ssebool		LD_ssebool_byte	input		16	_mm_load_si128((const __m128i*)&$$input)	sse,alignedio	10		increments:$$inputinc
sse_IO	instruction		ssebool	ST_ssebool_byte	output	1		$$output = $$arg1	C,universal	10		increments:$$outputinc
sse_IO	instruction		ssebool	ST_ssebool_byte	output	16		_mm_storeu_si128((__m128i*)&$$output,$$arg1)	sse,unalignedio	11		increments:$$outputinc
sse_IO	instruction		ssebool	ST_ssebool_byte	output	16		_mm_store_si128((__m128i*)&$$output,$$arg1)	sse,alignedio,shiftedio	10		increments:$$outputinc





sse_IO	instruction	${t->int,uint}${w,n->8,16,16,8,32,4,64,2}_t		LD_$t$w_t	input		$n		sse,shiftedio	10\
	default:$$type $$name; $$EXPANDSHIFT\
	preload:$$type preload_$$basename;\
	shiftacum:$$name = preload_$$basename;preload_$$basename = ($$type)_mm_load_si128((__m128i*)(&$$input + $n - $$offset));$$name = _mm_alignr_epi8(preload_$$basename, $$name, $$$$constoffset*16/$n);\
	shiftacumpreload: preload_$$basename = _mm_load_si128((__m128i*)(&$$input - $$offset ));\
	increments:$$inputinc
sse_IO	instruction	${t,n,c,l->float,4,ps,,double,2,pd,d}		LD_$t	input		$n		sse,shiftedio	10\
	default:$$type $$name; $$EXPANDSHIFT\
	preload:$$type preload_$$basename;\
	shiftacum:$$name = preload_$$basename;preload_$$basename = ($$type)_mm_load_$c((__m128i*)(&$$input + $n - $$offset));$$name = _mm_alignr_epi8((__m128i)preload_$$basename, (__m128i)$$name, $$$$constoffset*16/$n );\
	shiftacumpreload: preload_$$basename = _mm_load_$c(&$$input - $$offset);\
	increments:$$inputinc
sse_IO	instruction	ssebool		LD_ssebool_byte	input		${n->16}		sse,shiftedio	10\
	default:$$type $$name; $$EXPANDSHIFT\
	preload:$type preload_$basename;\
	shiftacum: $$name = preload_$$basename;preload_$$basename = ($$type)_mm_load_si128((__m128i*)(&$$input + $n - $$offset));$name = _mm_alignr_epi8(preload_$$basename,$$name,$$$$constoffset*16/$n);\
	shiftacumpreload: preload_$basename = _mm_load_si128((const __m128i*)(((uint8_t*)&$$input) - $$offset));\
	increments:$$inputinc
